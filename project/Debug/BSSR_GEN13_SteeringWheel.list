
BSSR_GEN13_SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa4  08004aa4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aac  08004aac  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ab4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  08004ac0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004ac0  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fc7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e4  00000000  00000000  00018003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  0001b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241cf  00000000  00000000  0001c446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014926  00000000  00000000  00040615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfef0  00000000  00000000  00054f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  00134e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00139344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a44 	.word	0x08004a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a44 	.word	0x08004a44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b4c      	ldr	r3, [pc, #304]	@ (800063c <MX_GPIO_Init+0x148>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a4b      	ldr	r2, [pc, #300]	@ (800063c <MX_GPIO_Init+0x148>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b49      	ldr	r3, [pc, #292]	@ (800063c <MX_GPIO_Init+0x148>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b46      	ldr	r3, [pc, #280]	@ (800063c <MX_GPIO_Init+0x148>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a45      	ldr	r2, [pc, #276]	@ (800063c <MX_GPIO_Init+0x148>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b43      	ldr	r3, [pc, #268]	@ (800063c <MX_GPIO_Init+0x148>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b40      	ldr	r3, [pc, #256]	@ (800063c <MX_GPIO_Init+0x148>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <MX_GPIO_Init+0x148>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <MX_GPIO_Init+0x148>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b3a      	ldr	r3, [pc, #232]	@ (800063c <MX_GPIO_Init+0x148>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a39      	ldr	r2, [pc, #228]	@ (800063c <MX_GPIO_Init+0x148>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b37      	ldr	r3, [pc, #220]	@ (800063c <MX_GPIO_Init+0x148>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b34      	ldr	r3, [pc, #208]	@ (800063c <MX_GPIO_Init+0x148>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a33      	ldr	r2, [pc, #204]	@ (800063c <MX_GPIO_Init+0x148>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b31      	ldr	r3, [pc, #196]	@ (800063c <MX_GPIO_Init+0x148>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	482e      	ldr	r0, [pc, #184]	@ (8000640 <MX_GPIO_Init+0x14c>)
 8000588:	f000 ffee 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000592:	482c      	ldr	r0, [pc, #176]	@ (8000644 <MX_GPIO_Init+0x150>)
 8000594:	f000 ffe8 	bl	8001568 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	482a      	ldr	r0, [pc, #168]	@ (8000648 <MX_GPIO_Init+0x154>)
 800059e:	f000 ffe3 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	4827      	ldr	r0, [pc, #156]	@ (8000644 <MX_GPIO_Init+0x150>)
 80005a8:	f000 ffde 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4820      	ldr	r0, [pc, #128]	@ (8000640 <MX_GPIO_Init+0x14c>)
 80005c0:	f000 fe28 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	@ (8000640 <MX_GPIO_Init+0x14c>)
 80005dc:	f000 fe1a 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4814      	ldr	r0, [pc, #80]	@ (8000644 <MX_GPIO_Init+0x150>)
 80005f4:	f000 fe0e 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80005f8:	f640 4396 	movw	r3, #3222	@ 0xc96
 80005fc:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin|DISPLAY_EXTMODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <MX_GPIO_Init+0x150>)
 8000612:	f000 fdff 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x154>)
 800062e:	f000 fdf1 	bl	8001214 <HAL_GPIO_Init>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	@ 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800
 8000644:	48000400 	.word	0x48000400
 8000648:	48000c00 	.word	0x48000c00

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fc61 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f848 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f7ff ff4c 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800065c:	f000 f88e 	bl	800077c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000660:	f000 f8c6 	bl	80007f0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000664:	f000 f9de 	bl	8000a24 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000668:	f000 fa38 	bl	8000adc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800066c:	f000 fb2a 	bl	8000cc4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 100;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <main+0x80>)
 8000672:	2264      	movs	r2, #100	@ 0x64
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000676:	2100      	movs	r1, #0
 8000678:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <main+0x84>)
 800067a:	f002 fe51 	bl	8003320 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 100;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <main+0x80>)
 8000680:	2264      	movs	r2, #100	@ 0x64
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000684:	2108      	movs	r1, #8
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <main+0x84>)
 8000688:	f002 fe4a 	bl	8003320 <HAL_TIM_PWM_Start>

	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <main+0x88>)
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <main+0x8c>)
 8000690:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <main+0x88>)
 8000694:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <main+0x90>)
 8000696:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <main+0x88>)
 800069a:	2204      	movs	r2, #4
 800069c:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <main+0x88>)
 80006a0:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <main+0x94>)
 80006a2:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <main+0x88>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	821a      	strh	r2, [r3, #16]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <main+0x88>)
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <main+0x98>)
 80006ae:	615a      	str	r2, [r3, #20]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <main+0x88>)
 80006b2:	2210      	movs	r2, #16
 80006b4:	831a      	strh	r2, [r3, #24]
	LS032B7DD02_Init(&ls032);
 80006b6:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <main+0x88>)
 80006b8:	f000 fbed 	bl	8000e96 <LS032B7DD02_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LS032B7DD02_Write(&ls032);
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <main+0x88>)
 80006be:	f000 fc18 	bl	8000ef2 <LS032B7DD02_Write>
	  HAL_Delay(100);
 80006c2:	2064      	movs	r0, #100	@ 0x64
 80006c4:	f000 fc9c 	bl	8001000 <HAL_Delay>
	  LS032B7DD02_Write(&ls032);
 80006c8:	bf00      	nop
 80006ca:	e7f7      	b.n	80006bc <main+0x70>
 80006cc:	40000800 	.word	0x40000800
 80006d0:	20000158 	.word	0x20000158
 80006d4:	20000028 	.word	0x20000028
 80006d8:	200000a8 	.word	0x200000a8
 80006dc:	48000c00 	.word	0x48000c00
 80006e0:	2000010c 	.word	0x2000010c
 80006e4:	48000400 	.word	0x48000400

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	@ 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2244      	movs	r2, #68	@ 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 f977 	bl	80049ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800070e:	f000 ff51 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000718:	f000 f829 	bl	800076e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ff96 	bl	8001660 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800073a:	f000 f818 	bl	800076e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000742:	2302      	movs	r3, #2
 8000744:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fb5e 	bl	8001e18 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000762:	f000 f804 	bl	800076e <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	@ 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000772:	b672      	cpsid	i
}
 8000774:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <Error_Handler+0x8>
	...

0800077c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 8000782:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <MX_SPI1_Init+0x70>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 8000794:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_SPI1_Init+0x6c>)
 80007d4:	f002 f9ce 	bl	8002b74 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80007de:	f7ff ffc6 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000044 	.word	0x20000044
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_SPI3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_SPI3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_SPI3_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000804:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000808:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800080a:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_SPI3_Init+0x74>)
 800080c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000828:	2238      	movs	r2, #56	@ 0x38
 800082a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000840:	2207      	movs	r2, #7
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_SPI3_Init+0x74>)
 800084c:	2208      	movs	r2, #8
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_SPI3_Init+0x74>)
 8000852:	f002 f98f 	bl	8002b74 <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 800085c:	f7ff ff87 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000a8 	.word	0x200000a8
 8000868:	40003c00 	.word	0x40003c00

0800086c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a2f      	ldr	r2, [pc, #188]	@ (8000948 <HAL_SPI_MspInit+0xdc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d129      	bne.n	80008e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088e:	4b2f      	ldr	r3, [pc, #188]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	4a2e      	ldr	r2, [pc, #184]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000898:	6613      	str	r3, [r2, #96]	@ 0x60
 800089a:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a28      	ldr	r2, [pc, #160]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23e0      	movs	r3, #224	@ 0xe0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f000 fc9a 	bl	8001214 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e0:	e02d      	b.n	800093e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000950 <HAL_SPI_MspInit+0xe4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d128      	bne.n	800093e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a16      	ldr	r2, [pc, #88]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a10      	ldr	r2, [pc, #64]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_SPI_MspInit+0xe0>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800091c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092e:	2306      	movs	r3, #6
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <HAL_SPI_MspInit+0xe8>)
 800093a:	f000 fc6b 	bl	8001214 <HAL_GPIO_Init>
}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	@ 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40013000 	.word	0x40013000
 800094c:	40021000 	.word	0x40021000
 8000950:	40003c00 	.word	0x40003c00
 8000954:	48000800 	.word	0x48000800

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	@ 0x60
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	@ 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 fae3 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <MX_TIM2_Init+0xb0>)
 8000a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a70:	f002 fbfe 	bl	8003270 <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a7a:	f7ff fe78 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000a8e:	f003 fa03 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a98:	f7ff fe69 	bl	800076e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	@ 0x60
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 160000;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <MX_TIM2_Init+0xb4>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000ab4:	f002 fd3a 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000abe:	f7ff fe56 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ac2:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM2_Init+0xac>)
 8000ac4:	f000 f8a4 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	@ 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000010c 	.word	0x2000010c
 8000ad4:	00f423ff 	.word	0x00f423ff
 8000ad8:	00027100 	.word	0x00027100

08000adc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b00:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b02:	4a29      	ldr	r2, [pc, #164]	@ (8000ba8 <MX_TIM4_Init+0xcc>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b06:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b26:	481f      	ldr	r0, [pc, #124]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b28:	f002 fba2 	bl	8003270 <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b32:	f7ff fe1c 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4817      	ldr	r0, [pc, #92]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b46:	f003 f9a7 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b50:	f7ff fe0d 	bl	800076e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	@ 0x60
 8000b56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000b58:	2364      	movs	r3, #100	@ 0x64
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b6c:	f002 fcde 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b76:	f7ff fdfa 	bl	800076e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2208      	movs	r2, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b86:	f002 fcd1 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8000b90:	f7ff fded 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b94:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <MX_TIM4_Init+0xc8>)
 8000b96:	f000 f83b 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000158 	.word	0x20000158
 8000ba8:	40000800 	.word	0x40000800

08000bac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	4a11      	ldr	r2, [pc, #68]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000bd6:	e010      	b.n	8000bfa <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <HAL_TIM_PWM_MspInit+0x60>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d10b      	bne.n	8000bfa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_TIM_PWM_MspInit+0x5c>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40000800 	.word	0x40000800

08000c10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c30:	d11c      	bne.n	8000c6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a20      	ldr	r2, [pc, #128]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4815      	ldr	r0, [pc, #84]	@ (8000cbc <HAL_TIM_MspPostInit+0xac>)
 8000c66:	f000 fad5 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c6a:	e021      	b.n	8000cb0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <HAL_TIM_MspPostInit+0xb0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d11c      	bne.n	8000cb0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_TIM_MspPostInit+0xa8>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8000c8e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <HAL_TIM_MspPostInit+0xac>)
 8000cac:	f000 fab2 	bl	8001214 <HAL_GPIO_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	@ (8000d20 <MX_USART2_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_USART2_UART_Init+0x58>)
 8000d08:	f003 f94e 	bl	8003fa8 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f7ff fd2c 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001a4 	.word	0x200001a4
 8000d20:	40004400 	.word	0x40004400

08000d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0aa      	sub	sp, #168	@ 0xa8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2284      	movs	r2, #132	@ 0x84
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fe50 	bl	80049ea <memset>
  if(uartHandle->Instance==USART2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_UART_MspInit+0xb0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d13b      	bne.n	8000dcc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fa7b 	bl	800225c <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d6c:	f7ff fcff 	bl	800076e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	4a18      	ldr	r2, [pc, #96]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da0:	230c      	movs	r3, #12
 8000da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db8:	2307      	movs	r3, #7
 8000dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc8:	f000 fa24 	bl	8001214 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37a8      	adds	r7, #168	@ 0xa8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff fe0e 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fdf7 	bl	80049fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0e:	f7ff fc1d 	bl	800064c <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e20:	08004ab4 	.word	0x08004ab4
  ldr r2, =_sbss
 8000e24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e28:	20000230 	.word	0x20000230

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>

08000e2e <LS032B7DD02_Send>:
#include "../Inc/LS032B7DD02.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Send(LS032B7DD02_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6858      	ldr	r0, [r3, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	891b      	ldrh	r3, [r3, #8]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f000 fb8c 	bl	8001568 <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	2364      	movs	r3, #100	@ 0x64
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	f001 ff2e 	bl	8002cba <HAL_SPI_Transmit>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d009      	beq.n	8000e7c <LS032B7DD02_Send+0x4e>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6858      	ldr	r0, [r3, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	891b      	ldrh	r3, [r3, #8]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	f000 fb78 	bl	8001568 <HAL_GPIO_WritePin>
		return ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e008      	b.n	8000e8e <LS032B7DD02_Send+0x60>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6858      	ldr	r0, [r3, #4]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	891b      	ldrh	r3, [r3, #8]
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	f000 fb6e 	bl	8001568 <HAL_GPIO_WritePin>

	return SUCCESS;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LS032B7DD02_Init>:

uint8_t LS032B7DD02_Init(LS032B7DD02_HandleTypeDef *ls032) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be high, default high
	HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 f8ae 	bl	8001000 <HAL_Delay>
	uint8_t start_cmd[2] = {0x20, 0x00};
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	81bb      	strh	r3, [r7, #12]
	LS032B7DD02_Send(ls032, start_cmd, 2);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2202      	movs	r2, #2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffbc 	bl	8000e2e <LS032B7DD02_Send>
	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 f8a2 	bl	8001000 <HAL_Delay>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6958      	ldr	r0, [r3, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	8b1b      	ldrh	r3, [r3, #24]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f000 fb4e 	bl	8001568 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 f897 	bl	8001000 <HAL_Delay>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	8a1b      	ldrh	r3, [r3, #16]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f002 fa1f 	bl	8003320 <HAL_TIM_PWM_Start>
	HAL_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f88c 	bl	8001000 <HAL_Delay>
	return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LS032B7DD02_Write>:

uint8_t LS032B7DD02_Write(LS032B7DD02_HandleTypeDef *ls032) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	uint8_t test_cmd[1] = {0b10101010};
 8000efa:	23aa      	movs	r3, #170	@ 0xaa
 8000efc:	733b      	strb	r3, [r7, #12]
	LS032B7DD02_Send(ls032, test_cmd, 1);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff91 	bl	8000e2e <LS032B7DD02_Send>
}
 8000f0c:	bf00      	nop
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f943 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f80e 	bl	8000f48 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e001      	b.n	8000f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f38:	f7ff fd0e 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_InitTick+0x70>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f941 	bl	80011fa <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f919 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_InitTick+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	2000022c 	.word	0x2000022c

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000022c 	.word	0x2000022c

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5c 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb0 	bl	8001168 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e17f      	b.n	8001524 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8171 	beq.w	800151e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d005      	beq.n	8001254 <HAL_GPIO_Init+0x40>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d130      	bne.n	80012b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128a:	2201      	movs	r2, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 0201 	and.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d118      	bne.n	80012f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	08db      	lsrs	r3, r3, #3
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80ac 	beq.w	800151e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001544 <HAL_GPIO_Init+0x330>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013de:	4a5a      	ldr	r2, [pc, #360]	@ (8001548 <HAL_GPIO_Init+0x334>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x242>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4f      	ldr	r2, [pc, #316]	@ (800154c <HAL_GPIO_Init+0x338>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x23e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_GPIO_Init+0x33c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x23a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <HAL_GPIO_Init+0x340>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x236>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	@ (8001558 <HAL_GPIO_Init+0x344>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x232>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <HAL_GPIO_Init+0x348>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	@ (8001560 <HAL_GPIO_Init+0x34c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x22a>
 800143a:	2306      	movs	r3, #6
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800143e:	2307      	movs	r3, #7
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001456:	2300      	movs	r3, #0
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001468:	4937      	ldr	r1, [pc, #220]	@ (8001548 <HAL_GPIO_Init+0x334>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_GPIO_Init+0x350>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_GPIO_Init+0x350>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_GPIO_Init+0x350>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f47f ae78 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48001000 	.word	0x48001000
 800155c:	48001400 	.word	0x48001400
 8001560:	48001800 	.word	0x48001800
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c2:	d130      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015d0:	d038      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015da:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2232      	movs	r2, #50	@ 0x32
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	e002      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160c:	d102      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001620:	d110      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e00f      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001632:	d007      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800163c:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	20000000 	.word	0x20000000
 800165c:	431bde83 	.word	0x431bde83

08001660 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3ca      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	4b97      	ldr	r3, [pc, #604]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167c:	4b94      	ldr	r3, [pc, #592]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80e4 	beq.w	800185c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_RCC_OscConfig+0x4a>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	f040 808b 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	f040 8087 	bne.w	80017b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016aa:	4b89      	ldr	r3, [pc, #548]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e3a2      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4b82      	ldr	r3, [pc, #520]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_RCC_OscConfig+0x7c>
 80016d2:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016da:	e005      	b.n	80016e8 <HAL_RCC_OscConfig+0x88>
 80016dc:	4b7c      	ldr	r3, [pc, #496]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d223      	bcs.n	8001734 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd53 	bl	800219c <RCC_SetFlashLatencyFromMSIRange>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e383      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001700:	4b73      	ldr	r3, [pc, #460]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a72      	ldr	r2, [pc, #456]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b70      	ldr	r3, [pc, #448]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	496d      	ldr	r1, [pc, #436]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4968      	ldr	r1, [pc, #416]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a65      	ldr	r2, [pc, #404]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4960      	ldr	r1, [pc, #384]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b5f      	ldr	r3, [pc, #380]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	495b      	ldr	r1, [pc, #364]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fd13 	bl	800219c <RCC_SetFlashLatencyFromMSIRange>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e343      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001780:	f000 fc4a 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001784:	4602      	mov	r2, r0
 8001786:	4b52      	ldr	r3, [pc, #328]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	4950      	ldr	r1, [pc, #320]	@ (80018d4 <HAL_RCC_OscConfig+0x274>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	4a4e      	ldr	r2, [pc, #312]	@ (80018d8 <HAL_RCC_OscConfig+0x278>)
 800179e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a0:	4b4e      	ldr	r3, [pc, #312]	@ (80018dc <HAL_RCC_OscConfig+0x27c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fbcf 	bl	8000f48 <HAL_InitTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d052      	beq.n	800185a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	e327      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d032      	beq.n	8001826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c0:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a42      	ldr	r2, [pc, #264]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc0c 	bl	8000fe8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc08 	bl	8000fe8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e310      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e6:	4b3a      	ldr	r3, [pc, #232]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a36      	ldr	r2, [pc, #216]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4931      	ldr	r1, [pc, #196]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	492c      	ldr	r1, [pc, #176]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e01a      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001826:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a29      	ldr	r2, [pc, #164]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001832:	f7ff fbd9 	bl	8000fe8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183a:	f7ff fbd5 	bl	8000fe8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e2dd      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x1da>
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d074      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x21a>
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d10e      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d064      	beq.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d160      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e2ba      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x24a>
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e026      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018b2:	d115      	bne.n	80018e0 <HAL_RCC_OscConfig+0x280>
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a02      	ldr	r2, [pc, #8]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x298>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08004a5c 	.word	0x08004a5c
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fb72 	bl	8000fe8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fb6e 	bl	8000fe8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e276      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191a:	4b92      	ldr	r3, [pc, #584]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2a8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb5e 	bl	8000fe8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fb5a 	bl	8000fe8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e262      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001942:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x2d0>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d060      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x310>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d119      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e23f      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b76      	ldr	r3, [pc, #472]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4973      	ldr	r1, [pc, #460]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e040      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb19 	bl	8000fe8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb15 	bl	8000fe8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e21d      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b65      	ldr	r3, [pc, #404]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b62      	ldr	r3, [pc, #392]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	495f      	ldr	r1, [pc, #380]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff faf5 	bl	8000fe8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff faf1 	bl	8000fe8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1f9      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b53      	ldr	r3, [pc, #332]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fad0 	bl	8000fe8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff facc 	bl	8000fe8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1d4      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3ec>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a74:	4a3b      	ldr	r2, [pc, #236]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fab3 	bl	8000fe8 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff faaf 	bl	8000fe8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1b7      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a6 	beq.w	8001c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d118      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fa76 	bl	8000fe8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fa72 	bl	8000fe8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e17a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_RCC_OscConfig+0x508>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b36:	e029      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_OscConfig+0x50c>
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b56:	4a03      	ldr	r2, [pc, #12]	@ (8001b64 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x52c>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	4a9b      	ldr	r2, [pc, #620]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7c:	4b98      	ldr	r3, [pc, #608]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b82:	4a97      	ldr	r2, [pc, #604]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d016      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa28 	bl	8000fe8 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fa24 	bl	8000fe8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e12a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ed      	beq.n	8001b9c <HAL_RCC_OscConfig+0x53c>
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fa11 	bl	8000fe8 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa0d 	bl	8000fe8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e113      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be0:	4b7f      	ldr	r3, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ed      	bne.n	8001bca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b7a      	ldr	r3, [pc, #488]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	4a79      	ldr	r2, [pc, #484]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80fe 	beq.w	8001e06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80d0 	bne.w	8001db4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c14:	4b72      	ldr	r3, [pc, #456]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d130      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d127      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c54:	2a07      	cmp	r2, #7
 8001c56:	bf14      	ite	ne
 8001c58:	2201      	movne	r2, #1
 8001c5a:	2200      	moveq	r2, #0
 8001c5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d113      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d06e      	beq.n	8001d68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d069      	beq.n	8001d64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c90:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c9c:	4b50      	ldr	r3, [pc, #320]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0ad      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb8:	f7ff f996 	bl	8000fe8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f992 	bl	8000fe8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e09a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b40      	ldr	r3, [pc, #256]	@ (8001de4 <HAL_RCC_OscConfig+0x784>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cf8:	0212      	lsls	r2, r2, #8
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	3a01      	subs	r2, #1
 8001d04:	0552      	lsls	r2, r2, #21
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d0c:	0852      	lsrs	r2, r2, #1
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	0652      	lsls	r2, r2, #25
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d18:	0912      	lsrs	r2, r2, #4
 8001d1a:	0452      	lsls	r2, r2, #17
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4930      	ldr	r1, [pc, #192]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7ff f954 	bl	8000fe8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f950 	bl	8000fe8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e058      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d62:	e050      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e04f      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d148      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a16      	ldr	r2, [pc, #88]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d8c:	f7ff f92c 	bl	8000fe8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff f928 	bl	8000fe8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e030      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x734>
 8001db2:	e028      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_RCC_OscConfig+0x780>)
 8001dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f90f 	bl	8000fe8 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e00c      	b.n	8001de8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff f90b 	bl	8000fe8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d905      	bls.n	8001de8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e013      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ec      	bne.n	8001dce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4905      	ldr	r1, [pc, #20]	@ (8001e10 <HAL_RCC_OscConfig+0x7b0>)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_OscConfig+0x7b4>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e001      	b.n	8001e06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	feeefffc 	.word	0xfeeefffc

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0e7      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b75      	ldr	r3, [pc, #468]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b72      	ldr	r3, [pc, #456]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4970      	ldr	r1, [pc, #448]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cf      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b63      	ldr	r3, [pc, #396]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4960      	ldr	r1, [pc, #384]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d04c      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d121      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0a6      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	4b54      	ldr	r3, [pc, #336]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e09a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ece:	4b4e      	ldr	r3, [pc, #312]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e086      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b46      	ldr	r3, [pc, #280]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4943      	ldr	r1, [pc, #268]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f00:	f7ff f872 	bl	8000fe8 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff f86e 	bl	8000fe8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e06e      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d208      	bcs.n	8001f5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	492b      	ldr	r1, [pc, #172]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d210      	bcs.n	8001f8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6c:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	4923      	ldr	r1, [pc, #140]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e036      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4918      	ldr	r1, [pc, #96]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4910      	ldr	r1, [pc, #64]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fcc:	f000 f824 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	490b      	ldr	r1, [pc, #44]	@ (800200c <HAL_RCC_ClockConfig+0x1f4>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a09      	ldr	r2, [pc, #36]	@ (8002010 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_ClockConfig+0x1fc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe ffa9 	bl	8000f48 <HAL_InitTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	08004a5c 	.word	0x08004a5c
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002026:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002030:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x34>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d121      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d11e      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e005      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002068:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002074:	4a2b      	ldr	r2, [pc, #172]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e004      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 800209e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d134      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0xa6>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d003      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xac>
 80020bc:	e005      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x110>)
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	0e5b      	lsrs	r3, r3, #25
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	3301      	adds	r3, #1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002110:	69bb      	ldr	r3, [r7, #24]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	08004a74 	.word	0x08004a74
 8002128:	00f42400 	.word	0x00f42400

0800212c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4904      	ldr	r1, [pc, #16]	@ (800216c <HAL_RCC_GetPCLK1Freq+0x28>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08004a6c 	.word	0x08004a6c

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002174:	f7ff ffda 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4904      	ldr	r1, [pc, #16]	@ (8002198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08004a6c 	.word	0x08004a6c

0800219c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b4:	f7ff f9f0 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021b8:	6178      	str	r0, [r7, #20]
 80021ba:	e014      	b.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c8:	4b22      	ldr	r3, [pc, #136]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d4:	f7ff f9e0 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 80021d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ec:	d10b      	bne.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b80      	cmp	r3, #128	@ 0x80
 80021f2:	d919      	bls.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80021f8:	d902      	bls.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fa:	2302      	movs	r3, #2
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	e013      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e010      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b80      	cmp	r3, #128	@ 0x80
 800220a:	d902      	bls.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800220c:	2303      	movs	r3, #3
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e00a      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b80      	cmp	r3, #128	@ 0x80
 8002216:	d102      	bne.n	800221e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002218:	2302      	movs	r3, #2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e004      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b70      	cmp	r3, #112	@ 0x70
 8002222:	d101      	bne.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002224:	2301      	movs	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 0207 	bic.w	r2, r3, #7
 8002230:	4909      	ldr	r1, [pc, #36]	@ (8002258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	40022000 	.word	0x40022000

0800225c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002264:	2300      	movs	r3, #0
 8002266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002268:	2300      	movs	r3, #0
 800226a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002274:	2b00      	cmp	r3, #0
 8002276:	d041      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800227c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002280:	d02a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002282:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002286:	d824      	bhi.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002288:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800228c:	d008      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800228e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002292:	d81e      	bhi.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229c:	d010      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800229e:	e018      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022a0:	4b86      	ldr	r3, [pc, #536]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a85      	ldr	r2, [pc, #532]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ac:	e015      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa8b 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 80022ba:	4603      	mov	r3, r0
 80022bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022be:	e00c      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3320      	adds	r3, #32
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fb76 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d0:	e003      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	74fb      	strb	r3, [r7, #19]
      break;
 80022d6:	e000      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e0:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022ee:	4973      	ldr	r1, [pc, #460]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022f6:	e001      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d041      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800230c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002310:	d02a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002316:	d824      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800231c:	d008      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002322:	d81e      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d010      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800232e:	e018      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002330:	4b62      	ldr	r3, [pc, #392]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a61      	ldr	r2, [pc, #388]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233c:	e015      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fa43 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234e:	e00c      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fb2e 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002360:	e003      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
      break;
 8002366:	e000      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002370:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237e:	494f      	ldr	r1, [pc, #316]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002386:	e001      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a0 	beq.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b41      	ldr	r3, [pc, #260]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	4a40      	ldr	r2, [pc, #256]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023be:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c0:	4b3e      	ldr	r3, [pc, #248]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3a      	ldr	r2, [pc, #232]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fe04 	bl	8000fe8 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e2:	e009      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe fe00 	bl	8000fe8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d902      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	74fb      	strb	r3, [r7, #19]
        break;
 80023f6:	e005      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ef      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d15c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800240a:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01f      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	d019      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002434:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243a:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe fdbf 	bl	8000fe8 <HAL_GetTick>
 800246a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246c:	e00b      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fdbb 	bl	8000fe8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d902      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	74fb      	strb	r3, [r7, #19]
            break;
 8002484:	e006      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ec      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024aa:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024b2:	e009      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
 80024b8:	e006      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c8:	7c7b      	ldrb	r3, [r7, #17]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4ba1      	ldr	r3, [pc, #644]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	4aa0      	ldr	r2, [pc, #640]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024e6:	4b9b      	ldr	r3, [pc, #620]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	f023 0203 	bic.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	4997      	ldr	r1, [pc, #604]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002508:	4b92      	ldr	r3, [pc, #584]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f023 020c 	bic.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002516:	498f      	ldr	r1, [pc, #572]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800252a:	4b8a      	ldr	r3, [pc, #552]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002530:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	4986      	ldr	r1, [pc, #536]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800254c:	4b81      	ldr	r3, [pc, #516]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	497e      	ldr	r1, [pc, #504]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800256e:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257c:	4975      	ldr	r1, [pc, #468]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002590:	4b70      	ldr	r3, [pc, #448]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	496d      	ldr	r1, [pc, #436]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b2:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	4964      	ldr	r1, [pc, #400]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e2:	495c      	ldr	r1, [pc, #368]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f6:	4b57      	ldr	r3, [pc, #348]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002604:	4953      	ldr	r1, [pc, #332]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002618:	4b4e      	ldr	r3, [pc, #312]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	494b      	ldr	r1, [pc, #300]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	4942      	ldr	r1, [pc, #264]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d028      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800265c:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266a:	493a      	ldr	r1, [pc, #232]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267a:	d106      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b35      	ldr	r3, [pc, #212]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a34      	ldr	r2, [pc, #208]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e011      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002692:	d10c      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f898 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d028      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ba:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c8:	4922      	ldr	r1, [pc, #136]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80026e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e4:	60d3      	str	r3, [r2, #12]
 80026e6:	e011      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f869 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d031      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002726:	490b      	ldr	r1, [pc, #44]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002736:	d10f      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	2102      	movs	r1, #2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f846 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
 8002752:	e013      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002754:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3320      	adds	r3, #32
 8002766:	2102      	movs	r1, #2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f925 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027b8:	4904      	ldr	r1, [pc, #16]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000

080027d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027de:	4b75      	ldr	r3, [pc, #468]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d018      	beq.n	800281c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ea:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
       ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002802:	4b6c      	ldr	r3, [pc, #432]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
       ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d047      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e044      	b.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d018      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x86>
 8002824:	2b03      	cmp	r3, #3
 8002826:	d825      	bhi.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d002      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x62>
 800282c:	2b02      	cmp	r3, #2
 800282e:	d009      	beq.n	8002844 <RCCEx_PLLSAI1_Config+0x74>
 8002830:	e020      	b.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002832:	4b60      	ldr	r3, [pc, #384]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e01a      	b.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002844:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e013      	b.n	800287e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002862:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002872:	e006      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e004      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002882:	bf00      	nop
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800288a:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	430b      	orrs	r3, r1
 80028a0:	4944      	ldr	r1, [pc, #272]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d17d      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ac:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a40      	ldr	r2, [pc, #256]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fb96 	bl	8000fe8 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028be:	e009      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c0:	f7fe fb92 	bl	8000fe8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	73fb      	strb	r3, [r7, #15]
        break;
 80028d2:	e005      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d4:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ef      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d160      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ec:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0912      	lsrs	r2, r2, #4
 8002904:	0452      	lsls	r2, r2, #17
 8002906:	430a      	orrs	r2, r1
 8002908:	492a      	ldr	r1, [pc, #168]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
 800290e:	e027      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d112      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002916:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800291e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	0211      	lsls	r1, r2, #8
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6912      	ldr	r2, [r2, #16]
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	430a      	orrs	r2, r1
 8002934:	491f      	ldr	r1, [pc, #124]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	610b      	str	r3, [r1, #16]
 800293a:	e011      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002944:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6952      	ldr	r2, [r2, #20]
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	3a01      	subs	r2, #1
 8002956:	0652      	lsls	r2, r2, #25
 8002958:	430a      	orrs	r2, r1
 800295a:	4916      	ldr	r1, [pc, #88]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002960:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a13      	ldr	r2, [pc, #76]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800296a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fb3c 	bl	8000fe8 <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002972:	e009      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002974:	f7fe fb38 	bl	8000fe8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	73fb      	strb	r3, [r7, #15]
          break;
 8002986:	e005      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002988:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4904      	ldr	r1, [pc, #16]	@ (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029d2:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
       ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ea:	4b61      	ldr	r3, [pc, #388]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
       ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d047      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e044      	b.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d018      	beq.n	8002a3e <RCCEx_PLLSAI2_Config+0x86>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d825      	bhi.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x62>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d009      	beq.n	8002a2c <RCCEx_PLLSAI2_Config+0x74>
 8002a18:	e020      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a1a:	4b55      	ldr	r3, [pc, #340]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e01a      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a2c:	4b50      	ldr	r3, [pc, #320]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e013      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a5a:	e006      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e004      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a72:	4b3f      	ldr	r3, [pc, #252]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	430b      	orrs	r3, r1
 8002a88:	4939      	ldr	r1, [pc, #228]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d167      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a94:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe faa2 	bl	8000fe8 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa8:	f7fe fa9e 	bl	8000fe8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002abc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d14a      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	0912      	lsrs	r2, r2, #4
 8002aec:	0452      	lsls	r2, r2, #17
 8002aee:	430a      	orrs	r2, r1
 8002af0:	491f      	ldr	r1, [pc, #124]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	614b      	str	r3, [r1, #20]
 8002af6:	e011      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	0211      	lsls	r1, r2, #8
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6912      	ldr	r2, [r2, #16]
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0652      	lsls	r2, r2, #25
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4916      	ldr	r1, [pc, #88]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a13      	ldr	r2, [pc, #76]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fa5e 	bl	8000fe8 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b30:	f7fe fa5a 	bl	8000fe8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
          break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e095      	b.n	8002cb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d108      	bne.n	8002ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b96:	d009      	beq.n	8002bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
 8002b9e:	e005      	b.n	8002bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fe50 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002be2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bec:	d902      	bls.n	8002bf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e002      	b.n	8002bfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c02:	d007      	beq.n	8002c14 <HAL_SPI_Init+0xa0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c0c:	d002      	beq.n	8002c14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f003 0204 	and.w	r2, r3, #4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b088      	sub	sp, #32
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cca:	f7fe f98d 	bl	8000fe8 <HAL_GetTick>
 8002cce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e15c      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x36>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e154      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Transmit+0x48>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e14d      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d54:	d10f      	bne.n	8002d76 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b40      	cmp	r3, #64	@ 0x40
 8002d82:	d007      	beq.n	8002d94 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d9c:	d952      	bls.n	8002e44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0xf2>
 8002da6:	8b7b      	ldrh	r3, [r7, #26]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d145      	bne.n	8002e38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dd0:	e032      	b.n	8002e38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d112      	bne.n	8002e06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e04:	e018      	b.n	8002e38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e06:	f7fe f8ef 	bl	8000fe8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d803      	bhi.n	8002e1e <HAL_SPI_Transmit+0x164>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_Transmit+0x16a>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0b2      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1c7      	bne.n	8002dd2 <HAL_SPI_Transmit+0x118>
 8002e42:	e083      	b.n	8002f4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0x198>
 8002e4c:	8b7b      	ldrh	r3, [r7, #26]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d177      	bne.n	8002f42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d912      	bls.n	8002e82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b02      	subs	r3, #2
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e80:	e05f      	b.n	8002f42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ea8:	e04b      	b.n	8002f42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d12b      	bne.n	8002f10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d912      	bls.n	8002ee8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b02      	subs	r3, #2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ee6:	e02c      	b.n	8002f42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f0e:	e018      	b.n	8002f42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f10:	f7fe f86a 	bl	8000fe8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d803      	bhi.n	8002f28 <HAL_SPI_Transmit+0x26e>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d102      	bne.n	8002f2e <HAL_SPI_Transmit+0x274>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e02d      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ae      	bne.n	8002eaa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f947 	bl	80031e4 <SPI_EndRxTxTransaction>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fb8:	f7fe f816 	bl	8000fe8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fc8:	f7fe f80e 	bl	8000fe8 <HAL_GetTick>
 8002fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fce:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	015b      	lsls	r3, r3, #5
 8002fd4:	0d1b      	lsrs	r3, r3, #20
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fde:	e054      	b.n	800308a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d050      	beq.n	800308a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fe8:	f7fd fffe 	bl	8000fe8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d902      	bls.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d13d      	bne.n	800307a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800300c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003016:	d111      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003020:	d004      	beq.n	800302c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302a:	d107      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003044:	d10f      	bne.n	8003066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e017      	b.n	80030aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3b01      	subs	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d19b      	bne.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000000 	.word	0x20000000

080030b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030ca:	f7fd ff8d 	bl	8000fe8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80030da:	f7fd ff85 	bl	8000fe8 <HAL_GetTick>
 80030de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030e8:	4b3d      	ldr	r3, [pc, #244]	@ (80031e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	0d1b      	lsrs	r3, r3, #20
 80030f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003100:	e060      	b.n	80031c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003108:	d107      	bne.n	800311a <SPI_WaitFifoStateUntilTimeout+0x62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003118:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d050      	beq.n	80031c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003122:	f7fd ff61 	bl	8000fe8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	429a      	cmp	r2, r3
 8003130:	d902      	bls.n	8003138 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d13d      	bne.n	80031b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003146:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003150:	d111      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315a:	d004      	beq.n	8003166 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003164:	d107      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317e:	d10f      	bne.n	80031a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800319e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e010      	b.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d196      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	@ 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000

080031e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff5b 	bl	80030b8 <SPI_WaitFifoStateUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e027      	b.n	8003268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fec0 	bl	8002fa8 <SPI_WaitFlagStateUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e014      	b.n	8003268 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ff34 	bl	80030b8 <SPI_WaitFifoStateUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e000      	b.n	8003268 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e049      	b.n	8003316 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fc88 	bl	8000bac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 fa50 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_TIM_PWM_Start+0x24>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e03c      	b.n	80033be <HAL_TIM_PWM_Start+0x9e>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d109      	bne.n	800335e <HAL_TIM_PWM_Start+0x3e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e02f      	b.n	80033be <HAL_TIM_PWM_Start+0x9e>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d109      	bne.n	8003378 <HAL_TIM_PWM_Start+0x58>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e022      	b.n	80033be <HAL_TIM_PWM_Start+0x9e>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d109      	bne.n	8003392 <HAL_TIM_PWM_Start+0x72>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e015      	b.n	80033be <HAL_TIM_PWM_Start+0x9e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d109      	bne.n	80033ac <HAL_TIM_PWM_Start+0x8c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e008      	b.n	80033be <HAL_TIM_PWM_Start+0x9e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e09c      	b.n	8003500 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0xb6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	e023      	b.n	800341e <HAL_TIM_PWM_Start+0xfe>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0xc6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	e01b      	b.n	800341e <HAL_TIM_PWM_Start+0xfe>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_PWM_Start+0xd6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f4:	e013      	b.n	800341e <HAL_TIM_PWM_Start+0xfe>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_PWM_Start+0xe6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003404:	e00b      	b.n	800341e <HAL_TIM_PWM_Start+0xfe>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d104      	bne.n	8003416 <HAL_TIM_PWM_Start+0xf6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003414:	e003      	b.n	800341e <HAL_TIM_PWM_Start+0xfe>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd10 	bl	8003e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a35      	ldr	r2, [pc, #212]	@ (8003508 <HAL_TIM_PWM_Start+0x1e8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_TIM_PWM_Start+0x13e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a34      	ldr	r2, [pc, #208]	@ (800350c <HAL_TIM_PWM_Start+0x1ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_TIM_PWM_Start+0x13e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a32      	ldr	r2, [pc, #200]	@ (8003510 <HAL_TIM_PWM_Start+0x1f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_TIM_PWM_Start+0x13e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a31      	ldr	r2, [pc, #196]	@ (8003514 <HAL_TIM_PWM_Start+0x1f4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_TIM_PWM_Start+0x13e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2f      	ldr	r2, [pc, #188]	@ (8003518 <HAL_TIM_PWM_Start+0x1f8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_TIM_PWM_Start+0x142>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_TIM_PWM_Start+0x144>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_TIM_PWM_Start+0x1e8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01d      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348a:	d018      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	@ (800351c <HAL_TIM_PWM_Start+0x1fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <HAL_TIM_PWM_Start+0x200>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <HAL_TIM_PWM_Start+0x204>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_TIM_PWM_Start+0x1ec>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_PWM_Start+0x19e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a15      	ldr	r2, [pc, #84]	@ (8003510 <HAL_TIM_PWM_Start+0x1f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d115      	bne.n	80034ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <HAL_TIM_PWM_Start+0x208>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d015      	beq.n	80034fc <HAL_TIM_PWM_Start+0x1dc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d6:	d011      	beq.n	80034fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	e008      	b.n	80034fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e000      	b.n	80034fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40013400 	.word	0x40013400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	00010007 	.word	0x00010007

0800352c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003546:	2302      	movs	r3, #2
 8003548:	e0ff      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b14      	cmp	r3, #20
 8003556:	f200 80f0 	bhi.w	800373a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035b5 	.word	0x080035b5
 8003564:	0800373b 	.word	0x0800373b
 8003568:	0800373b 	.word	0x0800373b
 800356c:	0800373b 	.word	0x0800373b
 8003570:	080035f5 	.word	0x080035f5
 8003574:	0800373b 	.word	0x0800373b
 8003578:	0800373b 	.word	0x0800373b
 800357c:	0800373b 	.word	0x0800373b
 8003580:	08003637 	.word	0x08003637
 8003584:	0800373b 	.word	0x0800373b
 8003588:	0800373b 	.word	0x0800373b
 800358c:	0800373b 	.word	0x0800373b
 8003590:	08003677 	.word	0x08003677
 8003594:	0800373b 	.word	0x0800373b
 8003598:	0800373b 	.word	0x0800373b
 800359c:	0800373b 	.word	0x0800373b
 80035a0:	080036b9 	.word	0x080036b9
 80035a4:	0800373b 	.word	0x0800373b
 80035a8:	0800373b 	.word	0x0800373b
 80035ac:	0800373b 	.word	0x0800373b
 80035b0:	080036f9 	.word	0x080036f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f970 	bl	80038a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e0a5      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f9e0 	bl	80039c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e084      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa49 	bl	8003ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e064      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fab1 	bl	8003be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e043      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fafa 	bl	8003cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036f6:	e023      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fb3e 	bl	8003d80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003738:	e002      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a46      	ldr	r2, [pc, #280]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003772:	d00f      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a43      	ldr	r2, [pc, #268]	@ (8003884 <TIM_Base_SetConfig+0x130>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <TIM_Base_SetConfig+0x134>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a41      	ldr	r2, [pc, #260]	@ (800388c <TIM_Base_SetConfig+0x138>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a40      	ldr	r2, [pc, #256]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a35      	ldr	r2, [pc, #212]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01f      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b4:	d01b      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a32      	ldr	r2, [pc, #200]	@ (8003884 <TIM_Base_SetConfig+0x130>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d017      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a31      	ldr	r2, [pc, #196]	@ (8003888 <TIM_Base_SetConfig+0x134>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a30      	ldr	r2, [pc, #192]	@ (800388c <TIM_Base_SetConfig+0x138>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003894 <TIM_Base_SetConfig+0x140>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <TIM_Base_SetConfig+0x144>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <TIM_Base_SetConfig+0x148>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a16      	ldr	r2, [pc, #88]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <TIM_Base_SetConfig+0x140>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <TIM_Base_SetConfig+0x144>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a15      	ldr	r2, [pc, #84]	@ (800389c <TIM_Base_SetConfig+0x148>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
  }
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0201 	bic.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 0302 	bic.w	r3, r3, #2
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <TIM_OC1_SetConfig+0x10c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00f      	beq.n	8003920 <TIM_OC1_SetConfig+0x80>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a2b      	ldr	r2, [pc, #172]	@ (80039b0 <TIM_OC1_SetConfig+0x110>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_OC1_SetConfig+0x80>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2a      	ldr	r2, [pc, #168]	@ (80039b4 <TIM_OC1_SetConfig+0x114>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_OC1_SetConfig+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <TIM_OC1_SetConfig+0x118>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_OC1_SetConfig+0x80>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <TIM_OC1_SetConfig+0x11c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d10c      	bne.n	800393a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0308 	bic.w	r3, r3, #8
 8003926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <TIM_OC1_SetConfig+0x10c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00f      	beq.n	8003962 <TIM_OC1_SetConfig+0xc2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <TIM_OC1_SetConfig+0x110>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_OC1_SetConfig+0xc2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a19      	ldr	r2, [pc, #100]	@ (80039b4 <TIM_OC1_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <TIM_OC1_SetConfig+0xc2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <TIM_OC1_SetConfig+0x118>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC1_SetConfig+0xc2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a17      	ldr	r2, [pc, #92]	@ (80039bc <TIM_OC1_SetConfig+0x11c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 0210 	bic.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <TIM_OC2_SetConfig+0x100>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC2_SetConfig+0x6c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <TIM_OC2_SetConfig+0x104>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10d      	bne.n	8003a48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <TIM_OC2_SetConfig+0x100>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00f      	beq.n	8003a70 <TIM_OC2_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <TIM_OC2_SetConfig+0x104>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <TIM_OC2_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <TIM_OC2_SetConfig+0x108>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <TIM_OC2_SetConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a1a      	ldr	r2, [pc, #104]	@ (8003acc <TIM_OC2_SetConfig+0x10c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_OC2_SetConfig+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <TIM_OC2_SetConfig+0x110>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d113      	bne.n	8003a98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a27      	ldr	r2, [pc, #156]	@ (8003bd0 <TIM_OC3_SetConfig+0xfc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC3_SetConfig+0x6a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a26      	ldr	r2, [pc, #152]	@ (8003bd4 <TIM_OC3_SetConfig+0x100>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10d      	bne.n	8003b5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <TIM_OC3_SetConfig+0xfc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <TIM_OC3_SetConfig+0xae>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <TIM_OC3_SetConfig+0x100>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_OC3_SetConfig+0xae>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd8 <TIM_OC3_SetConfig+0x104>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_OC3_SetConfig+0xae>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <TIM_OC3_SetConfig+0x108>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_OC3_SetConfig+0xae>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a18      	ldr	r2, [pc, #96]	@ (8003be0 <TIM_OC3_SetConfig+0x10c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d113      	bne.n	8003baa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <TIM_OC4_SetConfig+0xc0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <TIM_OC4_SetConfig+0x84>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <TIM_OC4_SetConfig+0xc4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_OC4_SetConfig+0x84>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <TIM_OC4_SetConfig+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_OC4_SetConfig+0x84>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <TIM_OC4_SetConfig+0xcc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC4_SetConfig+0x84>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <TIM_OC4_SetConfig+0xd0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d109      	bne.n	8003c7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <TIM_OC5_SetConfig+0xb4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00f      	beq.n	8003d32 <TIM_OC5_SetConfig+0x7a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <TIM_OC5_SetConfig+0xb8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_OC5_SetConfig+0x7a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <TIM_OC5_SetConfig+0xbc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_OC5_SetConfig+0x7a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <TIM_OC5_SetConfig+0xc0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_OC5_SetConfig+0x7a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <TIM_OC5_SetConfig+0xc4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d109      	bne.n	8003d46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800

08003d80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	051b      	lsls	r3, r3, #20
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <TIM_OC6_SetConfig+0xb8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00f      	beq.n	8003dfc <TIM_OC6_SetConfig+0x7c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <TIM_OC6_SetConfig+0xbc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_OC6_SetConfig+0x7c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <TIM_OC6_SetConfig+0xc0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_OC6_SetConfig+0x7c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a15      	ldr	r2, [pc, #84]	@ (8003e44 <TIM_OC6_SetConfig+0xc4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC6_SetConfig+0x7c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a14      	ldr	r2, [pc, #80]	@ (8003e48 <TIM_OC6_SetConfig+0xc8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d109      	bne.n	8003e10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40013400 	.word	0x40013400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2201      	movs	r2, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	401a      	ands	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e068      	b.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2d      	ldr	r2, [pc, #180]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d108      	bne.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003eea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f22:	d018      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10c      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40014000 	.word	0x40014000

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e040      	b.n	800403c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc feaa 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fae0 	bl	80045b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f825 	bl	8004044 <UART_SetConfig>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e01b      	b.n	800403c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fb5f 	bl	80046f8 <UART_CheckIdleState>
 800403a:	4603      	mov	r3, r0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b08a      	sub	sp, #40	@ 0x28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	431a      	orrs	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4313      	orrs	r3, r2
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4ba4      	ldr	r3, [pc, #656]	@ (8004304 <UART_SetConfig+0x2c0>)
 8004074:	4013      	ands	r3, r2
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800407c:	430b      	orrs	r3, r1
 800407e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a99      	ldr	r2, [pc, #612]	@ (8004308 <UART_SetConfig+0x2c4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ac:	4313      	orrs	r3, r2
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a90      	ldr	r2, [pc, #576]	@ (800430c <UART_SetConfig+0x2c8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d126      	bne.n	800411c <UART_SetConfig+0xd8>
 80040ce:	4b90      	ldr	r3, [pc, #576]	@ (8004310 <UART_SetConfig+0x2cc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d81b      	bhi.n	8004114 <UART_SetConfig+0xd0>
 80040dc:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <UART_SetConfig+0xa0>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004105 	.word	0x08004105
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e116      	b.n	800432a <UART_SetConfig+0x2e6>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e112      	b.n	800432a <UART_SetConfig+0x2e6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e10e      	b.n	800432a <UART_SetConfig+0x2e6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e10a      	b.n	800432a <UART_SetConfig+0x2e6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e106      	b.n	800432a <UART_SetConfig+0x2e6>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7c      	ldr	r2, [pc, #496]	@ (8004314 <UART_SetConfig+0x2d0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d138      	bne.n	8004198 <UART_SetConfig+0x154>
 8004126:	4b7a      	ldr	r3, [pc, #488]	@ (8004310 <UART_SetConfig+0x2cc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d82d      	bhi.n	8004190 <UART_SetConfig+0x14c>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0xf8>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	08004191 	.word	0x08004191
 8004144:	08004191 	.word	0x08004191
 8004148:	08004191 	.word	0x08004191
 800414c:	08004181 	.word	0x08004181
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
 8004158:	08004191 	.word	0x08004191
 800415c:	08004179 	.word	0x08004179
 8004160:	08004191 	.word	0x08004191
 8004164:	08004191 	.word	0x08004191
 8004168:	08004191 	.word	0x08004191
 800416c:	08004189 	.word	0x08004189
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e0d8      	b.n	800432a <UART_SetConfig+0x2e6>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e0d4      	b.n	800432a <UART_SetConfig+0x2e6>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e0d0      	b.n	800432a <UART_SetConfig+0x2e6>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418e:	e0cc      	b.n	800432a <UART_SetConfig+0x2e6>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004196:	e0c8      	b.n	800432a <UART_SetConfig+0x2e6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5e      	ldr	r2, [pc, #376]	@ (8004318 <UART_SetConfig+0x2d4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d125      	bne.n	80041ee <UART_SetConfig+0x1aa>
 80041a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004310 <UART_SetConfig+0x2cc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041ac:	2b30      	cmp	r3, #48	@ 0x30
 80041ae:	d016      	beq.n	80041de <UART_SetConfig+0x19a>
 80041b0:	2b30      	cmp	r3, #48	@ 0x30
 80041b2:	d818      	bhi.n	80041e6 <UART_SetConfig+0x1a2>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d00a      	beq.n	80041ce <UART_SetConfig+0x18a>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d814      	bhi.n	80041e6 <UART_SetConfig+0x1a2>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <UART_SetConfig+0x182>
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d008      	beq.n	80041d6 <UART_SetConfig+0x192>
 80041c4:	e00f      	b.n	80041e6 <UART_SetConfig+0x1a2>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041cc:	e0ad      	b.n	800432a <UART_SetConfig+0x2e6>
 80041ce:	2302      	movs	r3, #2
 80041d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d4:	e0a9      	b.n	800432a <UART_SetConfig+0x2e6>
 80041d6:	2304      	movs	r3, #4
 80041d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041dc:	e0a5      	b.n	800432a <UART_SetConfig+0x2e6>
 80041de:	2308      	movs	r3, #8
 80041e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e4:	e0a1      	b.n	800432a <UART_SetConfig+0x2e6>
 80041e6:	2310      	movs	r3, #16
 80041e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ec:	e09d      	b.n	800432a <UART_SetConfig+0x2e6>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <UART_SetConfig+0x2d8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d125      	bne.n	8004244 <UART_SetConfig+0x200>
 80041f8:	4b45      	ldr	r3, [pc, #276]	@ (8004310 <UART_SetConfig+0x2cc>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004202:	2bc0      	cmp	r3, #192	@ 0xc0
 8004204:	d016      	beq.n	8004234 <UART_SetConfig+0x1f0>
 8004206:	2bc0      	cmp	r3, #192	@ 0xc0
 8004208:	d818      	bhi.n	800423c <UART_SetConfig+0x1f8>
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d00a      	beq.n	8004224 <UART_SetConfig+0x1e0>
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d814      	bhi.n	800423c <UART_SetConfig+0x1f8>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <UART_SetConfig+0x1d8>
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d008      	beq.n	800422c <UART_SetConfig+0x1e8>
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x1f8>
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004222:	e082      	b.n	800432a <UART_SetConfig+0x2e6>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422a:	e07e      	b.n	800432a <UART_SetConfig+0x2e6>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004232:	e07a      	b.n	800432a <UART_SetConfig+0x2e6>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423a:	e076      	b.n	800432a <UART_SetConfig+0x2e6>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004242:	e072      	b.n	800432a <UART_SetConfig+0x2e6>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a35      	ldr	r2, [pc, #212]	@ (8004320 <UART_SetConfig+0x2dc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12a      	bne.n	80042a4 <UART_SetConfig+0x260>
 800424e:	4b30      	ldr	r3, [pc, #192]	@ (8004310 <UART_SetConfig+0x2cc>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425c:	d01a      	beq.n	8004294 <UART_SetConfig+0x250>
 800425e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0x258>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004268:	d00c      	beq.n	8004284 <UART_SetConfig+0x240>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426e:	d815      	bhi.n	800429c <UART_SetConfig+0x258>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x238>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004278:	d008      	beq.n	800428c <UART_SetConfig+0x248>
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x258>
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004282:	e052      	b.n	800432a <UART_SetConfig+0x2e6>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428a:	e04e      	b.n	800432a <UART_SetConfig+0x2e6>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e04a      	b.n	800432a <UART_SetConfig+0x2e6>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e046      	b.n	800432a <UART_SetConfig+0x2e6>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e042      	b.n	800432a <UART_SetConfig+0x2e6>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <UART_SetConfig+0x2c4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d13a      	bne.n	8004324 <UART_SetConfig+0x2e0>
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <UART_SetConfig+0x2cc>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042bc:	d01a      	beq.n	80042f4 <UART_SetConfig+0x2b0>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042c2:	d81b      	bhi.n	80042fc <UART_SetConfig+0x2b8>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c8:	d00c      	beq.n	80042e4 <UART_SetConfig+0x2a0>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ce:	d815      	bhi.n	80042fc <UART_SetConfig+0x2b8>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x298>
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d8:	d008      	beq.n	80042ec <UART_SetConfig+0x2a8>
 80042da:	e00f      	b.n	80042fc <UART_SetConfig+0x2b8>
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e2:	e022      	b.n	800432a <UART_SetConfig+0x2e6>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ea:	e01e      	b.n	800432a <UART_SetConfig+0x2e6>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f2:	e01a      	b.n	800432a <UART_SetConfig+0x2e6>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fa:	e016      	b.n	800432a <UART_SetConfig+0x2e6>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e012      	b.n	800432a <UART_SetConfig+0x2e6>
 8004304:	efff69f3 	.word	0xefff69f3
 8004308:	40008000 	.word	0x40008000
 800430c:	40013800 	.word	0x40013800
 8004310:	40021000 	.word	0x40021000
 8004314:	40004400 	.word	0x40004400
 8004318:	40004800 	.word	0x40004800
 800431c:	40004c00 	.word	0x40004c00
 8004320:	40005000 	.word	0x40005000
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a9f      	ldr	r2, [pc, #636]	@ (80045ac <UART_SetConfig+0x568>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d17a      	bne.n	800442a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004338:	2b08      	cmp	r3, #8
 800433a:	d824      	bhi.n	8004386 <UART_SetConfig+0x342>
 800433c:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0x300>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004369 	.word	0x08004369
 8004348:	08004387 	.word	0x08004387
 800434c:	08004371 	.word	0x08004371
 8004350:	08004387 	.word	0x08004387
 8004354:	08004377 	.word	0x08004377
 8004358:	08004387 	.word	0x08004387
 800435c:	08004387 	.word	0x08004387
 8004360:	08004387 	.word	0x08004387
 8004364:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fd feec 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 800436c:	61f8      	str	r0, [r7, #28]
        break;
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b8f      	ldr	r3, [pc, #572]	@ (80045b0 <UART_SetConfig+0x56c>)
 8004372:	61fb      	str	r3, [r7, #28]
        break;
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fd fe4f 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800437a:	61f8      	str	r0, [r7, #28]
        break;
 800437c:	e009      	b.n	8004392 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004382:	61fb      	str	r3, [r7, #28]
        break;
 8004384:	e005      	b.n	8004392 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80fb 	beq.w	8004590 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d305      	bcc.n	80043b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d903      	bls.n	80043be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043bc:	e0e8      	b.n	8004590 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2200      	movs	r2, #0
 80043c2:	461c      	mov	r4, r3
 80043c4:	4615      	mov	r5, r2
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	022b      	lsls	r3, r5, #8
 80043d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043d4:	0222      	lsls	r2, r4, #8
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	6849      	ldr	r1, [r1, #4]
 80043da:	0849      	lsrs	r1, r1, #1
 80043dc:	2000      	movs	r0, #0
 80043de:	4688      	mov	r8, r1
 80043e0:	4681      	mov	r9, r0
 80043e2:	eb12 0a08 	adds.w	sl, r2, r8
 80043e6:	eb43 0b09 	adc.w	fp, r3, r9
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f8:	4650      	mov	r0, sl
 80043fa:	4659      	mov	r1, fp
 80043fc:	f7fb fee4 	bl	80001c8 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440e:	d308      	bcc.n	8004422 <UART_SetConfig+0x3de>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004416:	d204      	bcs.n	8004422 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	e0b6      	b.n	8004590 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004428:	e0b2      	b.n	8004590 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004432:	d15e      	bne.n	80044f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004434:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004438:	2b08      	cmp	r3, #8
 800443a:	d828      	bhi.n	800448e <UART_SetConfig+0x44a>
 800443c:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <UART_SetConfig+0x400>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	0800448f 	.word	0x0800448f
 8004454:	0800447f 	.word	0x0800447f
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fd fe6c 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 800446c:	61f8      	str	r0, [r7, #28]
        break;
 800446e:	e014      	b.n	800449a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fd fe7e 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e010      	b.n	800449a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b4d      	ldr	r3, [pc, #308]	@ (80045b0 <UART_SetConfig+0x56c>)
 800447a:	61fb      	str	r3, [r7, #28]
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fd fdcb 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8004482:	61f8      	str	r0, [r7, #28]
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e005      	b.n	800449a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d077      	beq.n	8004590 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005a      	lsls	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	441a      	add	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d916      	bls.n	80044ea <UART_SetConfig+0x4a6>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c2:	d212      	bcs.n	80044ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f023 030f 	bic.w	r3, r3, #15
 80044cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	b29a      	uxth	r2, r3
 80044da:	8afb      	ldrh	r3, [r7, #22]
 80044dc:	4313      	orrs	r3, r2
 80044de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	8afa      	ldrh	r2, [r7, #22]
 80044e6:	60da      	str	r2, [r3, #12]
 80044e8:	e052      	b.n	8004590 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044f0:	e04e      	b.n	8004590 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d827      	bhi.n	800454a <UART_SetConfig+0x506>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <UART_SetConfig+0x4bc>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	0800454b 	.word	0x0800454b
 8004510:	0800453b 	.word	0x0800453b
 8004514:	0800454b 	.word	0x0800454b
 8004518:	0800454b 	.word	0x0800454b
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004543 	.word	0x08004543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fd fe0e 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8004528:	61f8      	str	r0, [r7, #28]
        break;
 800452a:	e014      	b.n	8004556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fd fe20 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8004530:	61f8      	str	r0, [r7, #28]
        break;
 8004532:	e010      	b.n	8004556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <UART_SetConfig+0x56c>)
 8004536:	61fb      	str	r3, [r7, #28]
        break;
 8004538:	e00d      	b.n	8004556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fd fd6d 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800453e:	61f8      	str	r0, [r7, #28]
        break;
 8004540:	e009      	b.n	8004556 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	61fb      	str	r3, [r7, #28]
        break;
 8004548:	e005      	b.n	8004556 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004554:	bf00      	nop
    }

    if (pclk != 0U)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d019      	beq.n	8004590 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	085a      	lsrs	r2, r3, #1
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d909      	bls.n	800458a <UART_SetConfig+0x546>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d205      	bcs.n	800458a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e002      	b.n	8004590 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800459c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3728      	adds	r7, #40	@ 0x28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40008000 	.word	0x40008000
 80045b0:	00f42400 	.word	0x00f42400

080045b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01a      	beq.n	80046ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b2:	d10a      	bne.n	80046ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b098      	sub	sp, #96	@ 0x60
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004708:	f7fc fc6e 	bl	8000fe8 <HAL_GetTick>
 800470c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b08      	cmp	r3, #8
 800471a:	d12e      	bne.n	800477a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f88c 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d021      	beq.n	800477a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474a:	653b      	str	r3, [r7, #80]	@ 0x50
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004754:	647b      	str	r3, [r7, #68]	@ 0x44
 8004756:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800475a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e062      	b.n	8004840 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d149      	bne.n	800481c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	2200      	movs	r2, #0
 8004792:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f856 	bl	8004848 <UART_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03c      	beq.n	800481c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	623b      	str	r3, [r7, #32]
   return(result);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e6      	bne.n	80047a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047f4:	61fa      	str	r2, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	617b      	str	r3, [r7, #20]
   return(result);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e011      	b.n	8004840 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3758      	adds	r7, #88	@ 0x58
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004858:	e04f      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d04b      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fc fbc1 	bl	8000fe8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <UART_WaitOnFlagUntilTimeout+0x30>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e04e      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d037      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d034      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d031      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d110      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2208      	movs	r2, #8
 80048aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f838 	bl	8004922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2208      	movs	r2, #8
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e029      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d4:	d111      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f81e 	bl	8004922 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d0a0      	beq.n	800485a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004922:	b480      	push	{r7}
 8004924:	b095      	sub	sp, #84	@ 0x54
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800493e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004948:	643b      	str	r3, [r7, #64]	@ 0x40
 800494a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800494e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e6      	bne.n	800492a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	61fb      	str	r3, [r7, #28]
   return(result);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800497c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800497e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004994:	2b01      	cmp	r3, #1
 8004996:	d118      	bne.n	80049ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6979      	ldr	r1, [r7, #20]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	613b      	str	r3, [r7, #16]
   return(result);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e6      	bne.n	8004998 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049de:	bf00      	nop
 80049e0:	3754      	adds	r7, #84	@ 0x54
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <memset>:
 80049ea:	4402      	add	r2, r0
 80049ec:	4603      	mov	r3, r0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d100      	bne.n	80049f4 <memset+0xa>
 80049f2:	4770      	bx	lr
 80049f4:	f803 1b01 	strb.w	r1, [r3], #1
 80049f8:	e7f9      	b.n	80049ee <memset+0x4>
	...

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004a34 <__libc_init_array+0x38>)
 8004a00:	4c0d      	ldr	r4, [pc, #52]	@ (8004a38 <__libc_init_array+0x3c>)
 8004a02:	1b64      	subs	r4, r4, r5
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	2600      	movs	r6, #0
 8004a08:	42a6      	cmp	r6, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a3c <__libc_init_array+0x40>)
 8004a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a40 <__libc_init_array+0x44>)
 8004a10:	f000 f818 	bl	8004a44 <_init>
 8004a14:	1b64      	subs	r4, r4, r5
 8004a16:	10a4      	asrs	r4, r4, #2
 8004a18:	2600      	movs	r6, #0
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a24:	4798      	blx	r3
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2e:	4798      	blx	r3
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	08004aac 	.word	0x08004aac
 8004a38:	08004aac 	.word	0x08004aac
 8004a3c:	08004aac 	.word	0x08004aac
 8004a40:	08004ab0 	.word	0x08004ab0

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
