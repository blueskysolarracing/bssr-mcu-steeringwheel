
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cc4  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d14  08007d14  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d1c  08007d1c  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d1c  08007d1c  00008d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007d24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ea8  20000010  08007d34  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005eb8  08007d34  00009eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012517  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a6  00000000  00000000  0001b557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  0001edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024392  00000000  00000000  0001faef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e87  00000000  00000000  00043e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3314  00000000  00000000  00058d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c01c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004674  00000000  00000000  0013c060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001406d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005038 	.word	0x08005038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005038 	.word	0x08005038

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b53      	ldr	r3, [pc, #332]	@ (8000658 <MX_GPIO_Init+0x164>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a52      	ldr	r2, [pc, #328]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b50      	ldr	r3, [pc, #320]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b4d      	ldr	r3, [pc, #308]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a4c      	ldr	r2, [pc, #304]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b4a      	ldr	r3, [pc, #296]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b47      	ldr	r3, [pc, #284]	@ (8000658 <MX_GPIO_Init+0x164>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a46      	ldr	r2, [pc, #280]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b44      	ldr	r3, [pc, #272]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b41      	ldr	r3, [pc, #260]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a40      	ldr	r2, [pc, #256]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <MX_GPIO_Init+0x164>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a3a      	ldr	r2, [pc, #232]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	4835      	ldr	r0, [pc, #212]	@ (800065c <MX_GPIO_Init+0x168>)
 8000588:	f001 fada 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000592:	4833      	ldr	r0, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000594:	f001 fad4 	bl	8001b40 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	4831      	ldr	r0, [pc, #196]	@ (8000664 <MX_GPIO_Init+0x170>)
 800059e:	f001 facf 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	482e      	ldr	r0, [pc, #184]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005a8:	f001 faca 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4827      	ldr	r0, [pc, #156]	@ (800065c <MX_GPIO_Init+0x168>)
 80005c0:	f001 f914 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4820      	ldr	r0, [pc, #128]	@ (800065c <MX_GPIO_Init+0x168>)
 80005dc:	f001 f906 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005f4:	f001 f8fa 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80005f8:	f640 4316 	movw	r3, #3094	@ 0xc16
 80005fc:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000612:	f001 f8eb 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x170>)
 800062e:	f001 f8dd 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_GPIO_Init+0x16c>)
 800064a:	f001 f8cf 	bl	80017ec <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400
 8000664:	48000c00 	.word	0x48000c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	4841      	ldr	r0, [pc, #260]	@ (8000778 <main+0x110>)
 8000674:	f001 fa64 	bl	8001b40 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 ff3a 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f892 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ff38 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000684:	f000 f8e4 	bl	8000850 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000688:	f000 f91c 	bl	80008c4 <MX_SPI3_Init>
  MX_TIM2_Init();
 800068c:	f000 fa34 	bl	8000af8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000690:	f000 faf4 	bl	8000c7c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000694:	f000 fc20 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000698:	f000 fa8a 	bl	8000bb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 0;
 800069c:	4b37      	ldr	r3, [pc, #220]	@ (800077c <main+0x114>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4836      	ldr	r0, [pc, #216]	@ (8000780 <main+0x118>)
 80006a6:	f003 f927 	bl	80038f8 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 1000;
 80006aa:	4b34      	ldr	r3, [pc, #208]	@ (800077c <main+0x114>)
 80006ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006b2:	2108      	movs	r1, #8
 80006b4:	4832      	ldr	r0, [pc, #200]	@ (8000780 <main+0x118>)
 80006b6:	f003 f91f 	bl	80038f8 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80006ba:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <main+0x11c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4831      	ldr	r0, [pc, #196]	@ (8000788 <main+0x120>)
 80006c4:	f003 f918 	bl	80038f8 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <main+0x11c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006ce:	2108      	movs	r1, #8
 80006d0:	482d      	ldr	r0, [pc, #180]	@ (8000788 <main+0x120>)
 80006d2:	f003 f911 	bl	80038f8 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <main+0x124>)
 80006d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000790 <main+0x128>)
 80006da:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <main+0x124>)
 80006de:	4a2d      	ldr	r2, [pc, #180]	@ (8000794 <main+0x12c>)
 80006e0:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <main+0x124>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <main+0x124>)
 80006ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000798 <main+0x130>)
 80006ec:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <main+0x124>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <main+0x124>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <main+0x110>)
 80006f8:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <main+0x124>)
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <main+0x124>)
 8000702:	4a1d      	ldr	r2, [pc, #116]	@ (8000778 <main+0x110>)
 8000704:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <main+0x124>)
 8000708:	2210      	movs	r2, #16
 800070a:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <main+0x124>)
 800070e:	4a23      	ldr	r2, [pc, #140]	@ (800079c <main+0x134>)
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <main+0x138>)
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <main+0x124>)
 8000718:	851a      	strh	r2, [r3, #40]	@ 0x28
	ls032.cursor_x = 0;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <main+0x124>)
 800071c:	2200      	movs	r2, #0
 800071e:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ls032.cursor_y = 0;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <main+0x124>)
 8000722:	2200      	movs	r2, #0
 8000724:	859a      	strh	r2, [r3, #44]	@ 0x2c

	if (LS032B7DD02_Init(&ls032)) {
 8000726:	4819      	ldr	r0, [pc, #100]	@ (800078c <main+0x124>)
 8000728:	f000 fd7f 	bl	800122a <LS032B7DD02_Init>
		// TODO: Error Handle
	}

	LS032B7DD02_DrawLogo(&ls032);
 800072c:	4817      	ldr	r0, [pc, #92]	@ (800078c <main+0x124>)
 800072e:	f000 fe43 	bl	80013b8 <LS032B7DD02_DrawLogo>
	LS032B7DD02_Update(&ls032);
 8000732:	4816      	ldr	r0, [pc, #88]	@ (800078c <main+0x124>)
 8000734:	f000 fdfc 	bl	8001330 <LS032B7DD02_Update>

	uint8_t tmp_num = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LS032B7DD02_Clear(&ls032);
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <main+0x124>)
 800073e:	f000 fe1a 	bl	8001376 <LS032B7DD02_Clear>
	  LS032B7DD02_Wipe(&ls032);
 8000742:	4812      	ldr	r0, [pc, #72]	@ (800078c <main+0x124>)
 8000744:	f000 fe05 	bl	8001352 <LS032B7DD02_Wipe>
	  LS032B7DD02_DrawChar(&ls032, tmp_num + 48);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3330      	adds	r3, #48	@ 0x30
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	480e      	ldr	r0, [pc, #56]	@ (800078c <main+0x124>)
 8000752:	f000 fe67 	bl	8001424 <LS032B7DD02_DrawChar>
	  LS032B7DD02_Update(&ls032);
 8000756:	480d      	ldr	r0, [pc, #52]	@ (800078c <main+0x124>)
 8000758:	f000 fdea 	bl	8001330 <LS032B7DD02_Update>
	  tmp_num++;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3301      	adds	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
	  if (tmp_num > 9)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b09      	cmp	r3, #9
 8000766:	d901      	bls.n	800076c <main+0x104>
		  tmp_num = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000770:	f000 ff32 	bl	80015d8 <HAL_Delay>
	  LS032B7DD02_Clear(&ls032);
 8000774:	e7e2      	b.n	800073c <main+0xd4>
 8000776:	bf00      	nop
 8000778:	48000400 	.word	0x48000400
 800077c:	40000800 	.word	0x40000800
 8000780:	20005de0 	.word	0x20005de0
 8000784:	40000400 	.word	0x40000400
 8000788:	20005d94 	.word	0x20005d94
 800078c:	2000002c 	.word	0x2000002c
 8000790:	20005ce4 	.word	0x20005ce4
 8000794:	48000c00 	.word	0x48000c00
 8000798:	20005d48 	.word	0x20005d48
 800079c:	2000005c 	.word	0x2000005c
 80007a0:	20000000 	.word	0x20000000

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b096      	sub	sp, #88	@ 0x58
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2244      	movs	r2, #68	@ 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fc05 	bl	8004fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ca:	f001 f9df 	bl	8001b8c <HAL_PWREx_ControlVoltageScaling>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d4:	f000 f835 	bl	8000842 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	2303      	movs	r3, #3
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007ee:	2308      	movs	r3, #8
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa18 	bl	8001c38 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800080e:	f000 f818 	bl	8000842 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2303      	movs	r3, #3
 8000818:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2103      	movs	r1, #3
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fde0 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000836:	f000 f804 	bl	8000842 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3758      	adds	r7, #88	@ 0x58
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000846:	b672      	cpsid	i
}
 8000848:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084a:	bf00      	nop
 800084c:	e7fd      	b.n	800084a <Error_Handler+0x8>
	...

08000850 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000856:	4a1a      	ldr	r2, [pc, #104]	@ (80008c0 <MX_SPI1_Init+0x70>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_SPI1_Init+0x6c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000868:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800086c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_SPI1_Init+0x6c>)
 800087c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_SPI1_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_SPI1_Init+0x6c>)
 8000896:	2207      	movs	r2, #7
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_SPI1_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_SPI1_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_SPI1_Init+0x6c>)
 80008a8:	f002 fc50 	bl	800314c <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008b2:	f7ff ffc6 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20005c80 	.word	0x20005c80
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_SPI3_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008dc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_SPI3_Init+0x74>)
 80008fc:	2210      	movs	r2, #16
 80008fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_SPI3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_SPI3_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_SPI3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_SPI3_Init+0x74>)
 8000914:	2207      	movs	r2, #7
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_SPI3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_SPI3_Init+0x74>)
 8000920:	2208      	movs	r2, #8
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_SPI3_Init+0x74>)
 8000926:	f002 fc11 	bl	800314c <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000930:	f7ff ff87 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20005ce4 	.word	0x20005ce4
 800093c:	40003c00 	.word	0x40003c00

08000940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <HAL_SPI_MspInit+0xdc>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d129      	bne.n	80009b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800096c:	6613      	str	r3, [r2, #96]	@ 0x60
 800096e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23e0      	movs	r3, #224	@ 0xe0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b0:	f000 ff1c 	bl	80017ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b4:	e02d      	b.n	8000a12 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000a24 <HAL_SPI_MspInit+0xe4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d128      	bne.n	8000a12 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c4:	4a16      	ldr	r2, [pc, #88]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_SPI_MspInit+0xe0>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80009f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a02:	2306      	movs	r3, #6
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <HAL_SPI_MspInit+0xe8>)
 8000a0e:	f000 feed 	bl	80017ec <HAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013000 	.word	0x40013000
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40003c00 	.word	0x40003c00
 8000a28:	48000800 	.word	0x48000800

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 fd65 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b26:	2230      	movs	r2, #48	@ 0x30
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <MX_TIM2_Init+0xb0>)
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b42:	4818      	ldr	r0, [pc, #96]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b44:	f002 fe80 	bl	8003848 <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b4e:	f7ff fe78 	bl	8000842 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b62:	f003 fc85 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b6c:	f7ff fe69 	bl	8000842 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	@ 0x60
 8000b72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_TIM2_Init+0xb4>)
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2204      	movs	r2, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b88:	f002 ffbc 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b92:	f7ff fe56 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b96:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <MX_TIM2_Init+0xac>)
 8000b98:	f000 f91c 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20005d48 	.word	0x20005d48
 8000ba8:	0061a7ff 	.word	0x0061a7ff
 8000bac:	0030d400 	.word	0x0030d400

08000bb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000bd6:	4a28      	ldr	r2, [pc, #160]	@ (8000c78 <MX_TIM3_Init+0xc8>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000be6:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000be8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bfa:	481e      	ldr	r0, [pc, #120]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000bfc:	f002 fe24 	bl	8003848 <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c06:	f7ff fe1c 	bl	8000842 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000c1a:	f003 fc29 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c24:	f7ff fe0d 	bl	8000842 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	2360      	movs	r3, #96	@ 0x60
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c2c:	2332      	movs	r3, #50	@ 0x32
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000c40:	f002 ff60 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c4a:	f7ff fdfa 	bl	8000842 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2208      	movs	r2, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000c56:	f002 ff55 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c60:	f7ff fdef 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM3_Init+0xc4>)
 8000c66:	f000 f8b5 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20005d94 	.word	0x20005d94
 8000c78:	40000400 	.word	0x40000400

08000c7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000ca2:	4a28      	ldr	r2, [pc, #160]	@ (8000d44 <MX_TIM4_Init+0xc8>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000cb4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc6:	481e      	ldr	r0, [pc, #120]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000cc8:	f002 fdbe 	bl	8003848 <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cd2:	f7ff fdb6 	bl	8000842 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000ce6:	f003 fbc3 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000cf0:	f7ff fda7 	bl	8000842 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf4:	2360      	movs	r3, #96	@ 0x60
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000d0c:	f002 fefa 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d16:	f7ff fd94 	bl	8000842 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000d22:	f002 feef 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d2c:	f7ff fd89 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <MX_TIM4_Init+0xc4>)
 8000d32:	f000 f84f 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20005de0 	.word	0x20005de0
 8000d44:	40000800 	.word	0x40000800

08000d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d58:	d10c      	bne.n	8000d74 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d72:	e022      	b.n	8000dba <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10c      	bne.n	8000d98 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
}
 8000d96:	e010      	b.n	8000dba <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <HAL_TIM_PWM_MspInit+0x88>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10b      	bne.n	8000dba <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x80>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	bf00      	nop
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40000400 	.word	0x40000400
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d11c      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a32      	ldr	r2, [pc, #200]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4827      	ldr	r0, [pc, #156]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf4>)
 8000e2a:	f000 fcdf 	bl	80017ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e2e:	e044      	b.n	8000eba <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a25      	ldr	r2, [pc, #148]	@ (8000ecc <HAL_TIM_MspPostInit+0xf8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11d      	bne.n	8000e76 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8000e52:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e64:	2302      	movs	r3, #2
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <HAL_TIM_MspPostInit+0xfc>)
 8000e70:	f000 fcbc 	bl	80017ec <HAL_GPIO_Init>
}
 8000e74:	e021      	b.n	8000eba <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <HAL_TIM_MspPostInit+0x100>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d11c      	bne.n	8000eba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf0>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8000e98:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf4>)
 8000eb6:	f000 fc99 	bl	80017ec <HAL_GPIO_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	48000800 	.word	0x48000800
 8000ed4:	40000800 	.word	0x40000800

08000ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ede:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <MX_USART2_UART_Init+0x5c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f1c:	f003 fb30 	bl	8004580 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f26:	f7ff fc8c 	bl	8000842 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20005e2c 	.word	0x20005e2c
 8000f34:	40004400 	.word	0x40004400

08000f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0aa      	sub	sp, #168	@ 0xa8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2284      	movs	r2, #132	@ 0x84
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f832 	bl	8004fc2 <memset>
  if(uartHandle->Instance==USART2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a21      	ldr	r2, [pc, #132]	@ (8000fe8 <HAL_UART_MspInit+0xb0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d13b      	bne.n	8000fe0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fc5d 	bl	8002834 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f80:	f7ff fc5f 	bl	8000842 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_UART_MspInit+0xb4>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fdc:	f000 fc06 	bl	80017ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	37a8      	adds	r7, #168	@ 0xa8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40021000 	.word	0x40021000

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff fd6e 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f003 ffd9 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fb21 	bl	8000668 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001034:	08007d24 	.word	0x08007d24
  ldr r2, =_sbss
 8001038:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800103c:	20005eb8 	.word	0x20005eb8

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>

08001042 <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e003      	b.n	8001058 <delay_us+0x16>
		asm("NOP");
 8001050:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	019b      	lsls	r3, r3, #6
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	d3f6      	bcc.n	8001050 <delay_us+0xe>
	}
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 8001082:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b25a      	sxtb	r2, r3
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	105b      	asrs	r3, r3, #1
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25a      	sxtb	r2, r3
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b25b      	sxtb	r3, r3
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	b25b      	sxtb	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b25a      	sxtb	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25a      	sxtb	r2, r3
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	105b      	asrs	r3, r3, #1
 8001136:	b25b      	sxtb	r3, r3
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b25a      	sxtb	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b25a      	sxtb	r2, r3
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	10db      	asrs	r3, r3, #3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	b25b      	sxtb	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b25a      	sxtb	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25a      	sxtb	r2, r3
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	115b      	asrs	r3, r3, #5
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	11db      	asrs	r3, r3, #7
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	125b      	asrs	r3, r3, #9
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <get_idx_from_cursor>:

uint8_t get_idx_from_cursor(LS032B7DD02_HandleTypeDef *ls032, uint16_t *vram_idx) {
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
	if (ls032->cursor_x >= LS032_PIXEL_WIDTH) return ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80011e8:	d301      	bcc.n	80011ee <get_idx_from_cursor+0x18>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e017      	b.n	800121e <get_idx_from_cursor+0x48>
	if (ls032->cursor_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80011f2:	2b29      	cmp	r3, #41	@ 0x29
 80011f4:	d901      	bls.n	80011fa <get_idx_from_cursor+0x24>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e011      	b.n	800121e <get_idx_from_cursor+0x48>

	*vram_idx = ls032->cursor_x * 44 + ls032->cursor_y + 2;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fe:	461a      	mov	r2, r3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	441a      	add	r2, r3
 8001204:	0052      	lsls	r2, r2, #1
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	3302      	adds	r3, #2
 8001216:	b29a      	uxth	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LS032B7DD02_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Init(LS032B7DD02_HandleTypeDef *ls032) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800123a:	461a      	mov	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f003 fec0 	bl	8004fc2 <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001242:	2300      	movs	r3, #0
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	e00e      	b.n	8001266 <LS032B7DD02_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	89fa      	ldrh	r2, [r7, #14]
 800124e:	212c      	movs	r1, #44	@ 0x2c
 8001250:	fb01 f202 	mul.w	r2, r1, r2
 8001254:	441a      	add	r2, r3
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff08 	bl	8001070 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	3301      	adds	r3, #1
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800126c:	d3ec      	bcc.n	8001248 <LS032B7DD02_Init+0x1e>
	}

	delay_us(30);
 800126e:	201e      	movs	r0, #30
 8001270:	f7ff fee7 	bl	8001042 <delay_us>
	// Need to clear twice for some reason
	LS032B7DD02_Wipe(ls032);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f86c 	bl	8001352 <LS032B7DD02_Wipe>
	LS032B7DD02_Wipe(ls032);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f869 	bl	8001352 <LS032B7DD02_Wipe>
	delay_us(30);
 8001280:	201e      	movs	r0, #30
 8001282:	f7ff fede 	bl	8001042 <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69d8      	ldr	r0, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8c1b      	ldrh	r3, [r3, #32]
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	f000 fc55 	bl	8001b40 <HAL_GPIO_WritePin>
	delay_us(30);
 8001296:	201e      	movs	r0, #30
 8001298:	f7ff fed3 	bl	8001042 <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a1b      	ldrh	r3, [r3, #16]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f002 fb26 	bl	80038f8 <HAL_TIM_PWM_Start>
	delay_us(30);
 80012ac:	201e      	movs	r0, #30
 80012ae:	f7ff fec8 	bl	8001042 <delay_us>
	return SUCCESS;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LS032B7DD02_Send>:

uint8_t LS032B7DD02_Send(LS032B7DD02_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	4613      	mov	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6858      	ldr	r0, [r3, #4]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	891b      	ldrh	r3, [r3, #8]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	f000 fc31 	bl	8001b40 <HAL_GPIO_WritePin>
	delay_us(3);
 80012de:	2003      	movs	r0, #3
 80012e0:	f7ff feaf 	bl	8001042 <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	f001 ffd0 	bl	8003292 <HAL_SPI_Transmit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fea3 	bl	8001042 <delay_us>
	if (ret) {
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <LS032B7DD02_Send+0x5a>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6858      	ldr	r0, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	891b      	ldrh	r3, [r3, #8]
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	f000 fc17 	bl	8001b40 <HAL_GPIO_WritePin>
		return ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e008      	b.n	8001328 <LS032B7DD02_Send+0x6c>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6858      	ldr	r0, [r3, #4]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	891b      	ldrh	r3, [r3, #8]
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	f000 fc0d 	bl	8001b40 <HAL_GPIO_WritePin>

	return SUCCESS;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <LS032B7DD02_Update>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Update(LS032B7DD02_HandleTypeDef *ls032) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	// Push VRAM to LCD Mem.
	// Todo: Make this a DMA TX
	return LS032B7DD02_Send(ls032, ls032->vram, ls032->vram_len);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001340:	461a      	mov	r2, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffba 	bl	80012bc <LS032B7DD02_Send>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <LS032B7DD02_Wipe>:

uint8_t LS032B7DD02_Wipe(LS032B7DD02_HandleTypeDef *ls032) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 800135a:	2320      	movs	r3, #32
 800135c:	81bb      	strh	r3, [r7, #12]
	return LS032B7DD02_Send(ls032, clear_cmd, 2);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2202      	movs	r2, #2
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa8 	bl	80012bc <LS032B7DD02_Send>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <LS032B7DD02_Clear>:

uint8_t LS032B7DD02_Clear(LS032B7DD02_HandleTypeDef *ls032) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800137e:	2300      	movs	r3, #0
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	e00f      	b.n	80013a4 <LS032B7DD02_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	212c      	movs	r1, #44	@ 0x2c
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	3302      	adds	r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	222a      	movs	r2, #42	@ 0x2a
 8001396:	21ff      	movs	r1, #255	@ 0xff
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fe12 	bl	8004fc2 <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	3301      	adds	r3, #1
 80013a2:	81fb      	strh	r3, [r7, #14]
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80013aa:	d3eb      	bcc.n	8001384 <LS032B7DD02_Clear+0xe>
	}

	return SUCCESS;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <LS032B7DD02_DrawLogo>:
}

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_DrawLogo(LS032B7DD02_HandleTypeDef *ls032) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	LS032B7DD02_Clear(ls032);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffd8 	bl	8001376 <LS032B7DD02_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 80013c6:	2312      	movs	r3, #18
 80013c8:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 80013ca:	230a      	movs	r3, #10
 80013cc:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	e01c      	b.n	800140e <LS032B7DD02_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d8:	89f9      	ldrh	r1, [r7, #14]
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	440b      	add	r3, r1
 80013de:	212c      	movs	r1, #44	@ 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	440b      	add	r3, r1
 80013ea:	3302      	adds	r3, #2
 80013ec:	18d0      	adds	r0, r2, r3
 80013ee:	89fa      	ldrh	r2, [r7, #14]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <LS032B7DD02_DrawLogo+0x68>)
 80013fe:	4413      	add	r3, r2
 8001400:	2215      	movs	r2, #21
 8001402:	4619      	mov	r1, r3
 8001404:	f003 fe0a 	bl	800501c <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	3301      	adds	r3, #1
 800140c:	81fb      	strh	r3, [r7, #14]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001414:	d3de      	bcc.n	80013d4 <LS032B7DD02_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08005410 	.word	0x08005410

08001424 <LS032B7DD02_DrawChar>:

uint8_t LS032B7DD02_DrawChar(LS032B7DD02_HandleTypeDef *ls032, char ch) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d101      	bne.n	800143a <LS032B7DD02_DrawChar+0x16>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001436:	2300      	movs	r3, #0
 8001438:	e051      	b.n	80014de <LS032B7DD02_DrawChar+0xba>
	}

	uint16_t char_idx = ALPHNUM_1_IDX[(uint8_t)ch];
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	4a2a      	ldr	r2, [pc, #168]	@ (80014e8 <LS032B7DD02_DrawChar+0xc4>)
 800143e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001442:	817b      	strh	r3, [r7, #10]
	if (char_idx == 0)
 8001444:	897b      	ldrh	r3, [r7, #10]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <LS032B7DD02_DrawChar+0x2a>
		return ERROR;	// char is unable to be rendered
 800144a:	2301      	movs	r3, #1
 800144c:	e047      	b.n	80014de <LS032B7DD02_DrawChar+0xba>

	uint8_t char_width = ALPHNUM_1[char_idx];
 800144e:	897b      	ldrh	r3, [r7, #10]
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <LS032B7DD02_DrawChar+0xc8>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	73fb      	strb	r3, [r7, #15]
	uint8_t char_height = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
	uint16_t vram_idx = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	813b      	strh	r3, [r7, #8]
	get_idx_from_cursor(ls032, &vram_idx);
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff feb6 	bl	80011d6 <get_idx_from_cursor>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - ls032->cursor_x < char_width)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146e:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	429a      	cmp	r2, r3
 8001476:	da05      	bge.n	8001484 <LS032B7DD02_DrawChar+0x60>
		char_width = LS032_PIXEL_WIDTH - ls032->cursor_x;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f1c3 0318 	rsb	r3, r3, #24
 8001482:	73fb      	strb	r3, [r7, #15]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - ls032->cursor_y < char_height)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001488:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	429a      	cmp	r2, r3
 8001490:	da05      	bge.n	800149e <LS032B7DD02_DrawChar+0x7a>
		char_height = LS032_PIXEL_HEIGHT - ls032->cursor_y;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800149c:	73bb      	strb	r3, [r7, #14]

	for (uint8_t col = 0; col < char_width; col++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	737b      	strb	r3, [r7, #13]
 80014a2:	e017      	b.n	80014d4 <LS032B7DD02_DrawChar+0xb0>
		memcpy(ls032->vram + vram_idx, ALPHNUM_1 + char_idx + 1 + col*char_height, char_height);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a8:	893a      	ldrh	r2, [r7, #8]
 80014aa:	1898      	adds	r0, r3, r2
 80014ac:	897b      	ldrh	r3, [r7, #10]
 80014ae:	7b7a      	ldrb	r2, [r7, #13]
 80014b0:	7bb9      	ldrb	r1, [r7, #14]
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	4413      	add	r3, r2
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <LS032B7DD02_DrawChar+0xc8>)
 80014bc:	4413      	add	r3, r2
 80014be:	7bba      	ldrb	r2, [r7, #14]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f003 fdab 	bl	800501c <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	332c      	adds	r3, #44	@ 0x2c
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	813b      	strh	r3, [r7, #8]
	for (uint8_t col = 0; col < char_width; col++) {
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	3301      	adds	r3, #1
 80014d2:	737b      	strb	r3, [r7, #13]
 80014d4:	7b7a      	ldrb	r2, [r7, #13]
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3e3      	bcc.n	80014a4 <LS032B7DD02_DrawChar+0x80>
	}
	return SUCCESS;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08005098 	.word	0x08005098
 80014ec:	08005198 	.word	0x08005198

080014f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f942 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001500:	200f      	movs	r0, #15
 8001502:	f000 f80d 	bl	8001520 <HAL_InitTick>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	e001      	b.n	8001516 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001512:	f7ff fa8b 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001516:	79fb      	ldrb	r3, [r7, #7]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <HAL_InitTick+0x6c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d023      	beq.n	800157c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_InitTick+0x70>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_InitTick+0x6c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f941 	bl	80017d2 <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d809      	bhi.n	8001570 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f919 	bl	800179a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_InitTick+0x74>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e007      	b.n	8001580 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e004      	b.n	8001580 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e001      	b.n	8001580 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000000c 	.word	0x2000000c
 8001590:	20000004 	.word	0x20000004
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20005eb4 	.word	0x20005eb4

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20005eb4 	.word	0x20005eb4

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000000c 	.word	0x2000000c

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff47 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff5c 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffb0 	bl	8001740 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e17f      	b.n	8001afc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8171 	beq.w	8001af6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d005      	beq.n	800182c <HAL_GPIO_Init+0x40>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d118      	bne.n	80018cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	6939      	ldr	r1, [r7, #16]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80ac 	beq.w	8001af6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b1c <HAL_GPIO_Init+0x330>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b1c <HAL_GPIO_Init+0x330>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019aa:	4b5c      	ldr	r3, [pc, #368]	@ (8001b1c <HAL_GPIO_Init+0x330>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b20 <HAL_GPIO_Init+0x334>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x242>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001b24 <HAL_GPIO_Init+0x338>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x23e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001b28 <HAL_GPIO_Init+0x33c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x23a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	@ (8001b2c <HAL_GPIO_Init+0x340>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x236>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b30 <HAL_GPIO_Init+0x344>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x232>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_GPIO_Init+0x348>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x22e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x34c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x22a>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a40:	4937      	ldr	r1, [pc, #220]	@ (8001b20 <HAL_GPIO_Init+0x334>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a72:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9c:	4a27      	ldr	r2, [pc, #156]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f ae78 	bne.w	80017fc <HAL_GPIO_Init+0x10>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48001000 	.word	0x48001000
 8001b34:	48001400 	.word	0x48001400
 8001b38:	48001800 	.word	0x48001800
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b9a:	d130      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba8:	d038      	beq.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2232      	movs	r2, #50	@ 0x32
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd0:	e002      	b.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be4:	d102      	bne.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f2      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf8:	d110      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e00f      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d007      	beq.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c14:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	20000004 	.word	0x20000004
 8001c34:	431bde83 	.word	0x431bde83

08001c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e3ca      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b97      	ldr	r3, [pc, #604]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b94      	ldr	r3, [pc, #592]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80e4 	beq.w	8001e34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4a>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	f040 808b 	bne.w	8001d90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f040 8087 	bne.w	8001d90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c82:	4b89      	ldr	r3, [pc, #548]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e3a2      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	4b82      	ldr	r3, [pc, #520]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x7c>
 8001caa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCC_OscConfig+0x88>
 8001cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d223      	bcs.n	8001d0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fd53 	bl	8002774 <RCC_SetFlashLatencyFromMSIRange>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e383      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4b73      	ldr	r3, [pc, #460]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a72      	ldr	r2, [pc, #456]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b70      	ldr	r3, [pc, #448]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	496d      	ldr	r1, [pc, #436]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4968      	ldr	r1, [pc, #416]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e025      	b.n	8001d58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a65      	ldr	r2, [pc, #404]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b63      	ldr	r3, [pc, #396]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4960      	ldr	r1, [pc, #384]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	495b      	ldr	r1, [pc, #364]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fd13 	bl	8002774 <RCC_SetFlashLatencyFromMSIRange>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e343      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d58:	f000 fc4a 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b52      	ldr	r3, [pc, #328]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	4950      	ldr	r1, [pc, #320]	@ (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb0 <HAL_RCC_OscConfig+0x278>)
 8001d76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d78:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb4 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fbcf 	bl	8001520 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d052      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	e327      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d032      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fc0c 	bl	80015c0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dac:	f7ff fc08 	bl	80015c0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e310      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dca:	4b37      	ldr	r3, [pc, #220]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4931      	ldr	r1, [pc, #196]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	492c      	ldr	r1, [pc, #176]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e01a      	b.n	8001e34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a29      	ldr	r2, [pc, #164]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fbd9 	bl	80015c0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e12:	f7ff fbd5 	bl	80015c0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e2dd      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1da>
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d074      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x21a>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d10e      	bne.n	8001e6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d10b      	bne.n	8001e6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d064      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d160      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e2ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x24a>
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x298>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8a:	d115      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x280>
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a02      	ldr	r2, [pc, #8]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x298>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08005050 	.word	0x08005050
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	4ba0      	ldr	r3, [pc, #640]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a9f      	ldr	r2, [pc, #636]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a9c      	ldr	r2, [pc, #624]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb72 	bl	80015c0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fb6e 	bl	80015c0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	@ 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e276      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	4b92      	ldr	r3, [pc, #584]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2a8>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb5e 	bl	80015c0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fb5a 	bl	80015c0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e262      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	4b88      	ldr	r3, [pc, #544]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2d0>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d060      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x310>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d119      	bne.n	8001f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d116      	bne.n	8001f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f48:	4b7c      	ldr	r3, [pc, #496]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x328>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e23f      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b76      	ldr	r3, [pc, #472]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	4973      	ldr	r1, [pc, #460]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	e040      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d023      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6e      	ldr	r2, [pc, #440]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fb19 	bl	80015c0 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fb15 	bl	80015c0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e21d      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	4b65      	ldr	r3, [pc, #404]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	495f      	ldr	r1, [pc, #380]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5c      	ldr	r2, [pc, #368]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff faf5 	bl	80015c0 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff faf1 	bl	80015c0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1f9      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fec:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03c      	beq.n	800207e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01c      	beq.n	8002046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200c:	4b4b      	ldr	r3, [pc, #300]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 800200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002012:	4a4a      	ldr	r2, [pc, #296]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff fad0 	bl	80015c0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff facc 	bl	80015c0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1d4      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ef      	beq.n	8002024 <HAL_RCC_OscConfig+0x3ec>
 8002044:	e01b      	b.n	800207e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b3d      	ldr	r3, [pc, #244]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204c:	4a3b      	ldr	r2, [pc, #236]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff fab3 	bl	80015c0 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff faaf 	bl	80015c0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1b7      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ef      	bne.n	800205e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a6 	beq.w	80021d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002090:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	4a26      	ldr	r2, [pc, #152]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d118      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_RCC_OscConfig+0x508>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fa76 	bl	80015c0 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7ff fa72 	bl	80015c0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x4d8>
 80020fe:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800210e:	e029      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d115      	bne.n	8002144 <HAL_RCC_OscConfig+0x50c>
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	4a03      	ldr	r2, [pc, #12]	@ (800213c <HAL_RCC_OscConfig+0x504>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	4b9c      	ldr	r3, [pc, #624]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	4a9b      	ldr	r2, [pc, #620]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002154:	4b98      	ldr	r3, [pc, #608]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	4a97      	ldr	r2, [pc, #604]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d016      	beq.n	800219a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fa28 	bl	80015c0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7ff fa24 	bl	80015c0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e12a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218a:	4b8b      	ldr	r3, [pc, #556]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ed      	beq.n	8002174 <HAL_RCC_OscConfig+0x53c>
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff fa11 	bl	80015c0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff fa0d 	bl	80015c0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e113      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b8:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ed      	bne.n	80021a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b7a      	ldr	r3, [pc, #488]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	4a79      	ldr	r2, [pc, #484]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80fe 	beq.w	80023de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f040 80d0 	bne.w	800238c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021ec:	4b72      	ldr	r3, [pc, #456]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d130      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	3b01      	subs	r3, #1
 800220c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d127      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d11f      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800222c:	2a07      	cmp	r2, #7
 800222e:	bf14      	ite	ne
 8002230:	2201      	movne	r2, #1
 8002232:	2200      	moveq	r2, #0
 8002234:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002236:	4293      	cmp	r3, r2
 8002238:	d113      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d109      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d06e      	beq.n	8002340 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d069      	beq.n	800233c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002268:	4b53      	ldr	r3, [pc, #332]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002274:	4b50      	ldr	r3, [pc, #320]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0ad      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002284:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a4b      	ldr	r2, [pc, #300]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002290:	f7ff f996 	bl	80015c0 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff f992 	bl	80015c0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e09a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022aa:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b6:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <HAL_RCC_OscConfig+0x784>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022c6:	3a01      	subs	r2, #1
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022d0:	0212      	lsls	r2, r2, #8
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022d8:	0852      	lsrs	r2, r2, #1
 80022da:	3a01      	subs	r2, #1
 80022dc:	0552      	lsls	r2, r2, #21
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022e4:	0852      	lsrs	r2, r2, #1
 80022e6:	3a01      	subs	r2, #1
 80022e8:	0652      	lsls	r2, r2, #25
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022f0:	0912      	lsrs	r2, r2, #4
 80022f2:	0452      	lsls	r2, r2, #17
 80022f4:	430a      	orrs	r2, r1
 80022f6:	4930      	ldr	r1, [pc, #192]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022fc:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a2a      	ldr	r2, [pc, #168]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7ff f954 	bl	80015c0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f950 	bl	80015c0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e058      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	e050      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e04f      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d148      	bne.n	80023de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800234c:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7ff f92c 	bl	80015c0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff f928 	bl	80015c0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e030      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x734>
 800238a:	e028      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d023      	beq.n	80023da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff f90f 	bl	80015c0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	e00c      	b.n	80023c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f90b 	bl	80015c0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d905      	bls.n	80023c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ec      	bne.n	80023a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4905      	ldr	r1, [pc, #20]	@ (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_RCC_OscConfig+0x7b4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
 80023d8:	e001      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	feeefffc 	.word	0xfeeefffc

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0e7      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b72      	ldr	r3, [pc, #456]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4970      	ldr	r1, [pc, #448]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b6e      	ldr	r3, [pc, #440]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cf      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800244c:	429a      	cmp	r2, r3
 800244e:	d908      	bls.n	8002462 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4960      	ldr	r1, [pc, #384]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d04c      	beq.n	8002508 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	4b5a      	ldr	r3, [pc, #360]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0a6      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e09a      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a6:	4b4e      	ldr	r3, [pc, #312]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08e      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b6:	4b4a      	ldr	r3, [pc, #296]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e086      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b46      	ldr	r3, [pc, #280]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4943      	ldr	r1, [pc, #268]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7ff f872 	bl	80015c0 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7ff f86e 	bl	80015c0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e06e      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002520:	429a      	cmp	r2, r3
 8002522:	d208      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	492b      	ldr	r1, [pc, #172]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002536:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d210      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 0207 	bic.w	r2, r3, #7
 800254c:	4923      	ldr	r1, [pc, #140]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002554:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e036      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002572:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4918      	ldr	r1, [pc, #96]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4910      	ldr	r1, [pc, #64]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a4:	f000 f824 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	490b      	ldr	r1, [pc, #44]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f4>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80025c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_RCC_ClockConfig+0x1fc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe ffa9 	bl	8001520 <HAL_InitTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025d2:	7afb      	ldrb	r3, [r7, #11]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08005050 	.word	0x08005050
 80025e8:	20000004 	.word	0x20000004
 80025ec:	20000008 	.word	0x20000008

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b3e      	ldr	r3, [pc, #248]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x34>
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d121      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d11e      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002624:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e005      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800264c:	4a2b      	ldr	r2, [pc, #172]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d102      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e004      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d101      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002674:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 8002676:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d134      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0xa6>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d003      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0xac>
 8002694:	e005      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002696:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	e005      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800269c:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 800269e:	617b      	str	r3, [r7, #20]
      break;
 80026a0:	e002      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	3301      	adds	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	fb03 f202 	mul.w	r2, r3, r2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	0e5b      	lsrs	r3, r3, #25
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	3301      	adds	r3, #1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e8:	69bb      	ldr	r3, [r7, #24]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08005068 	.word	0x08005068
 8002700:	00f42400 	.word	0x00f42400

08002704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08005060 	.word	0x08005060

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800274c:	f7ff ffda 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	@ (8002770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08005060 	.word	0x08005060

08002774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002780:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800278c:	f7ff f9f0 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 8002790:	6178      	str	r0, [r7, #20]
 8002792:	e014      	b.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4a24      	ldr	r2, [pc, #144]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	@ 0x58
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027ac:	f7ff f9e0 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 80027b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027c4:	d10b      	bne.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d919      	bls.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80027d0:	d902      	bls.n	80027d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d2:	2302      	movs	r3, #2
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	e013      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d8:	2301      	movs	r3, #1
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	e010      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b80      	cmp	r3, #128	@ 0x80
 80027e2:	d902      	bls.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027e4:	2303      	movs	r3, #3
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e00a      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b80      	cmp	r3, #128	@ 0x80
 80027ee:	d102      	bne.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f0:	2302      	movs	r3, #2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e004      	b.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b70      	cmp	r3, #112	@ 0x70
 80027fa:	d101      	bne.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 0207 	bic.w	r2, r3, #7
 8002808:	4909      	ldr	r1, [pc, #36]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800283c:	2300      	movs	r3, #0
 800283e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002840:	2300      	movs	r3, #0
 8002842:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284c:	2b00      	cmp	r3, #0
 800284e:	d041      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002854:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002858:	d02a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800285a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800285e:	d824      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002866:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800286a:	d81e      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002874:	d010      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002876:	e018      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002878:	4b86      	ldr	r3, [pc, #536]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a85      	ldr	r2, [pc, #532]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002882:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002884:	e015      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fa8b 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002896:	e00c      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3320      	adds	r3, #32
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fb76 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a8:	e003      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	74fb      	strb	r3, [r7, #19]
      break;
 80028ae:	e000      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b8:	4b76      	ldr	r3, [pc, #472]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028c6:	4973      	ldr	r1, [pc, #460]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028ce:	e001      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d041      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028e8:	d02a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ee:	d824      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028fa:	d81e      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002904:	d010      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002906:	e018      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002908:	4b62      	ldr	r3, [pc, #392]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4a61      	ldr	r2, [pc, #388]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002912:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002914:	e015      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fa43 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002926:	e00c      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3320      	adds	r3, #32
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fb2e 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002938:	e003      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	74fb      	strb	r3, [r7, #19]
      break;
 800293e:	e000      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002948:	4b52      	ldr	r3, [pc, #328]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002956:	494f      	ldr	r1, [pc, #316]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800295e:	e001      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a0 	beq.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002976:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	4a40      	ldr	r2, [pc, #256]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002996:	6593      	str	r3, [r2, #88]	@ 0x58
 8002998:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fe04 	bl	80015c0 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ba:	e009      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029bc:	f7fe fe00 	bl	80015c0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d902      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	74fb      	strb	r3, [r7, #19]
        break;
 80029ce:	e005      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029d0:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ef      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d15c      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d019      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a0c:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a2c:	4a19      	ldr	r2, [pc, #100]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fdbf 	bl	80015c0 <HAL_GetTick>
 8002a42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	e00b      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fdbb 	bl	80015c0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d902      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ec      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a82:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a8a:	e009      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa0:	7c7b      	ldrb	r3, [r7, #17]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4ba1      	ldr	r3, [pc, #644]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	4aa0      	ldr	r2, [pc, #640]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abe:	4b9b      	ldr	r3, [pc, #620]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac4:	f023 0203 	bic.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	4997      	ldr	r1, [pc, #604]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae0:	4b92      	ldr	r3, [pc, #584]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae6:	f023 020c 	bic.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	498f      	ldr	r1, [pc, #572]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b02:	4b8a      	ldr	r3, [pc, #552]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4986      	ldr	r1, [pc, #536]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b24:	4b81      	ldr	r3, [pc, #516]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	497e      	ldr	r1, [pc, #504]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b46:	4b79      	ldr	r3, [pc, #484]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	4975      	ldr	r1, [pc, #468]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b68:	4b70      	ldr	r3, [pc, #448]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	496d      	ldr	r1, [pc, #436]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b8a:	4b68      	ldr	r3, [pc, #416]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	4964      	ldr	r1, [pc, #400]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bac:	4b5f      	ldr	r3, [pc, #380]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bba:	495c      	ldr	r1, [pc, #368]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bce:	4b57      	ldr	r3, [pc, #348]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bdc:	4953      	ldr	r1, [pc, #332]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	494b      	ldr	r1, [pc, #300]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c12:	4b46      	ldr	r3, [pc, #280]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	4942      	ldr	r1, [pc, #264]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d028      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c34:	4b3d      	ldr	r3, [pc, #244]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c42:	493a      	ldr	r1, [pc, #232]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c54:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c5e:	60d3      	str	r3, [r2, #12]
 8002c60:	e011      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f898 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	4922      	ldr	r1, [pc, #136]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cbc:	60d3      	str	r3, [r2, #12]
 8002cbe:	e011      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f869 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d031      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfe:	490b      	ldr	r1, [pc, #44]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d0e:	d10f      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f846 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	74bb      	strb	r3, [r7, #18]
 8002d2a:	e013      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002d2c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f925 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d60:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d6e:	490d      	ldr	r1, [pc, #52]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db6:	4b75      	ldr	r3, [pc, #468]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dc2:	4b72      	ldr	r3, [pc, #456]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dda:	4b6c      	ldr	r3, [pc, #432]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d047      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e044      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d018      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0x86>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d825      	bhi.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <RCCEx_PLLSAI1_Config+0x62>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d009      	beq.n	8002e1c <RCCEx_PLLSAI1_Config+0x74>
 8002e08:	e020      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e0a:	4b60      	ldr	r3, [pc, #384]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11d      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1a:	e01a      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e013      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2e:	4b57      	ldr	r3, [pc, #348]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e3a:	4b54      	ldr	r3, [pc, #336]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e4a:	e006      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e004      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	430b      	orrs	r3, r1
 8002e78:	4944      	ldr	r1, [pc, #272]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d17d      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e84:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a40      	ldr	r2, [pc, #256]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fb96 	bl	80015c0 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e96:	e009      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e98:	f7fe fb92 	bl	80015c0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e005      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eac:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ef      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d160      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	0912      	lsrs	r2, r2, #4
 8002edc:	0452      	lsls	r2, r2, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	492a      	ldr	r1, [pc, #168]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]
 8002ee6:	e027      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d112      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eee:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0552      	lsls	r2, r2, #21
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	491f      	ldr	r1, [pc, #124]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]
 8002f12:	e011      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f14:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	0211      	lsls	r1, r2, #8
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6952      	ldr	r2, [r2, #20]
 8002f2a:	0852      	lsrs	r2, r2, #1
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	0652      	lsls	r2, r2, #25
 8002f30:	430a      	orrs	r2, r1
 8002f32:	4916      	ldr	r1, [pc, #88]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f38:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fb3c 	bl	80015c0 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f4a:	e009      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4c:	f7fe fb38 	bl	80015c0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f5e:	e005      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ef      	beq.n	8002f4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	4904      	ldr	r1, [pc, #16]	@ (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002faa:	4b67      	ldr	r3, [pc, #412]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fc2:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d047      	beq.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e044      	b.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d018      	beq.n	8003016 <RCCEx_PLLSAI2_Config+0x86>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d825      	bhi.n	8003034 <RCCEx_PLLSAI2_Config+0xa4>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <RCCEx_PLLSAI2_Config+0x62>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d009      	beq.n	8003004 <RCCEx_PLLSAI2_Config+0x74>
 8002ff0:	e020      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff2:	4b55      	ldr	r3, [pc, #340]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e01a      	b.n	800303a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003004:	4b50      	ldr	r3, [pc, #320]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e013      	b.n	800303e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003016:	4b4c      	ldr	r3, [pc, #304]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003022:	4b49      	ldr	r3, [pc, #292]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003032:	e006      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e004      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003042:	bf00      	nop
    }

    if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800304a:	4b3f      	ldr	r3, [pc, #252]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	430b      	orrs	r3, r1
 8003060:	4939      	ldr	r1, [pc, #228]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d167      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800306c:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a35      	ldr	r2, [pc, #212]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe faa2 	bl	80015c0 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800307e:	e009      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003080:	f7fe fa9e 	bl	80015c0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	73fb      	strb	r3, [r7, #15]
        break;
 8003092:	e005      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003094:	4b2c      	ldr	r3, [pc, #176]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ef      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d14a      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030ac:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	0211      	lsls	r1, r2, #8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	0912      	lsrs	r2, r2, #4
 80030c4:	0452      	lsls	r2, r2, #17
 80030c6:	430a      	orrs	r2, r1
 80030c8:	491f      	ldr	r1, [pc, #124]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	614b      	str	r3, [r1, #20]
 80030ce:	e011      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6892      	ldr	r2, [r2, #8]
 80030e0:	0211      	lsls	r1, r2, #8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6912      	ldr	r2, [r2, #16]
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0652      	lsls	r2, r2, #25
 80030ec:	430a      	orrs	r2, r1
 80030ee:	4916      	ldr	r1, [pc, #88]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fa5e 	bl	80015c0 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003106:	e009      	b.n	800311c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003108:	f7fe fa5a 	bl	80015c0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	73fb      	strb	r3, [r7, #15]
          break;
 800311a:	e005      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4904      	ldr	r1, [pc, #16]	@ (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e095      	b.n	800328a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316e:	d009      	beq.n	8003184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
 8003176:	e005      	b.n	8003184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fbce 	bl	8000940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031c4:	d902      	bls.n	80031cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e002      	b.n	80031d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031da:	d007      	beq.n	80031ec <HAL_SPI_Init+0xa0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	ea42 0103 	orr.w	r1, r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	f003 0204 	and.w	r2, r3, #4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003268:	ea42 0103 	orr.w	r1, r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b088      	sub	sp, #32
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a2:	f7fe f98d 	bl	80015c0 <HAL_GetTick>
 80032a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
 80032ba:	e15c      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0x36>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e154      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_SPI_Transmit+0x48>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e14d      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332c:	d10f      	bne.n	800334e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800334c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d007      	beq.n	800336c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800336a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003374:	d952      	bls.n	800341c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Transmit+0xf2>
 800337e:	8b7b      	ldrh	r3, [r7, #26]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d145      	bne.n	8003410 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033a8:	e032      	b.n	8003410 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d112      	bne.n	80033de <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033dc:	e018      	b.n	8003410 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033de:	f7fe f8ef 	bl	80015c0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d803      	bhi.n	80033f6 <HAL_SPI_Transmit+0x164>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Transmit+0x16a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0b2      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1c7      	bne.n	80033aa <HAL_SPI_Transmit+0x118>
 800341a:	e083      	b.n	8003524 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Transmit+0x198>
 8003424:	8b7b      	ldrh	r3, [r7, #26]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d177      	bne.n	800351a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d912      	bls.n	800345a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	1c9a      	adds	r2, r3, #2
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b02      	subs	r3, #2
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003458:	e05f      	b.n	800351a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003480:	e04b      	b.n	800351a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d12b      	bne.n	80034e8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d912      	bls.n	80034c0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b02      	subs	r3, #2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034be:	e02c      	b.n	800351a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e6:	e018      	b.n	800351a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e8:	f7fe f86a 	bl	80015c0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d803      	bhi.n	8003500 <HAL_SPI_Transmit+0x26e>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_Transmit+0x274>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e02d      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ae      	bne.n	8003482 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f947 	bl	80037bc <SPI_EndRxTxTransaction>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003574:	2300      	movs	r3, #0
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003590:	f7fe f816 	bl	80015c0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035a0:	f7fe f80e 	bl	80015c0 <HAL_GetTick>
 80035a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035a6:	4b39      	ldr	r3, [pc, #228]	@ (800368c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	0d1b      	lsrs	r3, r3, #20
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b6:	e054      	b.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d050      	beq.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c0:	f7fd fffe 	bl	80015c0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d902      	bls.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d13d      	bne.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ee:	d111      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f8:	d004      	beq.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d107      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361c:	d10f      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e017      	b.n	8003682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3b01      	subs	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d19b      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000004 	.word	0x20000004

08003690 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036a2:	f7fd ff8d 	bl	80015c0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036b2:	f7fd ff85 	bl	80015c0 <HAL_GetTick>
 80036b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036c0:	4b3d      	ldr	r3, [pc, #244]	@ (80037b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00da      	lsls	r2, r3, #3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	0d1b      	lsrs	r3, r3, #20
 80036d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036d8:	e060      	b.n	800379c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036e0:	d107      	bne.n	80036f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d050      	beq.n	800379c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fa:	f7fd ff61 	bl	80015c0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003706:	429a      	cmp	r2, r3
 8003708:	d902      	bls.n	8003710 <SPI_WaitFifoStateUntilTimeout+0x80>
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13d      	bne.n	800378c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800371e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003728:	d111      	bne.n	800374e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003732:	d004      	beq.n	800373e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373c:	d107      	bne.n	800374e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003756:	d10f      	bne.n	8003778 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003776:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e010      	b.n	80037ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3b01      	subs	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d196      	bne.n	80036da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3728      	adds	r7, #40	@ 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004

080037bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff ff5b 	bl	8003690 <SPI_WaitFifoStateUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e027      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2180      	movs	r1, #128	@ 0x80
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fec0 	bl	8003580 <SPI_WaitFlagStateUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e014      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff ff34 	bl	8003690 <SPI_WaitFifoStateUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e000      	b.n	8003840 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e049      	b.n	80038ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fa6a 	bl	8000d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fa50 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start+0x24>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e03c      	b.n	8003996 <HAL_TIM_PWM_Start+0x9e>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d109      	bne.n	8003936 <HAL_TIM_PWM_Start+0x3e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e02f      	b.n	8003996 <HAL_TIM_PWM_Start+0x9e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x58>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e022      	b.n	8003996 <HAL_TIM_PWM_Start+0x9e>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d109      	bne.n	800396a <HAL_TIM_PWM_Start+0x72>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e015      	b.n	8003996 <HAL_TIM_PWM_Start+0x9e>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b10      	cmp	r3, #16
 800396e:	d109      	bne.n	8003984 <HAL_TIM_PWM_Start+0x8c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e008      	b.n	8003996 <HAL_TIM_PWM_Start+0x9e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e09c      	b.n	8003ad8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0xb6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ac:	e023      	b.n	80039f6 <HAL_TIM_PWM_Start+0xfe>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0xc6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039bc:	e01b      	b.n	80039f6 <HAL_TIM_PWM_Start+0xfe>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0xd6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039cc:	e013      	b.n	80039f6 <HAL_TIM_PWM_Start+0xfe>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0xe6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039dc:	e00b      	b.n	80039f6 <HAL_TIM_PWM_Start+0xfe>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0xf6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ec:	e003      	b.n	80039f6 <HAL_TIM_PWM_Start+0xfe>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2201      	movs	r2, #1
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd10 	bl	8004424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <HAL_TIM_PWM_Start+0x1e8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x13e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a34      	ldr	r2, [pc, #208]	@ (8003ae4 <HAL_TIM_PWM_Start+0x1ec>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x13e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ae8 <HAL_TIM_PWM_Start+0x1f0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x13e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a31      	ldr	r2, [pc, #196]	@ (8003aec <HAL_TIM_PWM_Start+0x1f4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x13e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <HAL_TIM_PWM_Start+0x1f8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_PWM_Start+0x142>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_PWM_Start+0x144>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <HAL_TIM_PWM_Start+0x1e8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01d      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d018      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a22      	ldr	r2, [pc, #136]	@ (8003af4 <HAL_TIM_PWM_Start+0x1fc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a21      	ldr	r2, [pc, #132]	@ (8003af8 <HAL_TIM_PWM_Start+0x200>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <HAL_TIM_PWM_Start+0x204>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a17      	ldr	r2, [pc, #92]	@ (8003ae4 <HAL_TIM_PWM_Start+0x1ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x19e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a15      	ldr	r2, [pc, #84]	@ (8003ae8 <HAL_TIM_PWM_Start+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d115      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <HAL_TIM_PWM_Start+0x208>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d015      	beq.n	8003ad4 <HAL_TIM_PWM_Start+0x1dc>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aae:	d011      	beq.n	8003ad4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	e008      	b.n	8003ad4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40013400 	.word	0x40013400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	00010007 	.word	0x00010007

08003b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ff      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b14      	cmp	r3, #20
 8003b2e:	f200 80f0 	bhi.w	8003d12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003d13 	.word	0x08003d13
 8003b40:	08003d13 	.word	0x08003d13
 8003b44:	08003d13 	.word	0x08003d13
 8003b48:	08003bcd 	.word	0x08003bcd
 8003b4c:	08003d13 	.word	0x08003d13
 8003b50:	08003d13 	.word	0x08003d13
 8003b54:	08003d13 	.word	0x08003d13
 8003b58:	08003c0f 	.word	0x08003c0f
 8003b5c:	08003d13 	.word	0x08003d13
 8003b60:	08003d13 	.word	0x08003d13
 8003b64:	08003d13 	.word	0x08003d13
 8003b68:	08003c4f 	.word	0x08003c4f
 8003b6c:	08003d13 	.word	0x08003d13
 8003b70:	08003d13 	.word	0x08003d13
 8003b74:	08003d13 	.word	0x08003d13
 8003b78:	08003c91 	.word	0x08003c91
 8003b7c:	08003d13 	.word	0x08003d13
 8003b80:	08003d13 	.word	0x08003d13
 8003b84:	08003d13 	.word	0x08003d13
 8003b88:	08003cd1 	.word	0x08003cd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f970 	bl	8003e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0208 	orr.w	r2, r2, #8
 8003ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	619a      	str	r2, [r3, #24]
      break;
 8003bca:	e0a5      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f9e0 	bl	8003f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6999      	ldr	r1, [r3, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	619a      	str	r2, [r3, #24]
      break;
 8003c0c:	e084      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fa49 	bl	80040ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0208 	orr.w	r2, r2, #8
 8003c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0204 	bic.w	r2, r2, #4
 8003c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	61da      	str	r2, [r3, #28]
      break;
 8003c4c:	e064      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fab1 	bl	80041bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69d9      	ldr	r1, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	021a      	lsls	r2, r3, #8
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	61da      	str	r2, [r3, #28]
      break;
 8003c8e:	e043      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fafa 	bl	8004290 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0208 	orr.w	r2, r2, #8
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003cce:	e023      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fb3e 	bl	8004358 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d10:	e002      	b.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
      break;
 8003d16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a46      	ldr	r2, [pc, #280]	@ (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d00f      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a43      	ldr	r2, [pc, #268]	@ (8003e5c <TIM_Base_SetConfig+0x130>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a42      	ldr	r2, [pc, #264]	@ (8003e60 <TIM_Base_SetConfig+0x134>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a41      	ldr	r2, [pc, #260]	@ (8003e64 <TIM_Base_SetConfig+0x138>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a40      	ldr	r2, [pc, #256]	@ (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a35      	ldr	r2, [pc, #212]	@ (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a32      	ldr	r2, [pc, #200]	@ (8003e5c <TIM_Base_SetConfig+0x130>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a31      	ldr	r2, [pc, #196]	@ (8003e60 <TIM_Base_SetConfig+0x134>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a30      	ldr	r2, [pc, #192]	@ (8003e64 <TIM_Base_SetConfig+0x138>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e6c <TIM_Base_SetConfig+0x140>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e70 <TIM_Base_SetConfig+0x144>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x9a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e74 <TIM_Base_SetConfig+0x148>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	@ (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <TIM_Base_SetConfig+0x140>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a16      	ldr	r2, [pc, #88]	@ (8003e70 <TIM_Base_SetConfig+0x144>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a15      	ldr	r2, [pc, #84]	@ (8003e74 <TIM_Base_SetConfig+0x148>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40013400 	.word	0x40013400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800

08003e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 0201 	bic.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0302 	bic.w	r3, r3, #2
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f84 <TIM_OC1_SetConfig+0x10c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_OC1_SetConfig+0x80>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2b      	ldr	r2, [pc, #172]	@ (8003f88 <TIM_OC1_SetConfig+0x110>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_OC1_SetConfig+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f8c <TIM_OC1_SetConfig+0x114>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_OC1_SetConfig+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a29      	ldr	r2, [pc, #164]	@ (8003f90 <TIM_OC1_SetConfig+0x118>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC1_SetConfig+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a28      	ldr	r2, [pc, #160]	@ (8003f94 <TIM_OC1_SetConfig+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10c      	bne.n	8003f12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0308 	bic.w	r3, r3, #8
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <TIM_OC1_SetConfig+0x10c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_OC1_SetConfig+0xc2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f88 <TIM_OC1_SetConfig+0x110>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_OC1_SetConfig+0xc2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <TIM_OC1_SetConfig+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_OC1_SetConfig+0xc2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	@ (8003f90 <TIM_OC1_SetConfig+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_OC1_SetConfig+0xc2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <TIM_OC1_SetConfig+0x11c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0210 	bic.w	r2, r3, #16
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0320 	bic.w	r3, r3, #32
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a28      	ldr	r2, [pc, #160]	@ (8004098 <TIM_OC2_SetConfig+0x100>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC2_SetConfig+0x6c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a27      	ldr	r2, [pc, #156]	@ (800409c <TIM_OC2_SetConfig+0x104>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10d      	bne.n	8004020 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800401e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <TIM_OC2_SetConfig+0x100>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00f      	beq.n	8004048 <TIM_OC2_SetConfig+0xb0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <TIM_OC2_SetConfig+0x104>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00b      	beq.n	8004048 <TIM_OC2_SetConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <TIM_OC2_SetConfig+0x108>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_OC2_SetConfig+0xb0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1a      	ldr	r2, [pc, #104]	@ (80040a4 <TIM_OC2_SetConfig+0x10c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_OC2_SetConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <TIM_OC2_SetConfig+0x110>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d113      	bne.n	8004070 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800404e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40013400 	.word	0x40013400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40014400 	.word	0x40014400
 80040a8:	40014800 	.word	0x40014800

080040ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <TIM_OC3_SetConfig+0xfc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_OC3_SetConfig+0x6a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a26      	ldr	r2, [pc, #152]	@ (80041ac <TIM_OC3_SetConfig+0x100>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10d      	bne.n	8004132 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800411c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <TIM_OC3_SetConfig+0xfc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_OC3_SetConfig+0xae>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <TIM_OC3_SetConfig+0x100>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_OC3_SetConfig+0xae>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <TIM_OC3_SetConfig+0x104>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_OC3_SetConfig+0xae>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <TIM_OC3_SetConfig+0x108>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_OC3_SetConfig+0xae>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <TIM_OC3_SetConfig+0x10c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d113      	bne.n	8004182 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800420a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	@ (800427c <TIM_OC4_SetConfig+0xc0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_OC4_SetConfig+0x84>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <TIM_OC4_SetConfig+0xc4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_OC4_SetConfig+0x84>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a16      	ldr	r2, [pc, #88]	@ (8004284 <TIM_OC4_SetConfig+0xc8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_OC4_SetConfig+0x84>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a15      	ldr	r2, [pc, #84]	@ (8004288 <TIM_OC4_SetConfig+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC4_SetConfig+0x84>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a14      	ldr	r2, [pc, #80]	@ (800428c <TIM_OC4_SetConfig+0xd0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d109      	bne.n	8004254 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40013400 	.word	0x40013400
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800

08004290 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a17      	ldr	r2, [pc, #92]	@ (8004344 <TIM_OC5_SetConfig+0xb4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00f      	beq.n	800430a <TIM_OC5_SetConfig+0x7a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a16      	ldr	r2, [pc, #88]	@ (8004348 <TIM_OC5_SetConfig+0xb8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_OC5_SetConfig+0x7a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <TIM_OC5_SetConfig+0xbc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_OC5_SetConfig+0x7a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <TIM_OC5_SetConfig+0xc0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC5_SetConfig+0x7a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a13      	ldr	r2, [pc, #76]	@ (8004354 <TIM_OC5_SetConfig+0xc4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d109      	bne.n	800431e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004310:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800439e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	051b      	lsls	r3, r3, #20
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <TIM_OC6_SetConfig+0xb8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00f      	beq.n	80043d4 <TIM_OC6_SetConfig+0x7c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a17      	ldr	r2, [pc, #92]	@ (8004414 <TIM_OC6_SetConfig+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_OC6_SetConfig+0x7c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <TIM_OC6_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_OC6_SetConfig+0x7c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <TIM_OC6_SetConfig+0xc4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC6_SetConfig+0x7c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a14      	ldr	r2, [pc, #80]	@ (8004420 <TIM_OC6_SetConfig+0xc8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d109      	bne.n	80043e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40013400 	.word	0x40013400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2201      	movs	r2, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004484:	2302      	movs	r3, #2
 8004486:	e068      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a18      	ldr	r2, [pc, #96]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a13      	ldr	r2, [pc, #76]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a14      	ldr	r2, [pc, #80]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40013400 	.word	0x40013400
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40014000 	.word	0x40014000

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e040      	b.n	8004614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fcc8 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	@ 0x24
 80045ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fae0 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f825 	bl	800461c <UART_SetConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e01b      	b.n	8004614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb5f 	bl	8004cd0 <UART_CheckIdleState>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800461c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004620:	b08a      	sub	sp, #40	@ 0x28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	431a      	orrs	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4313      	orrs	r3, r2
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4ba4      	ldr	r3, [pc, #656]	@ (80048dc <UART_SetConfig+0x2c0>)
 800464c:	4013      	ands	r3, r2
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004654:	430b      	orrs	r3, r1
 8004656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a99      	ldr	r2, [pc, #612]	@ (80048e0 <UART_SetConfig+0x2c4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	4313      	orrs	r3, r2
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a90      	ldr	r2, [pc, #576]	@ (80048e4 <UART_SetConfig+0x2c8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d126      	bne.n	80046f4 <UART_SetConfig+0xd8>
 80046a6:	4b90      	ldr	r3, [pc, #576]	@ (80048e8 <UART_SetConfig+0x2cc>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d81b      	bhi.n	80046ec <UART_SetConfig+0xd0>
 80046b4:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <UART_SetConfig+0xa0>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046dd 	.word	0x080046dd
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e116      	b.n	8004902 <UART_SetConfig+0x2e6>
 80046d4:	2302      	movs	r3, #2
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e112      	b.n	8004902 <UART_SetConfig+0x2e6>
 80046dc:	2304      	movs	r3, #4
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e10e      	b.n	8004902 <UART_SetConfig+0x2e6>
 80046e4:	2308      	movs	r3, #8
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e10a      	b.n	8004902 <UART_SetConfig+0x2e6>
 80046ec:	2310      	movs	r3, #16
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e106      	b.n	8004902 <UART_SetConfig+0x2e6>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a7c      	ldr	r2, [pc, #496]	@ (80048ec <UART_SetConfig+0x2d0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d138      	bne.n	8004770 <UART_SetConfig+0x154>
 80046fe:	4b7a      	ldr	r3, [pc, #488]	@ (80048e8 <UART_SetConfig+0x2cc>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d82d      	bhi.n	8004768 <UART_SetConfig+0x14c>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <UART_SetConfig+0xf8>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004749 	.word	0x08004749
 8004718:	08004769 	.word	0x08004769
 800471c:	08004769 	.word	0x08004769
 8004720:	08004769 	.word	0x08004769
 8004724:	08004759 	.word	0x08004759
 8004728:	08004769 	.word	0x08004769
 800472c:	08004769 	.word	0x08004769
 8004730:	08004769 	.word	0x08004769
 8004734:	08004751 	.word	0x08004751
 8004738:	08004769 	.word	0x08004769
 800473c:	08004769 	.word	0x08004769
 8004740:	08004769 	.word	0x08004769
 8004744:	08004761 	.word	0x08004761
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e0d8      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e0d4      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e0d0      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e0cc      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e0c8      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a5e      	ldr	r2, [pc, #376]	@ (80048f0 <UART_SetConfig+0x2d4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d125      	bne.n	80047c6 <UART_SetConfig+0x1aa>
 800477a:	4b5b      	ldr	r3, [pc, #364]	@ (80048e8 <UART_SetConfig+0x2cc>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004784:	2b30      	cmp	r3, #48	@ 0x30
 8004786:	d016      	beq.n	80047b6 <UART_SetConfig+0x19a>
 8004788:	2b30      	cmp	r3, #48	@ 0x30
 800478a:	d818      	bhi.n	80047be <UART_SetConfig+0x1a2>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d00a      	beq.n	80047a6 <UART_SetConfig+0x18a>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d814      	bhi.n	80047be <UART_SetConfig+0x1a2>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <UART_SetConfig+0x182>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d008      	beq.n	80047ae <UART_SetConfig+0x192>
 800479c:	e00f      	b.n	80047be <UART_SetConfig+0x1a2>
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a4:	e0ad      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047a6:	2302      	movs	r3, #2
 80047a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ac:	e0a9      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047ae:	2304      	movs	r3, #4
 80047b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b4:	e0a5      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047b6:	2308      	movs	r3, #8
 80047b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047bc:	e0a1      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047be:	2310      	movs	r3, #16
 80047c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c4:	e09d      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a4a      	ldr	r2, [pc, #296]	@ (80048f4 <UART_SetConfig+0x2d8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d125      	bne.n	800481c <UART_SetConfig+0x200>
 80047d0:	4b45      	ldr	r3, [pc, #276]	@ (80048e8 <UART_SetConfig+0x2cc>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047da:	2bc0      	cmp	r3, #192	@ 0xc0
 80047dc:	d016      	beq.n	800480c <UART_SetConfig+0x1f0>
 80047de:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e0:	d818      	bhi.n	8004814 <UART_SetConfig+0x1f8>
 80047e2:	2b80      	cmp	r3, #128	@ 0x80
 80047e4:	d00a      	beq.n	80047fc <UART_SetConfig+0x1e0>
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d814      	bhi.n	8004814 <UART_SetConfig+0x1f8>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <UART_SetConfig+0x1d8>
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	d008      	beq.n	8004804 <UART_SetConfig+0x1e8>
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x1f8>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e082      	b.n	8004902 <UART_SetConfig+0x2e6>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004802:	e07e      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004804:	2304      	movs	r3, #4
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e07a      	b.n	8004902 <UART_SetConfig+0x2e6>
 800480c:	2308      	movs	r3, #8
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e076      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004814:	2310      	movs	r3, #16
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e072      	b.n	8004902 <UART_SetConfig+0x2e6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a35      	ldr	r2, [pc, #212]	@ (80048f8 <UART_SetConfig+0x2dc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d12a      	bne.n	800487c <UART_SetConfig+0x260>
 8004826:	4b30      	ldr	r3, [pc, #192]	@ (80048e8 <UART_SetConfig+0x2cc>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004834:	d01a      	beq.n	800486c <UART_SetConfig+0x250>
 8004836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483a:	d81b      	bhi.n	8004874 <UART_SetConfig+0x258>
 800483c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004840:	d00c      	beq.n	800485c <UART_SetConfig+0x240>
 8004842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004846:	d815      	bhi.n	8004874 <UART_SetConfig+0x258>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <UART_SetConfig+0x238>
 800484c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x248>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x258>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e052      	b.n	8004902 <UART_SetConfig+0x2e6>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e04e      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e04a      	b.n	8004902 <UART_SetConfig+0x2e6>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004872:	e046      	b.n	8004902 <UART_SetConfig+0x2e6>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e042      	b.n	8004902 <UART_SetConfig+0x2e6>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a17      	ldr	r2, [pc, #92]	@ (80048e0 <UART_SetConfig+0x2c4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d13a      	bne.n	80048fc <UART_SetConfig+0x2e0>
 8004886:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <UART_SetConfig+0x2cc>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004890:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004894:	d01a      	beq.n	80048cc <UART_SetConfig+0x2b0>
 8004896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800489a:	d81b      	bhi.n	80048d4 <UART_SetConfig+0x2b8>
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a0:	d00c      	beq.n	80048bc <UART_SetConfig+0x2a0>
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a6:	d815      	bhi.n	80048d4 <UART_SetConfig+0x2b8>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x298>
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b0:	d008      	beq.n	80048c4 <UART_SetConfig+0x2a8>
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x2b8>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ba:	e022      	b.n	8004902 <UART_SetConfig+0x2e6>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c2:	e01e      	b.n	8004902 <UART_SetConfig+0x2e6>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e01a      	b.n	8004902 <UART_SetConfig+0x2e6>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e016      	b.n	8004902 <UART_SetConfig+0x2e6>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048da:	e012      	b.n	8004902 <UART_SetConfig+0x2e6>
 80048dc:	efff69f3 	.word	0xefff69f3
 80048e0:	40008000 	.word	0x40008000
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40004400 	.word	0x40004400
 80048f0:	40004800 	.word	0x40004800
 80048f4:	40004c00 	.word	0x40004c00
 80048f8:	40005000 	.word	0x40005000
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a9f      	ldr	r2, [pc, #636]	@ (8004b84 <UART_SetConfig+0x568>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d17a      	bne.n	8004a02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800490c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004910:	2b08      	cmp	r3, #8
 8004912:	d824      	bhi.n	800495e <UART_SetConfig+0x342>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x300>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	0800495f 	.word	0x0800495f
 8004924:	08004949 	.word	0x08004949
 8004928:	0800495f 	.word	0x0800495f
 800492c:	0800494f 	.word	0x0800494f
 8004930:	0800495f 	.word	0x0800495f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800495f 	.word	0x0800495f
 800493c:	08004957 	.word	0x08004957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fd feec 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004944:	61f8      	str	r0, [r7, #28]
        break;
 8004946:	e010      	b.n	800496a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004948:	4b8f      	ldr	r3, [pc, #572]	@ (8004b88 <UART_SetConfig+0x56c>)
 800494a:	61fb      	str	r3, [r7, #28]
        break;
 800494c:	e00d      	b.n	800496a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494e:	f7fd fe4f 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8004952:	61f8      	str	r0, [r7, #28]
        break;
 8004954:	e009      	b.n	800496a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800495a:	61fb      	str	r3, [r7, #28]
        break;
 800495c:	e005      	b.n	800496a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80fb 	beq.w	8004b68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	429a      	cmp	r2, r3
 8004980:	d305      	bcc.n	800498e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	429a      	cmp	r2, r3
 800498c:	d903      	bls.n	8004996 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004994:	e0e8      	b.n	8004b68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2200      	movs	r2, #0
 800499a:	461c      	mov	r4, r3
 800499c:	4615      	mov	r5, r2
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	022b      	lsls	r3, r5, #8
 80049a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049ac:	0222      	lsls	r2, r4, #8
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	6849      	ldr	r1, [r1, #4]
 80049b2:	0849      	lsrs	r1, r1, #1
 80049b4:	2000      	movs	r0, #0
 80049b6:	4688      	mov	r8, r1
 80049b8:	4681      	mov	r9, r0
 80049ba:	eb12 0a08 	adds.w	sl, r2, r8
 80049be:	eb43 0b09 	adc.w	fp, r3, r9
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d0:	4650      	mov	r0, sl
 80049d2:	4659      	mov	r1, fp
 80049d4:	f7fb fbf8 	bl	80001c8 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e6:	d308      	bcc.n	80049fa <UART_SetConfig+0x3de>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ee:	d204      	bcs.n	80049fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	e0b6      	b.n	8004b68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a00:	e0b2      	b.n	8004b68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0a:	d15e      	bne.n	8004aca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d828      	bhi.n	8004a66 <UART_SetConfig+0x44a>
 8004a14:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0x400>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fd fe6c 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004a44:	61f8      	str	r0, [r7, #28]
        break;
 8004a46:	e014      	b.n	8004a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7fd fe7e 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	61f8      	str	r0, [r7, #28]
        break;
 8004a4e:	e010      	b.n	8004a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b4d      	ldr	r3, [pc, #308]	@ (8004b88 <UART_SetConfig+0x56c>)
 8004a52:	61fb      	str	r3, [r7, #28]
        break;
 8004a54:	e00d      	b.n	8004a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fd fdcb 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8004a5a:	61f8      	str	r0, [r7, #28]
        break;
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a62:	61fb      	str	r3, [r7, #28]
        break;
 8004a64:	e005      	b.n	8004a72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d077      	beq.n	8004b68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	005a      	lsls	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b0f      	cmp	r3, #15
 8004a92:	d916      	bls.n	8004ac2 <UART_SetConfig+0x4a6>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9a:	d212      	bcs.n	8004ac2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	8afa      	ldrh	r2, [r7, #22]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	e052      	b.n	8004b68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ac8:	e04e      	b.n	8004b68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d827      	bhi.n	8004b22 <UART_SetConfig+0x506>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0x4bc>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b23 	.word	0x08004b23
 8004ae8:	08004b13 	.word	0x08004b13
 8004aec:	08004b23 	.word	0x08004b23
 8004af0:	08004b23 	.word	0x08004b23
 8004af4:	08004b23 	.word	0x08004b23
 8004af8:	08004b1b 	.word	0x08004b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fd fe0e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004b00:	61f8      	str	r0, [r7, #28]
        break;
 8004b02:	e014      	b.n	8004b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b04:	f7fd fe20 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8004b08:	61f8      	str	r0, [r7, #28]
        break;
 8004b0a:	e010      	b.n	8004b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <UART_SetConfig+0x56c>)
 8004b0e:	61fb      	str	r3, [r7, #28]
        break;
 8004b10:	e00d      	b.n	8004b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b12:	f7fd fd6d 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8004b16:	61f8      	str	r0, [r7, #28]
        break;
 8004b18:	e009      	b.n	8004b2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b1e:	61fb      	str	r3, [r7, #28]
        break;
 8004b20:	e005      	b.n	8004b2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	085a      	lsrs	r2, r3, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	d909      	bls.n	8004b62 <UART_SetConfig+0x546>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b54:	d205      	bcs.n	8004b62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	e002      	b.n	8004b68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	@ 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	40008000 	.word	0x40008000
 8004b88:	00f42400 	.word	0x00f42400

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b098      	sub	sp, #96	@ 0x60
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce0:	f7fc fc6e 	bl	80015c0 <HAL_GetTick>
 8004ce4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d12e      	bne.n	8004d52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f88c 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d021      	beq.n	8004d52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e062      	b.n	8004e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d149      	bne.n	8004df4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f856 	bl	8004e20 <UART_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d03c      	beq.n	8004df4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	623b      	str	r3, [r7, #32]
   return(result);
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e6      	bne.n	8004d7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3308      	adds	r3, #8
 8004db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dcc:	61fa      	str	r2, [r7, #28]
 8004dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e5      	bne.n	8004dac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e011      	b.n	8004e18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3758      	adds	r7, #88	@ 0x58
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	e04f      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d04b      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3a:	f7fc fbc1 	bl	80015c0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d302      	bcc.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e04e      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d037      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b80      	cmp	r3, #128	@ 0x80
 8004e66:	d034      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b40      	cmp	r3, #64	@ 0x40
 8004e6c:	d031      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d110      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2208      	movs	r2, #8
 8004e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f838 	bl	8004efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e029      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eac:	d111      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f81e 	bl	8004efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00f      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d0a0      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b095      	sub	sp, #84	@ 0x54
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d118      	bne.n	8004fa2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e6      	bne.n	8004f70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fb6:	bf00      	nop
 8004fb8:	3754      	adds	r7, #84	@ 0x54
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <memset>:
 8004fc2:	4402      	add	r2, r0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <memset+0xa>
 8004fca:	4770      	bx	lr
 8004fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd0:	e7f9      	b.n	8004fc6 <memset+0x4>
	...

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8005010 <__libc_init_array+0x3c>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	42a6      	cmp	r6, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 f826 	bl	8005038 <_init>
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffc:	4798      	blx	r3
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f855 3b04 	ldr.w	r3, [r5], #4
 8005006:	4798      	blx	r3
 8005008:	3601      	adds	r6, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08007d1c 	.word	0x08007d1c
 8005010:	08007d1c 	.word	0x08007d1c
 8005014:	08007d1c 	.word	0x08007d1c
 8005018:	08007d20 	.word	0x08007d20

0800501c <memcpy>:
 800501c:	440a      	add	r2, r1
 800501e:	4291      	cmp	r1, r2
 8005020:	f100 33ff 	add.w	r3, r0, #4294967295
 8005024:	d100      	bne.n	8005028 <memcpy+0xc>
 8005026:	4770      	bx	lr
 8005028:	b510      	push	{r4, lr}
 800502a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005032:	4291      	cmp	r1, r2
 8005034:	d1f9      	bne.n	800502a <memcpy+0xe>
 8005036:	bd10      	pop	{r4, pc}

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
