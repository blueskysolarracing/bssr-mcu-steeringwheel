
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cc4  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d20  08007d20  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d28  08007d28  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d28  08007d28  00008d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d2c  08007d2c  00008d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007d30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ea8  20000010  08007d40  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005eb8  08007d40  00009eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012517  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a6  00000000  00000000  0001b557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  0001edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024392  00000000  00000000  0001faef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e8d  00000000  00000000  00043e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e331f  00000000  00000000  00058d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c02d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004674  00000000  00000000  0013c070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001406e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005044 	.word	0x08005044

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005044 	.word	0x08005044

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b53      	ldr	r3, [pc, #332]	@ (8000658 <MX_GPIO_Init+0x164>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a52      	ldr	r2, [pc, #328]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b50      	ldr	r3, [pc, #320]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b4d      	ldr	r3, [pc, #308]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a4c      	ldr	r2, [pc, #304]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b4a      	ldr	r3, [pc, #296]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b47      	ldr	r3, [pc, #284]	@ (8000658 <MX_GPIO_Init+0x164>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a46      	ldr	r2, [pc, #280]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b44      	ldr	r3, [pc, #272]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b41      	ldr	r3, [pc, #260]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a40      	ldr	r2, [pc, #256]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <MX_GPIO_Init+0x164>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a3a      	ldr	r2, [pc, #232]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	4835      	ldr	r0, [pc, #212]	@ (800065c <MX_GPIO_Init+0x168>)
 8000588:	f001 fae0 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000592:	4833      	ldr	r0, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000594:	f001 fada 	bl	8001b4c <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	4831      	ldr	r0, [pc, #196]	@ (8000664 <MX_GPIO_Init+0x170>)
 800059e:	f001 fad5 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	482e      	ldr	r0, [pc, #184]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005a8:	f001 fad0 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4827      	ldr	r0, [pc, #156]	@ (800065c <MX_GPIO_Init+0x168>)
 80005c0:	f001 f91a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4820      	ldr	r0, [pc, #128]	@ (800065c <MX_GPIO_Init+0x168>)
 80005dc:	f001 f90c 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005f4:	f001 f900 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80005f8:	f640 4316 	movw	r3, #3094	@ 0xc16
 80005fc:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000612:	f001 f8f1 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x170>)
 800062e:	f001 f8e3 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_GPIO_Init+0x16c>)
 800064a:	f001 f8d5 	bl	80017f8 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400
 8000664:	48000c00 	.word	0x48000c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	4840      	ldr	r0, [pc, #256]	@ (8000774 <main+0x10c>)
 8000674:	f001 fa6a 	bl	8001b4c <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 ff40 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f890 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ff38 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000684:	f000 f8e2 	bl	800084c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000688:	f000 f91a 	bl	80008c0 <MX_SPI3_Init>
  MX_TIM2_Init();
 800068c:	f000 fa32 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000690:	f000 faf2 	bl	8000c78 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000694:	f000 fc1e 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000698:	f000 fa88 	bl	8000bac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 0;
 800069c:	4b36      	ldr	r3, [pc, #216]	@ (8000778 <main+0x110>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4835      	ldr	r0, [pc, #212]	@ (800077c <main+0x114>)
 80006a6:	f003 f92d 	bl	8003904 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 0;
 80006aa:	4b33      	ldr	r3, [pc, #204]	@ (8000778 <main+0x110>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006b0:	2108      	movs	r1, #8
 80006b2:	4832      	ldr	r0, [pc, #200]	@ (800077c <main+0x114>)
 80006b4:	f003 f926 	bl	8003904 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80006b8:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <main+0x118>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006be:	2104      	movs	r1, #4
 80006c0:	4830      	ldr	r0, [pc, #192]	@ (8000784 <main+0x11c>)
 80006c2:	f003 f91f 	bl	8003904 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80006c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <main+0x118>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006cc:	2108      	movs	r1, #8
 80006ce:	482d      	ldr	r0, [pc, #180]	@ (8000784 <main+0x11c>)
 80006d0:	f003 f918 	bl	8003904 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <main+0x120>)
 80006d6:	4a2d      	ldr	r2, [pc, #180]	@ (800078c <main+0x124>)
 80006d8:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <main+0x120>)
 80006dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000790 <main+0x128>)
 80006de:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 80006e0:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <main+0x120>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 80006e6:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <main+0x120>)
 80006e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000794 <main+0x12c>)
 80006ea:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80006ec:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <main+0x120>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 80006f2:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <main+0x120>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <main+0x10c>)
 80006f6:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <main+0x120>)
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <main+0x120>)
 8000700:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <main+0x10c>)
 8000702:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <main+0x120>)
 8000706:	2210      	movs	r2, #16
 8000708:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <main+0x120>)
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <main+0x130>)
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000710:	4b22      	ldr	r3, [pc, #136]	@ (800079c <main+0x134>)
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <main+0x120>)
 8000716:	851a      	strh	r2, [r3, #40]	@ 0x28
	ls032.cursor_x = 0;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <main+0x120>)
 800071a:	2200      	movs	r2, #0
 800071c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ls032.cursor_y = 0;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <main+0x120>)
 8000720:	2200      	movs	r2, #0
 8000722:	859a      	strh	r2, [r3, #44]	@ 0x2c

	if (LS032B7DD02_Init(&ls032)) {
 8000724:	4818      	ldr	r0, [pc, #96]	@ (8000788 <main+0x120>)
 8000726:	f000 fd7e 	bl	8001226 <LS032B7DD02_Init>
		// TODO: Error Handle
	}

	LS032B7DD02_DrawLogo(&ls032);
 800072a:	4817      	ldr	r0, [pc, #92]	@ (8000788 <main+0x120>)
 800072c:	f000 fe42 	bl	80013b4 <LS032B7DD02_DrawLogo>
	LS032B7DD02_Update(&ls032);
 8000730:	4815      	ldr	r0, [pc, #84]	@ (8000788 <main+0x120>)
 8000732:	f000 fdfb 	bl	800132c <LS032B7DD02_Update>

	uint8_t tmp_num = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LS032B7DD02_Clear(&ls032);
 800073a:	4813      	ldr	r0, [pc, #76]	@ (8000788 <main+0x120>)
 800073c:	f000 fe19 	bl	8001372 <LS032B7DD02_Clear>
	  LS032B7DD02_Wipe(&ls032);
 8000740:	4811      	ldr	r0, [pc, #68]	@ (8000788 <main+0x120>)
 8000742:	f000 fe04 	bl	800134e <LS032B7DD02_Wipe>
	  LS032B7DD02_DrawChar(&ls032, tmp_num + 48);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	3330      	adds	r3, #48	@ 0x30
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <main+0x120>)
 8000750:	f000 fe66 	bl	8001420 <LS032B7DD02_DrawChar>
	  LS032B7DD02_Update(&ls032);
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <main+0x120>)
 8000756:	f000 fde9 	bl	800132c <LS032B7DD02_Update>
	  tmp_num++;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	3301      	adds	r3, #1
 800075e:	71fb      	strb	r3, [r7, #7]
	  if (tmp_num > 9)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b09      	cmp	r3, #9
 8000764:	d901      	bls.n	800076a <main+0x102>
		  tmp_num = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076e:	f000 ff39 	bl	80015e4 <HAL_Delay>
	  LS032B7DD02_Clear(&ls032);
 8000772:	e7e2      	b.n	800073a <main+0xd2>
 8000774:	48000400 	.word	0x48000400
 8000778:	40000800 	.word	0x40000800
 800077c:	20005de0 	.word	0x20005de0
 8000780:	40000400 	.word	0x40000400
 8000784:	20005d94 	.word	0x20005d94
 8000788:	2000002c 	.word	0x2000002c
 800078c:	20005ce4 	.word	0x20005ce4
 8000790:	48000c00 	.word	0x48000c00
 8000794:	20005d48 	.word	0x20005d48
 8000798:	2000005c 	.word	0x2000005c
 800079c:	20000000 	.word	0x20000000

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	@ 0x58
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2244      	movs	r2, #68	@ 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fc0d 	bl	8004fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c6:	f001 f9e7 	bl	8001b98 <HAL_PWREx_ControlVoltageScaling>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d0:	f000 f835 	bl	800083e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	2303      	movs	r3, #3
 80007e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007ea:	2308      	movs	r3, #8
 80007ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fa20 	bl	8001c44 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800080a:	f000 f818 	bl	800083e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	2103      	movs	r1, #3
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fde8 	bl	80023fc <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000832:	f000 f804 	bl	800083e <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	@ 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000842:	b672      	cpsid	i
}
 8000844:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <Error_Handler+0x8>
	...

0800084c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000852:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <MX_SPI1_Init+0x70>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000864:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000892:	2207      	movs	r2, #7
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_SPI1_Init+0x6c>)
 80008a4:	f002 fc58 	bl	8003158 <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008ae:	f7ff ffc6 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20005c80 	.word	0x20005c80
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_SPI3_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008d8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <MX_SPI3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_SPI3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <MX_SPI3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_SPI3_Init+0x74>)
 8000910:	2207      	movs	r2, #7
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <MX_SPI3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_SPI3_Init+0x74>)
 800091c:	2208      	movs	r2, #8
 800091e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_SPI3_Init+0x74>)
 8000922:	f002 fc19 	bl	8003158 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 800092c:	f7ff ff87 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20005ce4 	.word	0x20005ce4
 8000938:	40003c00 	.word	0x40003c00

0800093c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a2f      	ldr	r2, [pc, #188]	@ (8000a18 <HAL_SPI_MspInit+0xdc>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d129      	bne.n	80009b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	4a2e      	ldr	r2, [pc, #184]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 8000964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000968:	6613      	str	r3, [r2, #96]	@ 0x60
 800096a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800098e:	23e0      	movs	r3, #224	@ 0xe0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f000 ff24 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b0:	e02d      	b.n	8000a0e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a20 <HAL_SPI_MspInit+0xe4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d128      	bne.n	8000a0e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_SPI_MspInit+0xe0>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80009ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fe:	2306      	movs	r3, #6
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <HAL_SPI_MspInit+0xe8>)
 8000a0a:	f000 fef5 	bl	80017f8 <HAL_GPIO_Init>
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40003c00 	.word	0x40003c00
 8000a24:	48000800 	.word	0x48000800

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 fd6d 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b18:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b22:	2230      	movs	r2, #48	@ 0x30
 8000b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <MX_TIM2_Init+0xb0>)
 8000b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b3e:	4818      	ldr	r0, [pc, #96]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b40:	f002 fe88 	bl	8003854 <HAL_TIM_PWM_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b4a:	f7ff fe78 	bl	800083e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b5e:	f003 fc8d 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b68:	f7ff fe69 	bl	800083e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b6c:	2360      	movs	r3, #96	@ 0x60
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <MX_TIM2_Init+0xb4>)
 8000b72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b84:	f002 ffc4 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b8e:	f7ff fe56 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b92:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_TIM2_Init+0xac>)
 8000b94:	f000 f91c 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	@ 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20005d48 	.word	0x20005d48
 8000ba4:	0061a7ff 	.word	0x0061a7ff
 8000ba8:	0030d400 	.word	0x0030d400

08000bac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <MX_TIM3_Init+0xc8>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000be4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000be8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf6:	481e      	ldr	r0, [pc, #120]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000bf8:	f002 fe2c 	bl	8003854 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c02:	f7ff fe1c 	bl	800083e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000c16:	f003 fc31 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c20:	f7ff fe0d 	bl	800083e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	@ 0x60
 8000c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c28:	2332      	movs	r3, #50	@ 0x32
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000c3c:	f002 ff68 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c46:	f7ff fdfa 	bl	800083e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000c52:	f002 ff5d 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c5c:	f7ff fdef 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_TIM3_Init+0xc4>)
 8000c62:	f000 f8b5 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20005d94 	.word	0x20005d94
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <MX_TIM4_Init+0xc8>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000cb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000cc4:	f002 fdc6 	bl	8003854 <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cce:	f7ff fdb6 	bl	800083e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4816      	ldr	r0, [pc, #88]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000ce2:	f003 fbcb 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000cec:	f7ff fda7 	bl	800083e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	@ 0x60
 8000cf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000d08:	f002 ff02 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d12:	f7ff fd94 	bl	800083e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	2208      	movs	r2, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000d1e:	f002 fef7 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d28:	f7ff fd89 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM4_Init+0xc4>)
 8000d2e:	f000 f84f 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20005de0 	.word	0x20005de0
 8000d40:	40000800 	.word	0x40000800

08000d44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d10c      	bne.n	8000d70 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d6e:	e022      	b.n	8000db6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <HAL_TIM_PWM_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10c      	bne.n	8000d94 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
}
 8000d92:	e010      	b.n	8000db6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0c      	ldr	r2, [pc, #48]	@ (8000dcc <HAL_TIM_PWM_MspInit+0x88>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40000400 	.word	0x40000400
 8000dcc:	40000800 	.word	0x40000800

08000dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df0:	d11c      	bne.n	8000e2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a32      	ldr	r2, [pc, #200]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b30      	ldr	r3, [pc, #192]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4827      	ldr	r0, [pc, #156]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf4>)
 8000e26:	f000 fce7 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e2a:	e044      	b.n	8000eb6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a25      	ldr	r2, [pc, #148]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d11d      	bne.n	8000e72 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8000e4e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e60:	2302      	movs	r3, #2
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <HAL_TIM_MspPostInit+0xfc>)
 8000e6c:	f000 fcc4 	bl	80017f8 <HAL_GPIO_Init>
}
 8000e70:	e021      	b.n	8000eb6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_TIM_MspPostInit+0x100>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d11c      	bne.n	8000eb6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_TIM_MspPostInit+0xf0>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8000e94:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <HAL_TIM_MspPostInit+0xf4>)
 8000eb2:	f000 fca1 	bl	80017f8 <HAL_GPIO_Init>
}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	40000800 	.word	0x40000800

08000ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	@ (8000f30 <MX_USART2_UART_Init+0x5c>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f18:	f003 fb38 	bl	800458c <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff fc8c 	bl	800083e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20005e2c 	.word	0x20005e2c
 8000f30:	40004400 	.word	0x40004400

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0aa      	sub	sp, #168	@ 0xa8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2284      	movs	r2, #132	@ 0x84
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 f83a 	bl	8004fce <memset>
  if(uartHandle->Instance==USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <HAL_UART_MspInit+0xb0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13b      	bne.n	8000fdc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fc65 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff fc5f 	bl	800083e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f84:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f000 fc0e 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	37a8      	adds	r7, #168	@ 0xa8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40021000 	.word	0x40021000

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff0:	f7ff fd6e 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 ffe1 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fb23 	bl	8000668 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001030:	08007d30 	.word	0x08007d30
  ldr r2, =_sbss
 8001034:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001038:	20005eb8 	.word	0x20005eb8

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>

0800103e <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e003      	b.n	8001054 <delay_us+0x16>
		asm("NOP");
 800104c:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3f6      	bcc.n	800104c <delay_us+0xe>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 800107e:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2280      	movs	r2, #128	@ 0x80
 8001084:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25a      	sxtb	r2, r3
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	105b      	asrs	r3, r3, #1
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b25a      	sxtb	r2, r3
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	b25b      	sxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b25a      	sxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b25a      	sxtb	r2, r3
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	105b      	asrs	r3, r3, #1
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25a      	sxtb	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25a      	sxtb	r2, r3
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	10db      	asrs	r3, r3, #3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	b25b      	sxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b25a      	sxtb	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25a      	sxtb	r2, r3
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	115b      	asrs	r3, r3, #5
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25a      	sxtb	r2, r3
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	11db      	asrs	r3, r3, #7
 8001192:	b25b      	sxtb	r3, r3
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25a      	sxtb	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	125b      	asrs	r3, r3, #9
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <get_idx_from_cursor>:

uint8_t get_idx_from_cursor(LS032B7DD02_HandleTypeDef *ls032, uint16_t *vram_idx) {
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	if (ls032->cursor_x >= LS032_PIXEL_WIDTH) return ERROR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e0:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80011e4:	d301      	bcc.n	80011ea <get_idx_from_cursor+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e017      	b.n	800121a <get_idx_from_cursor+0x48>
	if (ls032->cursor_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80011ee:	2b29      	cmp	r3, #41	@ 0x29
 80011f0:	d901      	bls.n	80011f6 <get_idx_from_cursor+0x24>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e011      	b.n	800121a <get_idx_from_cursor+0x48>

	*vram_idx = ls032->cursor_x * 44 + ls032->cursor_y + 2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fa:	461a      	mov	r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	441a      	add	r2, r3
 8001200:	0052      	lsls	r2, r2, #1
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	3302      	adds	r3, #2
 8001212:	b29a      	uxth	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LS032B7DD02_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Init(LS032B7DD02_HandleTypeDef *ls032) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001236:	461a      	mov	r2, r3
 8001238:	2100      	movs	r1, #0
 800123a:	f003 fec8 	bl	8004fce <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 800123e:	2300      	movs	r3, #0
 8001240:	81fb      	strh	r3, [r7, #14]
 8001242:	e00e      	b.n	8001262 <LS032B7DD02_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	89fa      	ldrh	r2, [r7, #14]
 800124a:	212c      	movs	r1, #44	@ 0x2c
 800124c:	fb01 f202 	mul.w	r2, r1, r2
 8001250:	441a      	add	r2, r3
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff08 	bl	800106c <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	3301      	adds	r3, #1
 8001260:	81fb      	strh	r3, [r7, #14]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001268:	d3ec      	bcc.n	8001244 <LS032B7DD02_Init+0x1e>
	}

	delay_us(30);
 800126a:	201e      	movs	r0, #30
 800126c:	f7ff fee7 	bl	800103e <delay_us>
	// Need to clear twice for some reason
	LS032B7DD02_Wipe(ls032);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f86c 	bl	800134e <LS032B7DD02_Wipe>
	LS032B7DD02_Wipe(ls032);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f869 	bl	800134e <LS032B7DD02_Wipe>
	delay_us(30);
 800127c:	201e      	movs	r0, #30
 800127e:	f7ff fede 	bl	800103e <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69d8      	ldr	r0, [r3, #28]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8c1b      	ldrh	r3, [r3, #32]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	f000 fc5d 	bl	8001b4c <HAL_GPIO_WritePin>
	delay_us(30);
 8001292:	201e      	movs	r0, #30
 8001294:	f7ff fed3 	bl	800103e <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	8a1b      	ldrh	r3, [r3, #16]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f002 fb2e 	bl	8003904 <HAL_TIM_PWM_Start>
	delay_us(30);
 80012a8:	201e      	movs	r0, #30
 80012aa:	f7ff fec8 	bl	800103e <delay_us>
	return SUCCESS;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <LS032B7DD02_Send>:

uint8_t LS032B7DD02_Send(LS032B7DD02_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	4613      	mov	r3, r2
 80012c4:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6858      	ldr	r0, [r3, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	891b      	ldrh	r3, [r3, #8]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4619      	mov	r1, r3
 80012d6:	f000 fc39 	bl	8001b4c <HAL_GPIO_WritePin>
	delay_us(3);
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff feaf 	bl	800103e <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	2364      	movs	r3, #100	@ 0x64
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	f001 ffd8 	bl	800329e <HAL_SPI_Transmit>
 80012ee:	4603      	mov	r3, r0
 80012f0:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff fea3 	bl	800103e <delay_us>
	if (ret) {
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <LS032B7DD02_Send+0x5a>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6858      	ldr	r0, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	891b      	ldrh	r3, [r3, #8]
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	f000 fc1f 	bl	8001b4c <HAL_GPIO_WritePin>
		return ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e008      	b.n	8001324 <LS032B7DD02_Send+0x6c>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f000 fc15 	bl	8001b4c <HAL_GPIO_WritePin>

	return SUCCESS;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <LS032B7DD02_Update>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Update(LS032B7DD02_HandleTypeDef *ls032) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	// Push VRAM to LCD Mem.
	// Todo: Make this a DMA TX
	return LS032B7DD02_Send(ls032, ls032->vram, ls032->vram_len);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800133c:	461a      	mov	r2, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffba 	bl	80012b8 <LS032B7DD02_Send>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LS032B7DD02_Wipe>:

uint8_t LS032B7DD02_Wipe(LS032B7DD02_HandleTypeDef *ls032) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 8001356:	2320      	movs	r3, #32
 8001358:	81bb      	strh	r3, [r7, #12]
	return LS032B7DD02_Send(ls032, clear_cmd, 2);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2202      	movs	r2, #2
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa8 	bl	80012b8 <LS032B7DD02_Send>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <LS032B7DD02_Clear>:

uint8_t LS032B7DD02_Clear(LS032B7DD02_HandleTypeDef *ls032) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800137a:	2300      	movs	r3, #0
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	e00f      	b.n	80013a0 <LS032B7DD02_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	212c      	movs	r1, #44	@ 0x2c
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	3302      	adds	r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	222a      	movs	r2, #42	@ 0x2a
 8001392:	21ff      	movs	r1, #255	@ 0xff
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fe1a 	bl	8004fce <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	81fb      	strh	r3, [r7, #14]
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80013a6:	d3eb      	bcc.n	8001380 <LS032B7DD02_Clear+0xe>
	}

	return SUCCESS;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <LS032B7DD02_DrawLogo>:
}

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_DrawLogo(LS032B7DD02_HandleTypeDef *ls032) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	LS032B7DD02_Clear(ls032);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ffd8 	bl	8001372 <LS032B7DD02_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 80013c2:	2312      	movs	r3, #18
 80013c4:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 80013c6:	230a      	movs	r3, #10
 80013c8:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	81fb      	strh	r3, [r7, #14]
 80013ce:	e01c      	b.n	800140a <LS032B7DD02_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d4:	89f9      	ldrh	r1, [r7, #14]
 80013d6:	89bb      	ldrh	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	212c      	movs	r1, #44	@ 0x2c
 80013dc:	fb01 f303 	mul.w	r3, r1, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	897b      	ldrh	r3, [r7, #10]
 80013e4:	440b      	add	r3, r1
 80013e6:	3302      	adds	r3, #2
 80013e8:	18d0      	adds	r0, r2, r3
 80013ea:	89fa      	ldrh	r2, [r7, #14]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00da      	lsls	r2, r3, #3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <LS032B7DD02_DrawLogo+0x68>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2215      	movs	r2, #21
 80013fe:	4619      	mov	r1, r3
 8001400:	f003 fe12 	bl	8005028 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	3301      	adds	r3, #1
 8001408:	81fb      	strh	r3, [r7, #14]
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001410:	d3de      	bcc.n	80013d0 <LS032B7DD02_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	0800541c 	.word	0x0800541c

08001420 <LS032B7DD02_DrawChar>:

uint8_t LS032B7DD02_DrawChar(LS032B7DD02_HandleTypeDef *ls032, char ch) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d101      	bne.n	8001436 <LS032B7DD02_DrawChar+0x16>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001432:	2300      	movs	r3, #0
 8001434:	e059      	b.n	80014ea <LS032B7DD02_DrawChar+0xca>
	}

	uint16_t char_idx = ALPHNUM_1_IDX[(uint8_t)ch];
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	4a2e      	ldr	r2, [pc, #184]	@ (80014f4 <LS032B7DD02_DrawChar+0xd4>)
 800143a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800143e:	817b      	strh	r3, [r7, #10]
	if (char_idx == 0)
 8001440:	897b      	ldrh	r3, [r7, #10]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <LS032B7DD02_DrawChar+0x2a>
		return ERROR;	// char is unable to be rendered
 8001446:	2301      	movs	r3, #1
 8001448:	e04f      	b.n	80014ea <LS032B7DD02_DrawChar+0xca>

	uint8_t char_width = ALPHNUM_1[char_idx];
 800144a:	897b      	ldrh	r3, [r7, #10]
 800144c:	4a2a      	ldr	r2, [pc, #168]	@ (80014f8 <LS032B7DD02_DrawChar+0xd8>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	73fb      	strb	r3, [r7, #15]
	uint8_t char_height = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	73bb      	strb	r3, [r7, #14]
	uint16_t vram_idx = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	813b      	strh	r3, [r7, #8]
	get_idx_from_cursor(ls032, &vram_idx);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff feb6 	bl	80011d2 <get_idx_from_cursor>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - ls032->cursor_x < char_width)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146a:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	429a      	cmp	r2, r3
 8001472:	da05      	bge.n	8001480 <LS032B7DD02_DrawChar+0x60>
		char_width = LS032_PIXEL_WIDTH - ls032->cursor_x;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f1c3 0318 	rsb	r3, r3, #24
 800147e:	73fb      	strb	r3, [r7, #15]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - ls032->cursor_y < char_height)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001484:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	429a      	cmp	r2, r3
 800148c:	da05      	bge.n	800149a <LS032B7DD02_DrawChar+0x7a>
		char_height = LS032_PIXEL_HEIGHT - ls032->cursor_y;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001498:	73bb      	strb	r3, [r7, #14]

	for (uint8_t col = 0; col < char_width; col++) {
 800149a:	2300      	movs	r3, #0
 800149c:	737b      	strb	r3, [r7, #13]
 800149e:	e017      	b.n	80014d0 <LS032B7DD02_DrawChar+0xb0>
		memcpy(ls032->vram + vram_idx, ALPHNUM_1 + char_idx + 1 + col*char_height, char_height);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	893a      	ldrh	r2, [r7, #8]
 80014a6:	1898      	adds	r0, r3, r2
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	7b7a      	ldrb	r2, [r7, #13]
 80014ac:	7bb9      	ldrb	r1, [r7, #14]
 80014ae:	fb01 f202 	mul.w	r2, r1, r2
 80014b2:	4413      	add	r3, r2
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <LS032B7DD02_DrawChar+0xd8>)
 80014b8:	4413      	add	r3, r2
 80014ba:	7bba      	ldrb	r2, [r7, #14]
 80014bc:	4619      	mov	r1, r3
 80014be:	f003 fdb3 	bl	8005028 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 80014c2:	893b      	ldrh	r3, [r7, #8]
 80014c4:	332c      	adds	r3, #44	@ 0x2c
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	813b      	strh	r3, [r7, #8]
	for (uint8_t col = 0; col < char_width; col++) {
 80014ca:	7b7b      	ldrb	r3, [r7, #13]
 80014cc:	3301      	adds	r3, #1
 80014ce:	737b      	strb	r3, [r7, #13]
 80014d0:	7b7a      	ldrb	r2, [r7, #13]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3e3      	bcc.n	80014a0 <LS032B7DD02_DrawChar+0x80>
	}

	ls032->cursor_x += char_width;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
	return SUCCESS;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080050a4 	.word	0x080050a4
 80014f8:	080051a4 	.word	0x080051a4

080014fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f942 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150c:	200f      	movs	r0, #15
 800150e:	f000 f80d 	bl	800152c <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	e001      	b.n	8001522 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151e:	f7ff fa83 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001522:	79fb      	ldrb	r3, [r7, #7]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_InitTick+0x6c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d023      	beq.n	8001588 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_InitTick+0x70>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_InitTick+0x6c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f941 	bl	80017de <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d809      	bhi.n	800157c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f919 	bl	80017a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_InitTick+0x74>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e007      	b.n	800158c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e004      	b.n	800158c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e001      	b.n	800158c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000000c 	.word	0x2000000c
 800159c:	20000004 	.word	0x20000004
 80015a0:	20000008 	.word	0x20000008

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20005eb4 	.word	0x20005eb4

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20005eb4 	.word	0x20005eb4

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000000c 	.word	0x2000000c

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	@ (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	@ (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	@ (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff47 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff5c 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffb0 	bl	800174c <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e17f      	b.n	8001b08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8171 	beq.w	8001b02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 0201 	and.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d118      	bne.n	80018d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	6939      	ldr	r1, [r7, #16]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ac 	beq.w	8001b02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <HAL_GPIO_Init+0x334>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ec:	d025      	beq.n	8001a3a <HAL_GPIO_Init+0x242>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b30 <HAL_GPIO_Init+0x338>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <HAL_GPIO_Init+0x23e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001b34 <HAL_GPIO_Init+0x33c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4d      	ldr	r2, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x340>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	@ (8001b3c <HAL_GPIO_Init+0x344>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_GPIO_Init+0x348>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x22e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_GPIO_Init+0x34c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x22a>
 8001a1e:	2306      	movs	r3, #6
 8001a20:	e00c      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00a      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a26:	2305      	movs	r3, #5
 8001a28:	e008      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e004      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	f002 0203 	and.w	r2, r2, #3
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	4093      	lsls	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4c:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_GPIO_Init+0x334>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a7e:	4a32      	ldr	r2, [pc, #200]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a84:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa8:	4a27      	ldr	r2, [pc, #156]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f ae78 	bne.w	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	48001800 	.word	0x48001800
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba6:	d130      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb4:	d038      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2232      	movs	r2, #50	@ 0x32
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	e002      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f2      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c04:	d110      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e00f      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c16:	d007      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c20:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e3ca      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b97      	ldr	r3, [pc, #604]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b94      	ldr	r3, [pc, #592]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80e4 	beq.w	8001e40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4a>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	f040 808b 	bne.w	8001d9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f040 8087 	bne.w	8001d9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e3a2      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	4b82      	ldr	r3, [pc, #520]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x7c>
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_OscConfig+0x88>
 8001cc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d223      	bcs.n	8001d18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fd53 	bl	8002780 <RCC_SetFlashLatencyFromMSIRange>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e383      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a72      	ldr	r2, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b70      	ldr	r3, [pc, #448]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	496d      	ldr	r1, [pc, #436]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4968      	ldr	r1, [pc, #416]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
 8001d16:	e025      	b.n	8001d64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a65      	ldr	r2, [pc, #404]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4960      	ldr	r1, [pc, #384]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d36:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	495b      	ldr	r1, [pc, #364]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fd13 	bl	8002780 <RCC_SetFlashLatencyFromMSIRange>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e343      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d64:	f000 fc4a 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b52      	ldr	r3, [pc, #328]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	4950      	ldr	r1, [pc, #320]	@ (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	4a4e      	ldr	r2, [pc, #312]	@ (8001ebc <HAL_RCC_OscConfig+0x278>)
 8001d82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d84:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec0 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fbcf 	bl	800152c <HAL_InitTick>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d052      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	e327      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d032      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001da4:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a42      	ldr	r2, [pc, #264]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc0c 	bl	80015cc <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db8:	f7ff fc08 	bl	80015cc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e310      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dca:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd6:	4b37      	ldr	r3, [pc, #220]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a36      	ldr	r2, [pc, #216]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4931      	ldr	r1, [pc, #196]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df4:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	492c      	ldr	r1, [pc, #176]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e01a      	b.n	8001e40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fbd9 	bl	80015cc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fbd5 	bl	80015cc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e2dd      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x1da>
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d074      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x21a>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d10e      	bne.n	8001e76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d10b      	bne.n	8001e76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d064      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d160      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e2ba      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x24a>
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e026      	b.n	8001edc <HAL_RCC_OscConfig+0x298>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e96:	d115      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x280>
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a02      	ldr	r2, [pc, #8]	@ (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x298>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800505c 	.word	0x0800505c
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a9f      	ldr	r2, [pc, #636]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b9d      	ldr	r3, [pc, #628]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a9c      	ldr	r2, [pc, #624]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fb72 	bl	80015cc <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb6e 	bl	80015cc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e276      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x2a8>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb5e 	bl	80015cc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fb5a 	bl	80015cc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e262      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2d0>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d060      	beq.n	8002004 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_OscConfig+0x310>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d119      	bne.n	8001f82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d116      	bne.n	8001f82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f54:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x328>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e23f      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	4973      	ldr	r1, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	e040      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d023      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff fb19 	bl	80015cc <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fb15 	bl	80015cc <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e21d      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	495f      	ldr	r1, [pc, #380]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e018      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff faf5 	bl	80015cc <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff faf1 	bl	80015cc <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1f9      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff8:	4b53      	ldr	r3, [pc, #332]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03c      	beq.n	800208a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01c      	beq.n	8002052 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002018:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201e:	4a4a      	ldr	r2, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff fad0 	bl	80015cc <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002030:	f7ff facc 	bl	80015cc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1d4      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCC_OscConfig+0x3ec>
 8002050:	e01b      	b.n	800208a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002058:	4a3b      	ldr	r2, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff fab3 	bl	80015cc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff faaf 	bl	80015cc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1b7      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800207c:	4b32      	ldr	r3, [pc, #200]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80a6 	beq.w	80021e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b4:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	4b21      	ldr	r3, [pc, #132]	@ (800214c <HAL_RCC_OscConfig+0x508>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d0:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <HAL_RCC_OscConfig+0x508>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_RCC_OscConfig+0x508>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020dc:	f7ff fa76 	bl	80015cc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7ff fa72 	bl	80015cc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e17a      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_RCC_OscConfig+0x508>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d108      	bne.n	800211c <HAL_RCC_OscConfig+0x4d8>
 800210a:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800211a:	e029      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d115      	bne.n	8002150 <HAL_RCC_OscConfig+0x50c>
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_RCC_OscConfig+0x504>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	4b9c      	ldr	r3, [pc, #624]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a9b      	ldr	r2, [pc, #620]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002160:	4b98      	ldr	r3, [pc, #608]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	4a97      	ldr	r2, [pc, #604]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d016      	beq.n	80021a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff fa28 	bl	80015cc <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff fa24 	bl	80015cc <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e12a      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b8b      	ldr	r3, [pc, #556]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ed      	beq.n	8002180 <HAL_RCC_OscConfig+0x53c>
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa11 	bl	80015cc <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff fa0d 	bl	80015cc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e113      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c4:	4b7f      	ldr	r3, [pc, #508]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ed      	bne.n	80021ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	4a79      	ldr	r2, [pc, #484]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80fe 	beq.w	80023ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	f040 80d0 	bne.w	8002398 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021f8:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	429a      	cmp	r2, r3
 800220a:	d130      	bne.n	800226e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	3b01      	subs	r3, #1
 8002218:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d127      	bne.n	800226e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d11f      	bne.n	800226e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002238:	2a07      	cmp	r2, #7
 800223a:	bf14      	ite	ne
 800223c:	2201      	movne	r2, #1
 800223e:	2200      	moveq	r2, #0
 8002240:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d109      	bne.n	800226e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d06e      	beq.n	800234c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d069      	beq.n	8002348 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002280:	4b50      	ldr	r3, [pc, #320]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0ad      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002290:	4b4c      	ldr	r3, [pc, #304]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a4b      	ldr	r2, [pc, #300]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229c:	f7ff f996 	bl	80015cc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f992 	bl	80015cc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e09a      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b6:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c2:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <HAL_RCC_OscConfig+0x784>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022d2:	3a01      	subs	r2, #1
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022dc:	0212      	lsls	r2, r2, #8
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022e4:	0852      	lsrs	r2, r2, #1
 80022e6:	3a01      	subs	r2, #1
 80022e8:	0552      	lsls	r2, r2, #21
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0652      	lsls	r2, r2, #25
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022fc:	0912      	lsrs	r2, r2, #4
 80022fe:	0452      	lsls	r2, r2, #17
 8002300:	430a      	orrs	r2, r1
 8002302:	4930      	ldr	r1, [pc, #192]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002308:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2d      	ldr	r2, [pc, #180]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002314:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a2a      	ldr	r2, [pc, #168]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800231e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002320:	f7ff f954 	bl	80015cc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f950 	bl	80015cc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e058      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002346:	e050      	b.n	80023ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e04f      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234c:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d148      	bne.n	80023ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002364:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a16      	ldr	r2, [pc, #88]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002370:	f7ff f92c 	bl	80015cc <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff f928 	bl	80015cc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e030      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x734>
 8002396:	e028      	b.n	80023ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d023      	beq.n	80023e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a08      	ldr	r2, [pc, #32]	@ (80023c4 <HAL_RCC_OscConfig+0x780>)
 80023a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff f90f 	bl	80015cc <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b0:	e00c      	b.n	80023cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff f90b 	bl	80015cc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d905      	bls.n	80023cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e013      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x7b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ec      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_OscConfig+0x7b0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4905      	ldr	r1, [pc, #20]	@ (80023f4 <HAL_RCC_OscConfig+0x7b0>)
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_OscConfig+0x7b4>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e001      	b.n	80023ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	feeefffc 	.word	0xfeeefffc

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0e7      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b75      	ldr	r3, [pc, #468]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d910      	bls.n	8002440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	4970      	ldr	r1, [pc, #448]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b6e      	ldr	r3, [pc, #440]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cf      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b66      	ldr	r3, [pc, #408]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002458:	429a      	cmp	r2, r3
 800245a:	d908      	bls.n	800246e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b63      	ldr	r3, [pc, #396]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4960      	ldr	r1, [pc, #384]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04c      	beq.n	8002514 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002482:	4b5a      	ldr	r3, [pc, #360]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d121      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0a6      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249a:	4b54      	ldr	r3, [pc, #336]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09a      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08e      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c2:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e086      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b46      	ldr	r3, [pc, #280]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4943      	ldr	r1, [pc, #268]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7ff f872 	bl	80015cc <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff f86e 	bl	80015cc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e06e      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b3a      	ldr	r3, [pc, #232]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252c:	429a      	cmp	r2, r3
 800252e:	d208      	bcs.n	8002542 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b2e      	ldr	r3, [pc, #184]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	492b      	ldr	r1, [pc, #172]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002542:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d210      	bcs.n	8002572 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4923      	ldr	r1, [pc, #140]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e036      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4918      	ldr	r1, [pc, #96]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4910      	ldr	r1, [pc, #64]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b0:	f000 f824 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	490b      	ldr	r1, [pc, #44]	@ (80025f0 <HAL_RCC_ClockConfig+0x1f4>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f8>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_ClockConfig+0x1fc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe ffa9 	bl	800152c <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025de:	7afb      	ldrb	r3, [r7, #11]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	0800505c 	.word	0x0800505c
 80025f4:	20000004 	.word	0x20000004
 80025f8:	20000008 	.word	0x20000008

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260a:	4b3e      	ldr	r3, [pc, #248]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x34>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d121      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d11e      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800263c:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e005      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d102      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e004      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d101      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002680:	4b22      	ldr	r3, [pc, #136]	@ (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 8002682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d134      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d003      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0xac>
 80026a0:	e005      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	e005      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 80026aa:	617b      	str	r3, [r7, #20]
      break;
 80026ac:	e002      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	617b      	str	r3, [r7, #20]
      break;
 80026b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	3301      	adds	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	fb03 f202 	mul.w	r2, r3, r2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	0e5b      	lsrs	r3, r3, #25
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	3301      	adds	r3, #1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f4:	69bb      	ldr	r3, [r7, #24]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	08005074 	.word	0x08005074
 800270c:	00f42400 	.word	0x00f42400

08002710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b03      	ldr	r3, [pc, #12]	@ (8002724 <HAL_RCC_GetHCLKFreq+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800272c:	f7ff fff0 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	0800506c 	.word	0x0800506c

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002758:	f7ff ffda 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0adb      	lsrs	r3, r3, #11
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4904      	ldr	r1, [pc, #16]	@ (800277c <HAL_RCC_GetPCLK2Freq+0x28>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	0800506c 	.word	0x0800506c

08002780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002798:	f7ff f9f0 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 800279c:	6178      	str	r0, [r7, #20]
 800279e:	e014      	b.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ac:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027b8:	f7ff f9e0 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 80027bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d0:	d10b      	bne.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b80      	cmp	r3, #128	@ 0x80
 80027d6:	d919      	bls.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2ba0      	cmp	r3, #160	@ 0xa0
 80027dc:	d902      	bls.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027de:	2302      	movs	r3, #2
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e013      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e010      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b80      	cmp	r3, #128	@ 0x80
 80027ee:	d902      	bls.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027f0:	2303      	movs	r3, #3
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e00a      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b80      	cmp	r3, #128	@ 0x80
 80027fa:	d102      	bne.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027fc:	2302      	movs	r3, #2
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e004      	b.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b70      	cmp	r3, #112	@ 0x70
 8002806:	d101      	bne.n	800280c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0207 	bic.w	r2, r3, #7
 8002814:	4909      	ldr	r1, [pc, #36]	@ (800283c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002848:	2300      	movs	r3, #0
 800284a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800284c:	2300      	movs	r3, #0
 800284e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002858:	2b00      	cmp	r3, #0
 800285a:	d041      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002860:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002864:	d02a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002866:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800286a:	d824      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800286c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002872:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002876:	d81e      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800287c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002880:	d010      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002882:	e018      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002884:	4b86      	ldr	r3, [pc, #536]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a85      	ldr	r2, [pc, #532]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002890:	e015      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fa8b 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a2:	e00c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3320      	adds	r3, #32
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fb76 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	74fb      	strb	r3, [r7, #19]
      break;
 80028ba:	e000      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c4:	4b76      	ldr	r3, [pc, #472]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d2:	4973      	ldr	r1, [pc, #460]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028da:	e001      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d041      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028f4:	d02a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028fa:	d824      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002906:	d81e      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002910:	d010      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002912:	e018      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002914:	4b62      	ldr	r3, [pc, #392]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a61      	ldr	r2, [pc, #388]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002920:	e015      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fa43 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002932:	e00c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3320      	adds	r3, #32
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fb2e 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002944:	e003      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	74fb      	strb	r3, [r7, #19]
      break;
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002954:	4b52      	ldr	r3, [pc, #328]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002962:	494f      	ldr	r1, [pc, #316]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800296a:	e001      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a0 	beq.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002982:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b41      	ldr	r3, [pc, #260]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	4a40      	ldr	r2, [pc, #256]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a4:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fe04 	bl	80015cc <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c6:	e009      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7fe fe00 	bl	80015cc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d902      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	74fb      	strb	r3, [r7, #19]
        break;
 80029da:	e005      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d15c      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ee:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d019      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a18:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1e:	4a20      	ldr	r2, [pc, #128]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a28:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a38:	4a19      	ldr	r2, [pc, #100]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fdbf 	bl	80015cc <HAL_GetTick>
 8002a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a50:	e00b      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fdbb 	bl	80015cc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d902      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	74fb      	strb	r3, [r7, #19]
            break;
 8002a68:	e006      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ec      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a8e:	4904      	ldr	r1, [pc, #16]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	74bb      	strb	r3, [r7, #18]
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aac:	7c7b      	ldrb	r3, [r7, #17]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	4aa0      	ldr	r2, [pc, #640]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aca:	4b9b      	ldr	r3, [pc, #620]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f023 0203 	bic.w	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	4997      	ldr	r1, [pc, #604]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aec:	4b92      	ldr	r3, [pc, #584]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f023 020c 	bic.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	498f      	ldr	r1, [pc, #572]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	4986      	ldr	r1, [pc, #536]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b30:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	497e      	ldr	r1, [pc, #504]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b52:	4b79      	ldr	r3, [pc, #484]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b60:	4975      	ldr	r1, [pc, #468]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b74:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	496d      	ldr	r1, [pc, #436]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b96:	4b68      	ldr	r3, [pc, #416]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	4964      	ldr	r1, [pc, #400]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	495c      	ldr	r1, [pc, #368]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bda:	4b57      	ldr	r3, [pc, #348]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be8:	4953      	ldr	r1, [pc, #332]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	494b      	ldr	r1, [pc, #300]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c1e:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	4942      	ldr	r1, [pc, #264]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d028      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c40:	4b3d      	ldr	r3, [pc, #244]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4e:	493a      	ldr	r1, [pc, #232]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
 8002c6c:	e011      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f898 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4922      	ldr	r1, [pc, #136]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc8:	60d3      	str	r3, [r2, #12]
 8002cca:	e011      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f869 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d031      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0a:	490b      	ldr	r1, [pc, #44]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d1a:	d10f      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f846 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
 8002d36:	e013      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002d38:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3320      	adds	r3, #32
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f925 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d7a:	490d      	ldr	r1, [pc, #52]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d9c:	4904      	ldr	r1, [pc, #16]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000

08002db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dc2:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dce:	4b72      	ldr	r3, [pc, #456]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
       ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de6:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
       ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d047      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e044      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d018      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x86>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d825      	bhi.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d002      	beq.n	8002e16 <RCCEx_PLLSAI1_Config+0x62>
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d009      	beq.n	8002e28 <RCCEx_PLLSAI1_Config+0x74>
 8002e14:	e020      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e16:	4b60      	ldr	r3, [pc, #384]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e26:	e01a      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e28:	4b5b      	ldr	r3, [pc, #364]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e013      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e3a:	4b57      	ldr	r3, [pc, #348]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e46:	4b54      	ldr	r3, [pc, #336]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e56:	e006      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e004      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	430b      	orrs	r3, r1
 8002e84:	4944      	ldr	r1, [pc, #272]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d17d      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e90:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a40      	ldr	r2, [pc, #256]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fb96 	bl	80015cc <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea2:	e009      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea4:	f7fe fb92 	bl	80015cc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d902      	bls.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb6:	e005      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb8:	4b37      	ldr	r3, [pc, #220]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ef      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d160      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	0912      	lsrs	r2, r2, #4
 8002ee8:	0452      	lsls	r2, r2, #17
 8002eea:	430a      	orrs	r2, r1
 8002eec:	492a      	ldr	r1, [pc, #168]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	610b      	str	r3, [r1, #16]
 8002ef2:	e027      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d112      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002efa:	4b27      	ldr	r3, [pc, #156]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f02:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	0211      	lsls	r1, r2, #8
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6912      	ldr	r2, [r2, #16]
 8002f10:	0852      	lsrs	r2, r2, #1
 8002f12:	3a01      	subs	r2, #1
 8002f14:	0552      	lsls	r2, r2, #21
 8002f16:	430a      	orrs	r2, r1
 8002f18:	491f      	ldr	r1, [pc, #124]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
 8002f1e:	e011      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	0211      	lsls	r1, r2, #8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6952      	ldr	r2, [r2, #20]
 8002f36:	0852      	lsrs	r2, r2, #1
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0652      	lsls	r2, r2, #25
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	4916      	ldr	r1, [pc, #88]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe fb3c 	bl	80015cc <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f58:	f7fe fb38 	bl	80015cc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
          break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002faa:	4b6a      	ldr	r3, [pc, #424]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fb6:	4b67      	ldr	r3, [pc, #412]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fce:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d047      	beq.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e044      	b.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d018      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x86>
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d825      	bhi.n	8003040 <RCCEx_PLLSAI2_Config+0xa4>
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d002      	beq.n	8002ffe <RCCEx_PLLSAI2_Config+0x62>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d009      	beq.n	8003010 <RCCEx_PLLSAI2_Config+0x74>
 8002ffc:	e020      	b.n	8003040 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffe:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11d      	bne.n	8003046 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300e:	e01a      	b.n	8003046 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003010:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003020:	e013      	b.n	800304a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003022:	4b4c      	ldr	r3, [pc, #304]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302e:	4b49      	ldr	r3, [pc, #292]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303e:	e006      	b.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e004      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003056:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	430b      	orrs	r3, r1
 800306c:	4939      	ldr	r1, [pc, #228]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d167      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a35      	ldr	r2, [pc, #212]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fe faa2 	bl	80015cc <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308a:	e009      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800308c:	f7fe fa9e 	bl	80015cc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
        break;
 800309e:	e005      	b.n	80030ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ef      	bne.n	800308c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d14a      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b8:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	0211      	lsls	r1, r2, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	0912      	lsrs	r2, r2, #4
 80030d0:	0452      	lsls	r2, r2, #17
 80030d2:	430a      	orrs	r2, r1
 80030d4:	491f      	ldr	r1, [pc, #124]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	614b      	str	r3, [r1, #20]
 80030da:	e011      	b.n	8003100 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	0211      	lsls	r1, r2, #8
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6912      	ldr	r2, [r2, #16]
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0652      	lsls	r2, r2, #25
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4916      	ldr	r1, [pc, #88]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a13      	ldr	r2, [pc, #76]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe fa5e 	bl	80015cc <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003112:	e009      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003114:	f7fe fa5a 	bl	80015cc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	73fb      	strb	r3, [r7, #15]
          break;
 8003126:	e005      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ef      	beq.n	8003114 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4904      	ldr	r1, [pc, #16]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e095      	b.n	8003296 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800317a:	d009      	beq.n	8003190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	e005      	b.n	8003190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fbc6 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031d0:	d902      	bls.n	80031d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e002      	b.n	80031de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031e6:	d007      	beq.n	80031f8 <HAL_SPI_Init+0xa0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	ea42 0103 	orr.w	r1, r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	0c1b      	lsrs	r3, r3, #16
 8003254:	f003 0204 	and.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b088      	sub	sp, #32
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ae:	f7fe f98d 	bl	80015cc <HAL_GetTick>
 80032b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
 80032c6:	e15c      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_Transmit+0x36>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e154      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_SPI_Transmit+0x48>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e14d      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003338:	d10f      	bne.n	800335a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003358:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d007      	beq.n	8003378 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003380:	d952      	bls.n	8003428 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_Transmit+0xf2>
 800338a:	8b7b      	ldrh	r3, [r7, #26]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d145      	bne.n	800341c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033b4:	e032      	b.n	800341c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d112      	bne.n	80033ea <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	1c9a      	adds	r2, r3, #2
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e8:	e018      	b.n	800341c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ea:	f7fe f8ef 	bl	80015cc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_Transmit+0x164>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d102      	bne.n	8003408 <HAL_SPI_Transmit+0x16a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0b2      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1c7      	bne.n	80033b6 <HAL_SPI_Transmit+0x118>
 8003426:	e083      	b.n	8003530 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x198>
 8003430:	8b7b      	ldrh	r3, [r7, #26]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d177      	bne.n	8003526 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d912      	bls.n	8003466 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	881a      	ldrh	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b02      	subs	r3, #2
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003464:	e05f      	b.n	8003526 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	7812      	ldrb	r2, [r2, #0]
 8003472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800348c:	e04b      	b.n	8003526 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d12b      	bne.n	80034f4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d912      	bls.n	80034cc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b02      	subs	r3, #2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ca:	e02c      	b.n	8003526 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034f2:	e018      	b.n	8003526 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f4:	f7fe f86a 	bl	80015cc <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d803      	bhi.n	800350c <HAL_SPI_Transmit+0x26e>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Transmit+0x274>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e02d      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ae      	bne.n	800348e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	6839      	ldr	r1, [r7, #0]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f947 	bl	80037c8 <SPI_EndRxTxTransaction>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003580:	2300      	movs	r3, #0
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800359c:	f7fe f816 	bl	80015cc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035ac:	f7fe f80e 	bl	80015cc <HAL_GetTick>
 80035b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035b2:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	015b      	lsls	r3, r3, #5
 80035b8:	0d1b      	lsrs	r3, r3, #20
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c2:	e054      	b.n	800366e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d050      	beq.n	800366e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035cc:	f7fd fffe 	bl	80015cc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d902      	bls.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d13d      	bne.n	800365e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035fa:	d111      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003604:	d004      	beq.n	8003610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360e:	d107      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800361e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003628:	d10f      	bne.n	800364a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e017      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3b01      	subs	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	429a      	cmp	r2, r3
 800368a:	d19b      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000004 	.word	0x20000004

0800369c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036ae:	f7fd ff8d 	bl	80015cc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036be:	f7fd ff85 	bl	80015cc <HAL_GetTick>
 80036c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036cc:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	0d1b      	lsrs	r3, r3, #20
 80036dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036e4:	e060      	b.n	80037a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036ec:	d107      	bne.n	80036fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d050      	beq.n	80037a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003706:	f7fd ff61 	bl	80015cc <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	429a      	cmp	r2, r3
 8003714:	d902      	bls.n	800371c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d13d      	bne.n	8003798 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800372a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003734:	d111      	bne.n	800375a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373e:	d004      	beq.n	800374a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003748:	d107      	bne.n	800375a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003758:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003762:	d10f      	bne.n	8003784 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e010      	b.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d196      	bne.n	80036e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3728      	adds	r7, #40	@ 0x28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000004 	.word	0x20000004

080037c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff ff5b 	bl	800369c <SPI_WaitFifoStateUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e027      	b.n	800384c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2200      	movs	r2, #0
 8003804:	2180      	movs	r1, #128	@ 0x80
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fec0 	bl	800358c <SPI_WaitFlagStateUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e014      	b.n	800384c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff34 	bl	800369c <SPI_WaitFifoStateUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e000      	b.n	800384c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e049      	b.n	80038fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fa62 	bl	8000d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fa50 	bl	8003d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start+0x24>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e03c      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d109      	bne.n	8003942 <HAL_TIM_PWM_Start+0x3e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e02f      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x58>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e022      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d109      	bne.n	8003976 <HAL_TIM_PWM_Start+0x72>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e015      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x8c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e008      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e09c      	b.n	8003ae4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xb6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b8:	e023      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xc6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	e01b      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0xd6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d8:	e013      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xe6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039e8:	e00b      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0xf6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f8:	e003      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fd10 	bl	8004430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a35      	ldr	r2, [pc, #212]	@ (8003aec <HAL_TIM_PWM_Start+0x1e8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x13e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a34      	ldr	r2, [pc, #208]	@ (8003af0 <HAL_TIM_PWM_Start+0x1ec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x13e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a32      	ldr	r2, [pc, #200]	@ (8003af4 <HAL_TIM_PWM_Start+0x1f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x13e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a31      	ldr	r2, [pc, #196]	@ (8003af8 <HAL_TIM_PWM_Start+0x1f4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIM_PWM_Start+0x13e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003afc <HAL_TIM_PWM_Start+0x1f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Start+0x142>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_PWM_Start+0x144>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a22      	ldr	r2, [pc, #136]	@ (8003aec <HAL_TIM_PWM_Start+0x1e8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01d      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_TIM_PWM_Start+0x1fc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <HAL_TIM_PWM_Start+0x200>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_TIM_PWM_Start+0x204>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <HAL_TIM_PWM_Start+0x1ec>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x19e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <HAL_TIM_PWM_Start+0x1f0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d115      	bne.n	8003ace <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <HAL_TIM_PWM_Start+0x208>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d015      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aba:	d011      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	e008      	b.n	8003ae0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e000      	b.n	8003ae2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40013400 	.word	0x40013400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0ff      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b14      	cmp	r3, #20
 8003b3a:	f200 80f0 	bhi.w	8003d1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003d1f 	.word	0x08003d1f
 8003b4c:	08003d1f 	.word	0x08003d1f
 8003b50:	08003d1f 	.word	0x08003d1f
 8003b54:	08003bd9 	.word	0x08003bd9
 8003b58:	08003d1f 	.word	0x08003d1f
 8003b5c:	08003d1f 	.word	0x08003d1f
 8003b60:	08003d1f 	.word	0x08003d1f
 8003b64:	08003c1b 	.word	0x08003c1b
 8003b68:	08003d1f 	.word	0x08003d1f
 8003b6c:	08003d1f 	.word	0x08003d1f
 8003b70:	08003d1f 	.word	0x08003d1f
 8003b74:	08003c5b 	.word	0x08003c5b
 8003b78:	08003d1f 	.word	0x08003d1f
 8003b7c:	08003d1f 	.word	0x08003d1f
 8003b80:	08003d1f 	.word	0x08003d1f
 8003b84:	08003c9d 	.word	0x08003c9d
 8003b88:	08003d1f 	.word	0x08003d1f
 8003b8c:	08003d1f 	.word	0x08003d1f
 8003b90:	08003d1f 	.word	0x08003d1f
 8003b94:	08003cdd 	.word	0x08003cdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f970 	bl	8003e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6999      	ldr	r1, [r3, #24]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	619a      	str	r2, [r3, #24]
      break;
 8003bd6:	e0a5      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f9e0 	bl	8003fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6999      	ldr	r1, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	619a      	str	r2, [r3, #24]
      break;
 8003c18:	e084      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fa49 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0208 	orr.w	r2, r2, #8
 8003c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0204 	bic.w	r2, r2, #4
 8003c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	61da      	str	r2, [r3, #28]
      break;
 8003c58:	e064      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fab1 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69d9      	ldr	r1, [r3, #28]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	021a      	lsls	r2, r3, #8
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	61da      	str	r2, [r3, #28]
      break;
 8003c9a:	e043      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fafa 	bl	800429c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003cda:	e023      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb3e 	bl	8004364 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d1c:	e002      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
      break;
 8003d22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop

08003d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a46      	ldr	r2, [pc, #280]	@ (8003e64 <TIM_Base_SetConfig+0x12c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d56:	d00f      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a43      	ldr	r2, [pc, #268]	@ (8003e68 <TIM_Base_SetConfig+0x130>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a42      	ldr	r2, [pc, #264]	@ (8003e6c <TIM_Base_SetConfig+0x134>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a41      	ldr	r2, [pc, #260]	@ (8003e70 <TIM_Base_SetConfig+0x138>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a40      	ldr	r2, [pc, #256]	@ (8003e74 <TIM_Base_SetConfig+0x13c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a35      	ldr	r2, [pc, #212]	@ (8003e64 <TIM_Base_SetConfig+0x12c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d98:	d01b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a32      	ldr	r2, [pc, #200]	@ (8003e68 <TIM_Base_SetConfig+0x130>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d017      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a31      	ldr	r2, [pc, #196]	@ (8003e6c <TIM_Base_SetConfig+0x134>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a30      	ldr	r2, [pc, #192]	@ (8003e70 <TIM_Base_SetConfig+0x138>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2f      	ldr	r2, [pc, #188]	@ (8003e74 <TIM_Base_SetConfig+0x13c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003e78 <TIM_Base_SetConfig+0x140>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e7c <TIM_Base_SetConfig+0x144>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003e80 <TIM_Base_SetConfig+0x148>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a16      	ldr	r2, [pc, #88]	@ (8003e64 <TIM_Base_SetConfig+0x12c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00f      	beq.n	8003e30 <TIM_Base_SetConfig+0xf8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <TIM_Base_SetConfig+0x13c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <TIM_Base_SetConfig+0xf8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <TIM_Base_SetConfig+0x140>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <TIM_Base_SetConfig+0xf8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a16      	ldr	r2, [pc, #88]	@ (8003e7c <TIM_Base_SetConfig+0x144>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_Base_SetConfig+0xf8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a15      	ldr	r2, [pc, #84]	@ (8003e80 <TIM_Base_SetConfig+0x148>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d103      	bne.n	8003e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f023 0201 	bic.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
  }
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 0201 	bic.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 0302 	bic.w	r3, r3, #2
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	@ (8003f90 <TIM_OC1_SetConfig+0x10c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00f      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f94 <TIM_OC1_SetConfig+0x110>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <TIM_OC1_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <TIM_OC1_SetConfig+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <TIM_OC1_SetConfig+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10c      	bne.n	8003f1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0308 	bic.w	r3, r3, #8
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <TIM_OC1_SetConfig+0x10c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <TIM_OC1_SetConfig+0x110>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a19      	ldr	r2, [pc, #100]	@ (8003f98 <TIM_OC1_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a18      	ldr	r2, [pc, #96]	@ (8003f9c <TIM_OC1_SetConfig+0x118>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a17      	ldr	r2, [pc, #92]	@ (8003fa0 <TIM_OC1_SetConfig+0x11c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0210 	bic.w	r2, r3, #16
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0320 	bic.w	r3, r3, #32
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a28      	ldr	r2, [pc, #160]	@ (80040a4 <TIM_OC2_SetConfig+0x100>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC2_SetConfig+0x6c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <TIM_OC2_SetConfig+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10d      	bne.n	800402c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <TIM_OC2_SetConfig+0x100>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00f      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <TIM_OC2_SetConfig+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00b      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <TIM_OC2_SetConfig+0x108>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <TIM_OC2_SetConfig+0x10c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <TIM_OC2_SetConfig+0x110>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d113      	bne.n	800407c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800405a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40013400 	.word	0x40013400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a27      	ldr	r2, [pc, #156]	@ (80041b4 <TIM_OC3_SetConfig+0xfc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_OC3_SetConfig+0x6a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <TIM_OC3_SetConfig+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10d      	bne.n	800413e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800413c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <TIM_OC3_SetConfig+0xfc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <TIM_OC3_SetConfig+0x100>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1a      	ldr	r2, [pc, #104]	@ (80041bc <TIM_OC3_SetConfig+0x104>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <TIM_OC3_SetConfig+0x108>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <TIM_OC3_SetConfig+0x10c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d113      	bne.n	800418e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40013400 	.word	0x40013400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <TIM_OC4_SetConfig+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <TIM_OC4_SetConfig+0xc4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a16      	ldr	r2, [pc, #88]	@ (8004290 <TIM_OC4_SetConfig+0xc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a15      	ldr	r2, [pc, #84]	@ (8004294 <TIM_OC4_SetConfig+0xcc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <TIM_OC4_SetConfig+0xd0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d109      	bne.n	8004260 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a17      	ldr	r2, [pc, #92]	@ (8004350 <TIM_OC5_SetConfig+0xb4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a16      	ldr	r2, [pc, #88]	@ (8004354 <TIM_OC5_SetConfig+0xb8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <TIM_OC5_SetConfig+0xbc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <TIM_OC5_SetConfig+0xc0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <TIM_OC5_SetConfig+0xc4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d109      	bne.n	800432a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	051b      	lsls	r3, r3, #20
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a18      	ldr	r2, [pc, #96]	@ (800441c <TIM_OC6_SetConfig+0xb8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a17      	ldr	r2, [pc, #92]	@ (8004420 <TIM_OC6_SetConfig+0xbc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <TIM_OC6_SetConfig+0xc0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <TIM_OC6_SetConfig+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a14      	ldr	r2, [pc, #80]	@ (800442c <TIM_OC6_SetConfig+0xc8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40013400 	.word	0x40013400
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2201      	movs	r2, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	43db      	mvns	r3, r3
 8004452:	401a      	ands	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e068      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01d      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d018      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1a      	ldr	r2, [pc, #104]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a13      	ldr	r2, [pc, #76]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e040      	b.n	8004620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fcc0 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	@ 0x24
 80045b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fae0 	bl	8004b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f825 	bl	8004628 <UART_SetConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e01b      	b.n	8004620 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fb5f 	bl	8004cdc <UART_CheckIdleState>
 800461e:	4603      	mov	r3, r0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b08a      	sub	sp, #40	@ 0x28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	431a      	orrs	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	4313      	orrs	r3, r2
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4ba4      	ldr	r3, [pc, #656]	@ (80048e8 <UART_SetConfig+0x2c0>)
 8004658:	4013      	ands	r3, r2
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004660:	430b      	orrs	r3, r1
 8004662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a99      	ldr	r2, [pc, #612]	@ (80048ec <UART_SetConfig+0x2c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004690:	4313      	orrs	r3, r2
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a90      	ldr	r2, [pc, #576]	@ (80048f0 <UART_SetConfig+0x2c8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d126      	bne.n	8004700 <UART_SetConfig+0xd8>
 80046b2:	4b90      	ldr	r3, [pc, #576]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d81b      	bhi.n	80046f8 <UART_SetConfig+0xd0>
 80046c0:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <UART_SetConfig+0xa0>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046d9 	.word	0x080046d9
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e116      	b.n	800490e <UART_SetConfig+0x2e6>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e112      	b.n	800490e <UART_SetConfig+0x2e6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ee:	e10e      	b.n	800490e <UART_SetConfig+0x2e6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f6:	e10a      	b.n	800490e <UART_SetConfig+0x2e6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e106      	b.n	800490e <UART_SetConfig+0x2e6>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a7c      	ldr	r2, [pc, #496]	@ (80048f8 <UART_SetConfig+0x2d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d138      	bne.n	800477c <UART_SetConfig+0x154>
 800470a:	4b7a      	ldr	r3, [pc, #488]	@ (80048f4 <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d82d      	bhi.n	8004774 <UART_SetConfig+0x14c>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0xf8>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004755 	.word	0x08004755
 8004724:	08004775 	.word	0x08004775
 8004728:	08004775 	.word	0x08004775
 800472c:	08004775 	.word	0x08004775
 8004730:	08004765 	.word	0x08004765
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
 800473c:	08004775 	.word	0x08004775
 8004740:	0800475d 	.word	0x0800475d
 8004744:	08004775 	.word	0x08004775
 8004748:	08004775 	.word	0x08004775
 800474c:	08004775 	.word	0x08004775
 8004750:	0800476d 	.word	0x0800476d
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e0d8      	b.n	800490e <UART_SetConfig+0x2e6>
 800475c:	2302      	movs	r3, #2
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e0d4      	b.n	800490e <UART_SetConfig+0x2e6>
 8004764:	2304      	movs	r3, #4
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e0d0      	b.n	800490e <UART_SetConfig+0x2e6>
 800476c:	2308      	movs	r3, #8
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004772:	e0cc      	b.n	800490e <UART_SetConfig+0x2e6>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e0c8      	b.n	800490e <UART_SetConfig+0x2e6>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a5e      	ldr	r2, [pc, #376]	@ (80048fc <UART_SetConfig+0x2d4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d125      	bne.n	80047d2 <UART_SetConfig+0x1aa>
 8004786:	4b5b      	ldr	r3, [pc, #364]	@ (80048f4 <UART_SetConfig+0x2cc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004790:	2b30      	cmp	r3, #48	@ 0x30
 8004792:	d016      	beq.n	80047c2 <UART_SetConfig+0x19a>
 8004794:	2b30      	cmp	r3, #48	@ 0x30
 8004796:	d818      	bhi.n	80047ca <UART_SetConfig+0x1a2>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d00a      	beq.n	80047b2 <UART_SetConfig+0x18a>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d814      	bhi.n	80047ca <UART_SetConfig+0x1a2>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <UART_SetConfig+0x182>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d008      	beq.n	80047ba <UART_SetConfig+0x192>
 80047a8:	e00f      	b.n	80047ca <UART_SetConfig+0x1a2>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b0:	e0ad      	b.n	800490e <UART_SetConfig+0x2e6>
 80047b2:	2302      	movs	r3, #2
 80047b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b8:	e0a9      	b.n	800490e <UART_SetConfig+0x2e6>
 80047ba:	2304      	movs	r3, #4
 80047bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c0:	e0a5      	b.n	800490e <UART_SetConfig+0x2e6>
 80047c2:	2308      	movs	r3, #8
 80047c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c8:	e0a1      	b.n	800490e <UART_SetConfig+0x2e6>
 80047ca:	2310      	movs	r3, #16
 80047cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d0:	e09d      	b.n	800490e <UART_SetConfig+0x2e6>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004900 <UART_SetConfig+0x2d8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d125      	bne.n	8004828 <UART_SetConfig+0x200>
 80047dc:	4b45      	ldr	r3, [pc, #276]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e8:	d016      	beq.n	8004818 <UART_SetConfig+0x1f0>
 80047ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80047ec:	d818      	bhi.n	8004820 <UART_SetConfig+0x1f8>
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d00a      	beq.n	8004808 <UART_SetConfig+0x1e0>
 80047f2:	2b80      	cmp	r3, #128	@ 0x80
 80047f4:	d814      	bhi.n	8004820 <UART_SetConfig+0x1f8>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <UART_SetConfig+0x1d8>
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d008      	beq.n	8004810 <UART_SetConfig+0x1e8>
 80047fe:	e00f      	b.n	8004820 <UART_SetConfig+0x1f8>
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004806:	e082      	b.n	800490e <UART_SetConfig+0x2e6>
 8004808:	2302      	movs	r3, #2
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480e:	e07e      	b.n	800490e <UART_SetConfig+0x2e6>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004816:	e07a      	b.n	800490e <UART_SetConfig+0x2e6>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e076      	b.n	800490e <UART_SetConfig+0x2e6>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e072      	b.n	800490e <UART_SetConfig+0x2e6>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a35      	ldr	r2, [pc, #212]	@ (8004904 <UART_SetConfig+0x2dc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d12a      	bne.n	8004888 <UART_SetConfig+0x260>
 8004832:	4b30      	ldr	r3, [pc, #192]	@ (80048f4 <UART_SetConfig+0x2cc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004840:	d01a      	beq.n	8004878 <UART_SetConfig+0x250>
 8004842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004846:	d81b      	bhi.n	8004880 <UART_SetConfig+0x258>
 8004848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800484c:	d00c      	beq.n	8004868 <UART_SetConfig+0x240>
 800484e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004852:	d815      	bhi.n	8004880 <UART_SetConfig+0x258>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <UART_SetConfig+0x238>
 8004858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485c:	d008      	beq.n	8004870 <UART_SetConfig+0x248>
 800485e:	e00f      	b.n	8004880 <UART_SetConfig+0x258>
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e052      	b.n	800490e <UART_SetConfig+0x2e6>
 8004868:	2302      	movs	r3, #2
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e04e      	b.n	800490e <UART_SetConfig+0x2e6>
 8004870:	2304      	movs	r3, #4
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e04a      	b.n	800490e <UART_SetConfig+0x2e6>
 8004878:	2308      	movs	r3, #8
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e046      	b.n	800490e <UART_SetConfig+0x2e6>
 8004880:	2310      	movs	r3, #16
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004886:	e042      	b.n	800490e <UART_SetConfig+0x2e6>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <UART_SetConfig+0x2c4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d13a      	bne.n	8004908 <UART_SetConfig+0x2e0>
 8004892:	4b18      	ldr	r3, [pc, #96]	@ (80048f4 <UART_SetConfig+0x2cc>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800489c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048a0:	d01a      	beq.n	80048d8 <UART_SetConfig+0x2b0>
 80048a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048a6:	d81b      	bhi.n	80048e0 <UART_SetConfig+0x2b8>
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ac:	d00c      	beq.n	80048c8 <UART_SetConfig+0x2a0>
 80048ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b2:	d815      	bhi.n	80048e0 <UART_SetConfig+0x2b8>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <UART_SetConfig+0x298>
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048bc:	d008      	beq.n	80048d0 <UART_SetConfig+0x2a8>
 80048be:	e00f      	b.n	80048e0 <UART_SetConfig+0x2b8>
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e022      	b.n	800490e <UART_SetConfig+0x2e6>
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e01e      	b.n	800490e <UART_SetConfig+0x2e6>
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e01a      	b.n	800490e <UART_SetConfig+0x2e6>
 80048d8:	2308      	movs	r3, #8
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e016      	b.n	800490e <UART_SetConfig+0x2e6>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e6:	e012      	b.n	800490e <UART_SetConfig+0x2e6>
 80048e8:	efff69f3 	.word	0xefff69f3
 80048ec:	40008000 	.word	0x40008000
 80048f0:	40013800 	.word	0x40013800
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40004400 	.word	0x40004400
 80048fc:	40004800 	.word	0x40004800
 8004900:	40004c00 	.word	0x40004c00
 8004904:	40005000 	.word	0x40005000
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a9f      	ldr	r2, [pc, #636]	@ (8004b90 <UART_SetConfig+0x568>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d17a      	bne.n	8004a0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004918:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800491c:	2b08      	cmp	r3, #8
 800491e:	d824      	bhi.n	800496a <UART_SetConfig+0x342>
 8004920:	a201      	add	r2, pc, #4	@ (adr r2, 8004928 <UART_SetConfig+0x300>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	0800494d 	.word	0x0800494d
 800492c:	0800496b 	.word	0x0800496b
 8004930:	08004955 	.word	0x08004955
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800495b 	.word	0x0800495b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800496b 	.word	0x0800496b
 8004948:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fd feec 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8004950:	61f8      	str	r0, [r7, #28]
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b8f      	ldr	r3, [pc, #572]	@ (8004b94 <UART_SetConfig+0x56c>)
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fd fe4f 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800495e:	61f8      	str	r0, [r7, #28]
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80fb 	beq.w	8004b74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	429a      	cmp	r2, r3
 800498c:	d305      	bcc.n	800499a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049a0:	e0e8      	b.n	8004b74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2200      	movs	r2, #0
 80049a6:	461c      	mov	r4, r3
 80049a8:	4615      	mov	r5, r2
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	022b      	lsls	r3, r5, #8
 80049b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049b8:	0222      	lsls	r2, r4, #8
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	6849      	ldr	r1, [r1, #4]
 80049be:	0849      	lsrs	r1, r1, #1
 80049c0:	2000      	movs	r0, #0
 80049c2:	4688      	mov	r8, r1
 80049c4:	4681      	mov	r9, r0
 80049c6:	eb12 0a08 	adds.w	sl, r2, r8
 80049ca:	eb43 0b09 	adc.w	fp, r3, r9
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049dc:	4650      	mov	r0, sl
 80049de:	4659      	mov	r1, fp
 80049e0:	f7fb fbf2 	bl	80001c8 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049f2:	d308      	bcc.n	8004a06 <UART_SetConfig+0x3de>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fa:	d204      	bcs.n	8004a06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e0b6      	b.n	8004b74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a0c:	e0b2      	b.n	8004b74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a16:	d15e      	bne.n	8004ad6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d828      	bhi.n	8004a72 <UART_SetConfig+0x44a>
 8004a20:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x400>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a63 	.word	0x08004a63
 8004a3c:	08004a73 	.word	0x08004a73
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7fd fe6c 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8004a50:	61f8      	str	r0, [r7, #28]
        break;
 8004a52:	e014      	b.n	8004a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a54:	f7fd fe7e 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004a58:	61f8      	str	r0, [r7, #28]
        break;
 8004a5a:	e010      	b.n	8004a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b94 <UART_SetConfig+0x56c>)
 8004a5e:	61fb      	str	r3, [r7, #28]
        break;
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fd fdcb 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8004a66:	61f8      	str	r0, [r7, #28]
        break;
 8004a68:	e009      	b.n	8004a7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6e:	61fb      	str	r3, [r7, #28]
        break;
 8004a70:	e005      	b.n	8004a7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d077      	beq.n	8004b74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	005a      	lsls	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	441a      	add	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b0f      	cmp	r3, #15
 8004a9e:	d916      	bls.n	8004ace <UART_SetConfig+0x4a6>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa6:	d212      	bcs.n	8004ace <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f023 030f 	bic.w	r3, r3, #15
 8004ab0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	8afb      	ldrh	r3, [r7, #22]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	8afa      	ldrh	r2, [r7, #22]
 8004aca:	60da      	str	r2, [r3, #12]
 8004acc:	e052      	b.n	8004b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ad4:	e04e      	b.n	8004b74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d827      	bhi.n	8004b2e <UART_SetConfig+0x506>
 8004ade:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <UART_SetConfig+0x4bc>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fd fe0e 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	61f8      	str	r0, [r7, #28]
        break;
 8004b0e:	e014      	b.n	8004b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fd fe20 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004b14:	61f8      	str	r0, [r7, #28]
        break;
 8004b16:	e010      	b.n	8004b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b1e      	ldr	r3, [pc, #120]	@ (8004b94 <UART_SetConfig+0x56c>)
 8004b1a:	61fb      	str	r3, [r7, #28]
        break;
 8004b1c:	e00d      	b.n	8004b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fd fd6d 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8004b22:	61f8      	str	r0, [r7, #28]
        break;
 8004b24:	e009      	b.n	8004b3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2a:	61fb      	str	r3, [r7, #28]
        break;
 8004b2c:	e005      	b.n	8004b3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b38:	bf00      	nop
    }

    if (pclk != 0U)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d019      	beq.n	8004b74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085a      	lsrs	r2, r3, #1
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	441a      	add	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d909      	bls.n	8004b6e <UART_SetConfig+0x546>
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b60:	d205      	bcs.n	8004b6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e002      	b.n	8004b74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3728      	adds	r7, #40	@ 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8e:	bf00      	nop
 8004b90:	40008000 	.word	0x40008000
 8004b94:	00f42400 	.word	0x00f42400

08004b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01a      	beq.n	8004cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c96:	d10a      	bne.n	8004cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b098      	sub	sp, #96	@ 0x60
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cec:	f7fc fc6e 	bl	80015cc <HAL_GetTick>
 8004cf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d12e      	bne.n	8004d5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f88c 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e062      	b.n	8004e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d149      	bne.n	8004e00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f856 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	623b      	str	r3, [r7, #32]
   return(result);
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	69b9      	ldr	r1, [r7, #24]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	617b      	str	r3, [r7, #20]
   return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e011      	b.n	8004e24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3758      	adds	r7, #88	@ 0x58
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3c:	e04f      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d04b      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fc fbc1 	bl	80015cc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e04e      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d037      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b80      	cmp	r3, #128	@ 0x80
 8004e72:	d034      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d031      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d110      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f838 	bl	8004f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e029      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb8:	d111      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f81e 	bl	8004f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d0a0      	beq.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b095      	sub	sp, #84	@ 0x54
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d118      	bne.n	8004fae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fc2:	bf00      	nop
 8004fc4:	3754      	adds	r7, #84	@ 0x54
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <memset>:
 8004fce:	4402      	add	r2, r0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d100      	bne.n	8004fd8 <memset+0xa>
 8004fd6:	4770      	bx	lr
 8004fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fdc:	e7f9      	b.n	8004fd2 <memset+0x4>
	...

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 f826 	bl	8005044 <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	08007d28 	.word	0x08007d28
 800501c:	08007d28 	.word	0x08007d28
 8005020:	08007d28 	.word	0x08007d28
 8005024:	08007d2c 	.word	0x08007d2c

08005028 <memcpy>:
 8005028:	440a      	add	r2, r1
 800502a:	4291      	cmp	r1, r2
 800502c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005030:	d100      	bne.n	8005034 <memcpy+0xc>
 8005032:	4770      	bx	lr
 8005034:	b510      	push	{r4, lr}
 8005036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503e:	4291      	cmp	r1, r2
 8005040:	d1f9      	bne.n	8005036 <memcpy+0xe>
 8005042:	bd10      	pop	{r4, pc}

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
