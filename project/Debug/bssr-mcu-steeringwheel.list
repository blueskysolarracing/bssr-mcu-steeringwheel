
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000294c  08004ea8  08004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f4  080077f4  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077fc  080077fc  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007804  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ea4  20000010  08007814  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005eb4  08007814  00009eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012312  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002787  00000000  00000000  0001b352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0c  00000000  00000000  0001eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024392  00000000  00000000  0001f8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d6a  00000000  00000000  00043c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3279  00000000  00000000  000589a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004600  00000000  00000000  0013bc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e90 	.word	0x08004e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004e90 	.word	0x08004e90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b53      	ldr	r3, [pc, #332]	@ (8000658 <MX_GPIO_Init+0x164>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a52      	ldr	r2, [pc, #328]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b50      	ldr	r3, [pc, #320]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b4d      	ldr	r3, [pc, #308]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a4c      	ldr	r2, [pc, #304]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b4a      	ldr	r3, [pc, #296]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b47      	ldr	r3, [pc, #284]	@ (8000658 <MX_GPIO_Init+0x164>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a46      	ldr	r2, [pc, #280]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b44      	ldr	r3, [pc, #272]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b41      	ldr	r3, [pc, #260]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a40      	ldr	r2, [pc, #256]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <MX_GPIO_Init+0x164>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a3a      	ldr	r2, [pc, #232]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	4835      	ldr	r0, [pc, #212]	@ (800065c <MX_GPIO_Init+0x168>)
 8000588:	f001 fa06 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000592:	4833      	ldr	r0, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000594:	f001 fa00 	bl	8001998 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	4831      	ldr	r0, [pc, #196]	@ (8000664 <MX_GPIO_Init+0x170>)
 800059e:	f001 f9fb 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	482e      	ldr	r0, [pc, #184]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005a8:	f001 f9f6 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4827      	ldr	r0, [pc, #156]	@ (800065c <MX_GPIO_Init+0x168>)
 80005c0:	f001 f840 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4820      	ldr	r0, [pc, #128]	@ (800065c <MX_GPIO_Init+0x168>)
 80005dc:	f001 f832 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005f4:	f001 f826 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80005f8:	f640 4316 	movw	r3, #3094	@ 0xc16
 80005fc:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000612:	f001 f817 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x170>)
 800062e:	f001 f809 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_GPIO_Init+0x16c>)
 800064a:	f000 fffb 	bl	8001644 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400
 8000664:	48000c00 	.word	0x48000c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2180      	movs	r1, #128	@ 0x80
 8000670:	4830      	ldr	r0, [pc, #192]	@ (8000734 <main+0xcc>)
 8000672:	f001 f991 	bl	8001998 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fe8b 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f871 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f7ff ff39 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000682:	f000 f8c3 	bl	800080c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000686:	f000 f8fb 	bl	8000880 <MX_SPI3_Init>
  MX_TIM2_Init();
 800068a:	f000 fa13 	bl	8000ab4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800068e:	f000 fad3 	bl	8000c38 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fbff 	bl	8000e94 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000696:	f000 fa69 	bl	8000b6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 100;
 800069a:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <main+0xd0>)
 800069c:	2264      	movs	r2, #100	@ 0x64
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4826      	ldr	r0, [pc, #152]	@ (800073c <main+0xd4>)
 80006a4:	f003 f854 	bl	8003750 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 1000;
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <main+0xd0>)
 80006aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006b0:	2108      	movs	r1, #8
 80006b2:	4822      	ldr	r0, [pc, #136]	@ (800073c <main+0xd4>)
 80006b4:	f003 f84c 	bl	8003750 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 10000;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <main+0xd8>)
 80006ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006be:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4820      	ldr	r0, [pc, #128]	@ (8000744 <main+0xdc>)
 80006c4:	f003 f844 	bl	8003750 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 10000;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <main+0xd8>)
 80006ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006d0:	2108      	movs	r1, #8
 80006d2:	481c      	ldr	r0, [pc, #112]	@ (8000744 <main+0xdc>)
 80006d4:	f003 f83c 	bl	8003750 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <main+0xe0>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	@ (800074c <main+0xe4>)
 80006dc:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <main+0xe0>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <main+0xe8>)
 80006e2:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <main+0xe0>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0xe0>)
 80006ec:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <main+0xec>)
 80006ee:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <main+0xe0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <main+0xe0>)
 80006f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <main+0xcc>)
 80006fa:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <main+0xe0>)
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <main+0xe0>)
 8000704:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <main+0xcc>)
 8000706:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <main+0xe0>)
 800070a:	2210      	movs	r2, #16
 800070c:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <main+0xe0>)
 8000710:	4a11      	ldr	r2, [pc, #68]	@ (8000758 <main+0xf0>)
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <main+0xf4>)
 8000716:	881a      	ldrh	r2, [r3, #0]
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <main+0xe0>)
 800071a:	851a      	strh	r2, [r3, #40]	@ 0x28

	if (LS032B7DD02_Init(&ls032)) {
 800071c:	480a      	ldr	r0, [pc, #40]	@ (8000748 <main+0xe0>)
 800071e:	f000 fd38 	bl	8001192 <LS032B7DD02_Init>
		// TODO: Error Handle
	}

	LS032B7DD02_DrawLogo(&ls032);
 8000722:	4809      	ldr	r0, [pc, #36]	@ (8000748 <main+0xe0>)
 8000724:	f000 fdfe 	bl	8001324 <LS032B7DD02_DrawLogo>
	LS032B7DD02_Update(&ls032);
 8000728:	4807      	ldr	r0, [pc, #28]	@ (8000748 <main+0xe0>)
 800072a:	f000 fdb7 	bl	800129c <LS032B7DD02_Update>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	bf00      	nop
 8000730:	e7fd      	b.n	800072e <main+0xc6>
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400
 8000738:	40000800 	.word	0x40000800
 800073c:	20005ddc 	.word	0x20005ddc
 8000740:	40000400 	.word	0x40000400
 8000744:	20005d90 	.word	0x20005d90
 8000748:	2000002c 	.word	0x2000002c
 800074c:	20005ce0 	.word	0x20005ce0
 8000750:	48000c00 	.word	0x48000c00
 8000754:	20005d44 	.word	0x20005d44
 8000758:	20000058 	.word	0x20000058
 800075c:	20000000 	.word	0x20000000

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	@ 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2244      	movs	r2, #68	@ 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fb53 	bl	8004e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000782:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000786:	f001 f92d 	bl	80019e4 <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000790:	f000 f835 	bl	80007fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	2303      	movs	r3, #3
 80007a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007aa:	2308      	movs	r3, #8
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f966 	bl	8001a90 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f818 	bl	80007fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	2103      	movs	r1, #3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fd2e 	bl	8002248 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f2:	f000 f804 	bl	80007fe <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3758      	adds	r7, #88	@ 0x58
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000802:	b672      	cpsid	i
}
 8000804:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000806:	bf00      	nop
 8000808:	e7fd      	b.n	8000806 <Error_Handler+0x8>
	...

0800080c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000812:	4a1a      	ldr	r2, [pc, #104]	@ (800087c <MX_SPI1_Init+0x70>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_SPI1_Init+0x6c>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000824:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_SPI1_Init+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_SPI1_Init+0x6c>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_SPI1_Init+0x6c>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_SPI1_Init+0x6c>)
 8000864:	f002 fb9e 	bl	8002fa4 <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800086e:	f7ff ffc6 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20005c7c 	.word	0x20005c7c
 800087c:	40013000 	.word	0x40013000

08000880 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <MX_SPI3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000894:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000898:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800089c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008b8:	2210      	movs	r2, #16
 80008ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008dc:	2208      	movs	r2, #8
 80008de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008e2:	f002 fb5f 	bl	8002fa4 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 80008ec:	f7ff ff87 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20005ce0 	.word	0x20005ce0
 80008f8:	40003c00 	.word	0x40003c00

080008fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2f      	ldr	r2, [pc, #188]	@ (80009d8 <HAL_SPI_MspInit+0xdc>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d129      	bne.n	8000972 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	4a2e      	ldr	r2, [pc, #184]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000928:	6613      	str	r3, [r2, #96]	@ 0x60
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800094e:	23e0      	movs	r3, #224	@ 0xe0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095e:	2305      	movs	r3, #5
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096c:	f000 fe6a 	bl	8001644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000970:	e02d      	b.n	80009ce <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1a      	ldr	r2, [pc, #104]	@ (80009e0 <HAL_SPI_MspInit+0xe4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d128      	bne.n	80009ce <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000980:	4a16      	ldr	r2, [pc, #88]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000986:	6593      	str	r3, [r2, #88]	@ 0x58
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_SPI_MspInit+0xe0>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80009ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	2306      	movs	r3, #6
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <HAL_SPI_MspInit+0xe8>)
 80009ca:	f000 fe3b 	bl	8001644 <HAL_GPIO_Init>
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013000 	.word	0x40013000
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40003c00 	.word	0x40003c00
 80009e4:	48000800 	.word	0x48000800

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 fcd7 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000ae2:	2230      	movs	r2, #48	@ 0x30
 8000ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000aee:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <MX_TIM2_Init+0xb0>)
 8000af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000afe:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000b00:	f002 fdce 	bl	80036a0 <HAL_TIM_PWM_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b0a:	f7ff fe78 	bl	80007fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4810      	ldr	r0, [pc, #64]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000b1e:	f003 fbd3 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b28:	f7ff fe69 	bl	80007fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2c:	2360      	movs	r3, #96	@ 0x60
 8000b2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <MX_TIM2_Init+0xb4>)
 8000b32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000b44:	f002 ff0a 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b4e:	f7ff fe56 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_TIM2_Init+0xac>)
 8000b54:	f000 f91c 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20005d44 	.word	0x20005d44
 8000b64:	0061a7ff 	.word	0x0061a7ff
 8000b68:	0030d400 	.word	0x0030d400

08000b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000b92:	4a28      	ldr	r2, [pc, #160]	@ (8000c34 <MX_TIM3_Init+0xc8>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b96:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000ba4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb6:	481e      	ldr	r0, [pc, #120]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000bb8:	f002 fd72 	bl	80036a0 <HAL_TIM_PWM_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bc2:	f7ff fe1c 	bl	80007fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4816      	ldr	r0, [pc, #88]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000bd6:	f003 fb77 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000be0:	f7ff fe0d 	bl	80007fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be4:	2360      	movs	r3, #96	@ 0x60
 8000be6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000be8:	2332      	movs	r3, #50	@ 0x32
 8000bea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000bfc:	f002 feae 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c06:	f7ff fdfa 	bl	80007fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000c12:	f002 fea3 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c1c:	f7ff fdef 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <MX_TIM3_Init+0xc4>)
 8000c22:	f000 f8b5 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20005d90 	.word	0x20005d90
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c5e:	4a28      	ldr	r2, [pc, #160]	@ (8000d00 <MX_TIM4_Init+0xc8>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c70:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c82:	481e      	ldr	r0, [pc, #120]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000c84:	f002 fd0c 	bl	80036a0 <HAL_TIM_PWM_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000c8e:	f7ff fdb6 	bl	80007fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000ca2:	f003 fb11 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000cac:	f7ff fda7 	bl	80007fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb0:	2360      	movs	r3, #96	@ 0x60
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000cc8:	f002 fe48 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000cd2:	f7ff fd94 	bl	80007fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2208      	movs	r2, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000cde:	f002 fe3d 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ce8:	f7ff fd89 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <MX_TIM4_Init+0xc4>)
 8000cee:	f000 f84f 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20005ddc 	.word	0x20005ddc
 8000d00:	40000800 	.word	0x40000800

08000d04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d10c      	bne.n	8000d30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d2e:	e022      	b.n	8000d76 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10c      	bne.n	8000d54 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
}
 8000d52:	e010      	b.n	8000d76 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x88>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10b      	bne.n	8000d76 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x80>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	bf00      	nop
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40000400 	.word	0x40000400
 8000d8c:	40000800 	.word	0x40000800

08000d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db0:	d11c      	bne.n	8000dec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4827      	ldr	r0, [pc, #156]	@ (8000e84 <HAL_TIM_MspPostInit+0xf4>)
 8000de6:	f000 fc2d 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dea:	e044      	b.n	8000e76 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_TIM_MspPostInit+0xf8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11d      	bne.n	8000e32 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8000e0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e20:	2302      	movs	r3, #2
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <HAL_TIM_MspPostInit+0xfc>)
 8000e2c:	f000 fc0a 	bl	8001644 <HAL_GPIO_Init>
}
 8000e30:	e021      	b.n	8000e76 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <HAL_TIM_MspPostInit+0x100>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d11c      	bne.n	8000e76 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <HAL_TIM_MspPostInit+0xf0>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8000e54:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e66:	2302      	movs	r3, #2
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <HAL_TIM_MspPostInit+0xf4>)
 8000e72:	f000 fbe7 	bl	8001644 <HAL_GPIO_Init>
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	40000400 	.word	0x40000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	40000800 	.word	0x40000800

08000e94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000e9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ef0 <MX_USART2_UART_Init+0x5c>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_USART2_UART_Init+0x58>)
 8000ed8:	f003 fa7e 	bl	80043d8 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f7ff fc8c 	bl	80007fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20005e28 	.word	0x20005e28
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0aa      	sub	sp, #168	@ 0xa8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2284      	movs	r2, #132	@ 0x84
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 ff80 	bl	8004e1a <memset>
  if(uartHandle->Instance==USART2)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <HAL_UART_MspInit+0xb0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13b      	bne.n	8000f9c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fbab 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f3c:	f7ff fc5f 	bl	80007fe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f70:	230c      	movs	r3, #12
 8000f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f000 fb54 	bl	8001644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	37a8      	adds	r7, #168	@ 0xa8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40021000 	.word	0x40021000

08000fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb0:	f7ff fd6e 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 ff27 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fde:	f7ff fb43 	bl	8000668 <main>

08000fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff0:	08007804 	.word	0x08007804
  ldr r2, =_sbss
 8000ff4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ff8:	20005eb4 	.word	0x20005eb4

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>

08000ffe <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e003      	b.n	8001014 <delay_us+0x16>
		asm("NOP");
 800100c:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	019b      	lsls	r3, r3, #6
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3f6      	bcc.n	800100c <delay_us+0xe>
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 800103e:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25a      	sxtb	r2, r3
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	b25b      	sxtb	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	b2da      	uxtb	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25a      	sxtb	r2, r3
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	105b      	asrs	r3, r3, #1
 800106e:	b25b      	sxtb	r3, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b25a      	sxtb	r2, r3
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001094:	b25b      	sxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b25a      	sxtb	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25a      	sxtb	r2, r3
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	105b      	asrs	r3, r3, #1
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b25a      	sxtb	r2, r3
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	10db      	asrs	r3, r3, #3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	b25b      	sxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b25a      	sxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b25a      	sxtb	r2, r3
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	115b      	asrs	r3, r3, #5
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b25a      	sxtb	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25a      	sxtb	r2, r3
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	11db      	asrs	r3, r3, #7
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b25a      	sxtb	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25a      	sxtb	r2, r3
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	125b      	asrs	r3, r3, #9
 8001172:	b25b      	sxtb	r3, r3
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LS032B7DD02_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Init(LS032B7DD02_HandleTypeDef *ls032) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	737b      	strb	r3, [r7, #13]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a6:	461a      	mov	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	f003 fe36 	bl	8004e1a <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	81fb      	strh	r3, [r7, #14]
 80011b2:	e00e      	b.n	80011d2 <LS032B7DD02_Init+0x40>
		// Fill in addresing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	89fa      	ldrh	r2, [r7, #14]
 80011ba:	212c      	movs	r1, #44	@ 0x2c
 80011bc:	fb01 f202 	mul.w	r2, r1, r2
 80011c0:	441a      	add	r2, r3
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff30 	bl	800102c <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	3301      	adds	r3, #1
 80011d0:	81fb      	strh	r3, [r7, #14]
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80011d8:	d3ec      	bcc.n	80011b4 <LS032B7DD02_Init+0x22>
	}

	delay_us(30);
 80011da:	201e      	movs	r0, #30
 80011dc:	f7ff ff0f 	bl	8000ffe <delay_us>
	// Need to clear twice for some reason
	LS032B7DD02_Wipe(ls032);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f86c 	bl	80012be <LS032B7DD02_Wipe>
	LS032B7DD02_Wipe(ls032);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f869 	bl	80012be <LS032B7DD02_Wipe>
	delay_us(30);
 80011ec:	201e      	movs	r0, #30
 80011ee:	f7ff ff06 	bl	8000ffe <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69d8      	ldr	r0, [r3, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8c1b      	ldrh	r3, [r3, #32]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	f000 fbcb 	bl	8001998 <HAL_GPIO_WritePin>
	delay_us(30);
 8001202:	201e      	movs	r0, #30
 8001204:	f7ff fefb 	bl	8000ffe <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	8a1b      	ldrh	r3, [r3, #16]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f002 fa9c 	bl	8003750 <HAL_TIM_PWM_Start>
	delay_us(30);
 8001218:	201e      	movs	r0, #30
 800121a:	f7ff fef0 	bl	8000ffe <delay_us>
	return SUCCESS;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LS032B7DD02_Send>:

uint8_t LS032B7DD02_Send(LS032B7DD02_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6858      	ldr	r0, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	891b      	ldrh	r3, [r3, #8]
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	f000 fba7 	bl	8001998 <HAL_GPIO_WritePin>
	delay_us(3);
 800124a:	2003      	movs	r0, #3
 800124c:	f7ff fed7 	bl	8000ffe <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	2364      	movs	r3, #100	@ 0x64
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	f001 ff46 	bl	80030ea <HAL_SPI_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fecb 	bl	8000ffe <delay_us>
	if (ret) {
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <LS032B7DD02_Send+0x5a>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6858      	ldr	r0, [r3, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	891b      	ldrh	r3, [r3, #8]
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	f000 fb8d 	bl	8001998 <HAL_GPIO_WritePin>
		return ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e008      	b.n	8001294 <LS032B7DD02_Send+0x6c>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6858      	ldr	r0, [r3, #4]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	891b      	ldrh	r3, [r3, #8]
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	f000 fb83 	bl	8001998 <HAL_GPIO_WritePin>

	return SUCCESS;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <LS032B7DD02_Update>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_Update(LS032B7DD02_HandleTypeDef *ls032) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	// Push VRAM to LCD Mem.
	// Todo: Make this a DMA TX
	return LS032B7DD02_Send(ls032, ls032->vram, ls032->vram_len);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ac:	461a      	mov	r2, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffba 	bl	8001228 <LS032B7DD02_Send>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <LS032B7DD02_Wipe>:

uint8_t LS032B7DD02_Wipe(LS032B7DD02_HandleTypeDef *ls032) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 80012c6:	2320      	movs	r3, #32
 80012c8:	81bb      	strh	r3, [r7, #12]
	return LS032B7DD02_Send(ls032, clear_cmd, 2);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2202      	movs	r2, #2
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa8 	bl	8001228 <LS032B7DD02_Send>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <LS032B7DD02_Clear>:

uint8_t LS032B7DD02_Clear(LS032B7DD02_HandleTypeDef *ls032) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	81fb      	strh	r3, [r7, #14]
 80012ee:	e00f      	b.n	8001310 <LS032B7DD02_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	212c      	movs	r1, #44	@ 0x2c
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	3302      	adds	r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	222a      	movs	r2, #42	@ 0x2a
 8001302:	21ff      	movs	r1, #255	@ 0xff
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fd88 	bl	8004e1a <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	3301      	adds	r3, #1
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001316:	d3eb      	bcc.n	80012f0 <LS032B7DD02_Clear+0xe>
	}

	return SUCCESS;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <LS032B7DD02_DrawLogo>:
}

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032B7DD02_DrawLogo(LS032B7DD02_HandleTypeDef *ls032) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	LS032B7DD02_Clear(ls032);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffd8 	bl	80012e2 <LS032B7DD02_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001332:	2312      	movs	r3, #18
 8001334:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001336:	230a      	movs	r3, #10
 8001338:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 800133a:	2300      	movs	r3, #0
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	e01c      	b.n	800137a <LS032B7DD02_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001344:	89f9      	ldrh	r1, [r7, #14]
 8001346:	89bb      	ldrh	r3, [r7, #12]
 8001348:	440b      	add	r3, r1
 800134a:	212c      	movs	r1, #44	@ 0x2c
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4619      	mov	r1, r3
 8001352:	897b      	ldrh	r3, [r7, #10]
 8001354:	440b      	add	r3, r1
 8001356:	3302      	adds	r3, #2
 8001358:	18d0      	adds	r0, r2, r3
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <LS032B7DD02_DrawLogo+0x68>)
 800136a:	4413      	add	r3, r2
 800136c:	2215      	movs	r2, #21
 800136e:	4619      	mov	r1, r3
 8001370:	f003 fd80 	bl	8004e74 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	3301      	adds	r3, #1
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001380:	d3de      	bcc.n	8001340 <LS032B7DD02_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08004ef0 	.word	0x08004ef0

08001390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139a:	2003      	movs	r0, #3
 800139c:	f000 f91e 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a0:	200f      	movs	r0, #15
 80013a2:	f000 f80d 	bl	80013c0 <HAL_InitTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	e001      	b.n	80013b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b2:	f7ff fb19 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_InitTick+0x70>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_InitTick+0x6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f91d 	bl	800162a <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d809      	bhi.n	8001410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f8f5 	bl	80015f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001408:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <HAL_InitTick+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e007      	b.n	8001420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e004      	b.n	8001420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e001      	b.n	8001420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000004 	.word	0x20000004
 8001434:	20000008 	.word	0x20000008

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20005eb0 	.word	0x20005eb0

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20005eb0 	.word	0x20005eb0

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff47 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff5c 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff8e 	bl	8001530 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffb0 	bl	8001598 <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	e17f      	b.n	8001954 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8171 	beq.w	800194e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d005      	beq.n	8001684 <HAL_GPIO_Init+0x40>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d130      	bne.n	80016e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ba:	2201      	movs	r2, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0201 	and.w	r2, r3, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d118      	bne.n	8001724 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b03      	cmp	r3, #3
 800172e:	d017      	beq.n	8001760 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80ac 	beq.w	800194e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <HAL_GPIO_Init+0x330>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001974 <HAL_GPIO_Init+0x330>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6613      	str	r3, [r2, #96]	@ 0x60
 8001802:	4b5c      	ldr	r3, [pc, #368]	@ (8001974 <HAL_GPIO_Init+0x330>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800180e:	4a5a      	ldr	r2, [pc, #360]	@ (8001978 <HAL_GPIO_Init+0x334>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001838:	d025      	beq.n	8001886 <HAL_GPIO_Init+0x242>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4f      	ldr	r2, [pc, #316]	@ (800197c <HAL_GPIO_Init+0x338>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x23e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <HAL_GPIO_Init+0x33c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x23a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4d      	ldr	r2, [pc, #308]	@ (8001984 <HAL_GPIO_Init+0x340>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x236>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <HAL_GPIO_Init+0x344>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x232>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4b      	ldr	r2, [pc, #300]	@ (800198c <HAL_GPIO_Init+0x348>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x22e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4a      	ldr	r2, [pc, #296]	@ (8001990 <HAL_GPIO_Init+0x34c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x22a>
 800186a:	2306      	movs	r3, #6
 800186c:	e00c      	b.n	8001888 <HAL_GPIO_Init+0x244>
 800186e:	2307      	movs	r3, #7
 8001870:	e00a      	b.n	8001888 <HAL_GPIO_Init+0x244>
 8001872:	2305      	movs	r3, #5
 8001874:	e008      	b.n	8001888 <HAL_GPIO_Init+0x244>
 8001876:	2304      	movs	r3, #4
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x244>
 800187a:	2303      	movs	r3, #3
 800187c:	e004      	b.n	8001888 <HAL_GPIO_Init+0x244>
 800187e:	2302      	movs	r3, #2
 8001880:	e002      	b.n	8001888 <HAL_GPIO_Init+0x244>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x244>
 8001886:	2300      	movs	r3, #0
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4093      	lsls	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001898:	4937      	ldr	r1, [pc, #220]	@ (8001978 <HAL_GPIO_Init+0x334>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_GPIO_Init+0x350>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ca:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <HAL_GPIO_Init+0x350>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <HAL_GPIO_Init+0x350>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f4:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <HAL_GPIO_Init+0x350>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_GPIO_Init+0x350>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191e:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_GPIO_Init+0x350>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_GPIO_Init+0x350>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001948:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <HAL_GPIO_Init+0x350>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae78 	bne.w	8001654 <HAL_GPIO_Init+0x10>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	48001800 	.word	0x48001800
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019f2:	d130      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a00:	d038      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2232      	movs	r2, #50	@ 0x32
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9b      	lsrs	r3, r3, #18
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	e002      	b.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3c:	d102      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f2      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a50:	d110      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e00f      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a62:	d007      	beq.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a6c:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e3ca      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b97      	ldr	r3, [pc, #604]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b94      	ldr	r3, [pc, #592]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80e4 	beq.w	8001c8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_RCC_OscConfig+0x4a>
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	f040 808b 	bne.w	8001be8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	f040 8087 	bne.w	8001be8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e3a2      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_RCC_OscConfig+0x7c>
 8001b02:	4b7f      	ldr	r3, [pc, #508]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_OscConfig+0x88>
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d223      	bcs.n	8001b64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fd53 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e383      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a72      	ldr	r2, [pc, #456]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	496d      	ldr	r1, [pc, #436]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4968      	ldr	r1, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e025      	b.n	8001bb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b63      	ldr	r3, [pc, #396]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4960      	ldr	r1, [pc, #384]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	4b5f      	ldr	r3, [pc, #380]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	495b      	ldr	r1, [pc, #364]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fd13 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e343      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb0:	f000 fc4a 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	4950      	ldr	r1, [pc, #320]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d08 <HAL_RCC_OscConfig+0x278>)
 8001bce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fbf3 	bl	80013c0 <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d052      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	e327      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d032      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bf0:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc30 	bl	8001460 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc2c 	bl	8001460 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e310      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c16:	4b3a      	ldr	r3, [pc, #232]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c22:	4b37      	ldr	r3, [pc, #220]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a36      	ldr	r2, [pc, #216]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b34      	ldr	r3, [pc, #208]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4931      	ldr	r1, [pc, #196]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	492c      	ldr	r1, [pc, #176]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e01a      	b.n	8001c8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fbfd 	bl	8001460 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fbf9 	bl	8001460 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2dd      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x1da>
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d074      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x21a>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d064      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d160      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e2ba      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x24a>
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e026      	b.n	8001d28 <HAL_RCC_OscConfig+0x298>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce2:	d115      	bne.n	8001d10 <HAL_RCC_OscConfig+0x280>
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a02      	ldr	r2, [pc, #8]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x298>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08004ea8 	.word	0x08004ea8
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	4ba0      	ldr	r3, [pc, #640]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a9f      	ldr	r2, [pc, #636]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a9c      	ldr	r2, [pc, #624]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb96 	bl	8001460 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fb92 	bl	8001460 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e276      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4b92      	ldr	r3, [pc, #584]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2a8>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb82 	bl	8001460 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fb7e 	bl	8001460 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	@ 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e262      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2d0>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d060      	beq.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x310>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d119      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x328>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e23f      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b76      	ldr	r3, [pc, #472]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4973      	ldr	r1, [pc, #460]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	e040      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6e      	ldr	r2, [pc, #440]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb3d 	bl	8001460 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fb39 	bl	8001460 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e21d      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfc:	4b65      	ldr	r3, [pc, #404]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	495f      	ldr	r1, [pc, #380]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5c      	ldr	r2, [pc, #368]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb19 	bl	8001460 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fb15 	bl	8001460 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1f9      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03c      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e64:	4b4b      	ldr	r3, [pc, #300]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff faf4 	bl	8001460 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff faf0 	bl	8001460 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1d4      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ef      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3ec>
 8001e9c:	e01b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff fad7 	bl	8001460 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fad3 	bl	8001460 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1b7      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ef      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a6 	beq.w	8002030 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a26      	ldr	r2, [pc, #152]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d118      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fa9a 	bl	8001460 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7ff fa96 	bl	8001460 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e17a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_RCC_OscConfig+0x508>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d8>
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f66:	e029      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d115      	bne.n	8001f9c <HAL_RCC_OscConfig+0x50c>
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a03      	ldr	r2, [pc, #12]	@ (8001f94 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	4a9b      	ldr	r2, [pc, #620]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fac:	4b98      	ldr	r3, [pc, #608]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	4a97      	ldr	r2, [pc, #604]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d016      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fa4c 	bl	8001460 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fa48 	bl	8001460 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e12a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ed      	beq.n	8001fcc <HAL_RCC_OscConfig+0x53c>
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fa35 	bl	8001460 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fa31 	bl	8001460 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e113      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002010:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ed      	bne.n	8001ffa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b7a      	ldr	r3, [pc, #488]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	4a79      	ldr	r2, [pc, #484]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80fe 	beq.w	8002236 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 80d0 	bne.w	80021e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002044:	4b72      	ldr	r3, [pc, #456]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	429a      	cmp	r2, r3
 8002056:	d130      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	3b01      	subs	r3, #1
 8002064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d127      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d11f      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002084:	2a07      	cmp	r2, #7
 8002086:	bf14      	ite	ne
 8002088:	2201      	movne	r2, #1
 800208a:	2200      	moveq	r2, #0
 800208c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	4293      	cmp	r3, r2
 8002090:	d113      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	3b01      	subs	r3, #1
 80020a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d06e      	beq.n	8002198 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d069      	beq.n	8002194 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020c0:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020cc:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0ad      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80020e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e8:	f7ff f9ba 	bl	8001460 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f9b6 	bl	8001460 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e09a      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210e:	4b40      	ldr	r3, [pc, #256]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <HAL_RCC_OscConfig+0x784>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800211e:	3a01      	subs	r2, #1
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002128:	0212      	lsls	r2, r2, #8
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002130:	0852      	lsrs	r2, r2, #1
 8002132:	3a01      	subs	r2, #1
 8002134:	0552      	lsls	r2, r2, #21
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800213c:	0852      	lsrs	r2, r2, #1
 800213e:	3a01      	subs	r2, #1
 8002140:	0652      	lsls	r2, r2, #25
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002148:	0912      	lsrs	r2, r2, #4
 800214a:	0452      	lsls	r2, r2, #17
 800214c:	430a      	orrs	r2, r1
 800214e:	4930      	ldr	r1, [pc, #192]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a2a      	ldr	r2, [pc, #168]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216c:	f7ff f978 	bl	8001460 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f974 	bl	8001460 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e058      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002192:	e050      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04f      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d148      	bne.n	8002236 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021bc:	f7ff f950 	bl	8001460 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f94c 	bl	8001460 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e030      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x734>
 80021e2:	e028      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d023      	beq.n	8002232 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <HAL_RCC_OscConfig+0x780>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f933 	bl	8001460 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e00c      	b.n	8002218 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f92f 	bl	8001460 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d905      	bls.n	8002218 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
 8002210:	40021000 	.word	0x40021000
 8002214:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_OscConfig+0x7b0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ec      	bne.n	80021fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x7b0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4905      	ldr	r1, [pc, #20]	@ (8002240 <HAL_RCC_OscConfig+0x7b0>)
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_OscConfig+0x7b4>)
 800222c:	4013      	ands	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e001      	b.n	8002236 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	feeefffc 	.word	0xfeeefffc

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0e7      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b72      	ldr	r3, [pc, #456]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4970      	ldr	r1, [pc, #448]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b6e      	ldr	r3, [pc, #440]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0cf      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b66      	ldr	r3, [pc, #408]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d908      	bls.n	80022ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4960      	ldr	r1, [pc, #384]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04c      	beq.n	8002360 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0a6      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e09a      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e086      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b46      	ldr	r3, [pc, #280]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4943      	ldr	r1, [pc, #268]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7ff f896 	bl	8001460 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff f892 	bl	8001460 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06e      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002378:	429a      	cmp	r2, r3
 800237a:	d208      	bcs.n	800238e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	492b      	ldr	r1, [pc, #172]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238e:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d210      	bcs.n	80023be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 0207 	bic.w	r2, r3, #7
 80023a4:	4923      	ldr	r1, [pc, #140]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_RCC_ClockConfig+0x1ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e036      	b.n	800242c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4918      	ldr	r1, [pc, #96]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4910      	ldr	r1, [pc, #64]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fc:	f000 f824 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	490b      	ldr	r1, [pc, #44]	@ (800243c <HAL_RCC_ClockConfig+0x1f4>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_RCC_ClockConfig+0x1f8>)
 800241a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x1fc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe ffcd 	bl	80013c0 <HAL_InitTick>
 8002426:	4603      	mov	r3, r0
 8002428:	72fb      	strb	r3, [r7, #11]

  return status;
 800242a:	7afb      	ldrb	r3, [r7, #11]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	08004ea8 	.word	0x08004ea8
 8002440:	20000004 	.word	0x20000004
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3e      	ldr	r3, [pc, #248]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b34      	ldr	r3, [pc, #208]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xa6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fb03 f202 	mul.w	r2, r3, r2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0e5b      	lsrs	r3, r3, #25
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	08004ec0 	.word	0x08004ec0
 8002558:	00f42400 	.word	0x00f42400

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08004eb8 	.word	0x08004eb8

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08004eb8 	.word	0x08004eb8

080025cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f9f0 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
 80025ea:	e014      	b.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f0:	4a24      	ldr	r2, [pc, #144]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f8:	4b22      	ldr	r3, [pc, #136]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9e0 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800261c:	d10b      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	@ 0x80
 8002622:	d919      	bls.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2ba0      	cmp	r3, #160	@ 0xa0
 8002628:	d902      	bls.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262a:	2302      	movs	r3, #2
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e013      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e010      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	@ 0x80
 800263a:	d902      	bls.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e00a      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	@ 0x80
 8002646:	d102      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e004      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b70      	cmp	r3, #112	@ 0x70
 8002652:	d101      	bne.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	4909      	ldr	r1, [pc, #36]	@ (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002694:	2300      	movs	r3, #0
 8002696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002698:	2300      	movs	r3, #0
 800269a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d041      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026b0:	d02a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026b6:	d824      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026c2:	d81e      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026cc:	d010      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ce:	e018      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d0:	4b86      	ldr	r3, [pc, #536]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a85      	ldr	r2, [pc, #532]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026dc:	e015      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa8b 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ee:	e00c      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3320      	adds	r3, #32
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fb76 	bl	8002de8 <RCCEx_PLLSAI2_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002700:	e003      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	74fb      	strb	r3, [r7, #19]
      break;
 8002706:	e000      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002710:	4b76      	ldr	r3, [pc, #472]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800271e:	4973      	ldr	r1, [pc, #460]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002726:	e001      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d041      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800273c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002740:	d02a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002742:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002746:	d824      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800274e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002752:	d81e      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800275c:	d010      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800275e:	e018      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002760:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a61      	ldr	r2, [pc, #388]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276c:	e015      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fa43 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277e:	e00c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3320      	adds	r3, #32
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fb2e 	bl	8002de8 <RCCEx_PLLSAI2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002790:	e003      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	74fb      	strb	r3, [r7, #19]
      break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a0:	4b52      	ldr	r3, [pc, #328]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ae:	494f      	ldr	r1, [pc, #316]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027b6:	e001      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a0 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	4a40      	ldr	r2, [pc, #256]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	4b3b      	ldr	r3, [pc, #236]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800280c:	f7fe fe28 	bl	8001460 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002812:	e009      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fe fe24 	bl	8001460 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	74fb      	strb	r3, [r7, #19]
        break;
 8002826:	e005      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002828:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d15c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01f      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d019      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002864:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a20      	ldr	r2, [pc, #128]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fde3 	bl	8001460 <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	e00b      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe fddf 	bl	8001460 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d902      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	74fb      	strb	r3, [r7, #19]
            break;
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b6:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ec      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028da:	4904      	ldr	r1, [pc, #16]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028e2:	e009      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	4aa0      	ldr	r2, [pc, #640]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4b9b      	ldr	r3, [pc, #620]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	4997      	ldr	r1, [pc, #604]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b92      	ldr	r3, [pc, #584]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	498f      	ldr	r1, [pc, #572]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295a:	4b8a      	ldr	r3, [pc, #552]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	4986      	ldr	r1, [pc, #536]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297c:	4b81      	ldr	r3, [pc, #516]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	497e      	ldr	r1, [pc, #504]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299e:	4b79      	ldr	r3, [pc, #484]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ac:	4975      	ldr	r1, [pc, #468]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c0:	4b70      	ldr	r3, [pc, #448]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	496d      	ldr	r1, [pc, #436]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e2:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	4964      	ldr	r1, [pc, #400]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a04:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	495c      	ldr	r1, [pc, #368]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a26:	4b57      	ldr	r3, [pc, #348]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a34:	4953      	ldr	r1, [pc, #332]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a48:	4b4e      	ldr	r3, [pc, #312]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	494b      	ldr	r1, [pc, #300]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6a:	4b46      	ldr	r3, [pc, #280]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	4942      	ldr	r1, [pc, #264]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d028      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9a:	493a      	ldr	r1, [pc, #232]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b35      	ldr	r3, [pc, #212]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a34      	ldr	r2, [pc, #208]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e011      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f898 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af8:	4922      	ldr	r1, [pc, #136]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b14:	60d3      	str	r3, [r2, #12]
 8002b16:	e011      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f869 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d031      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	490b      	ldr	r1, [pc, #44]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b66:	d10f      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f846 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	74bb      	strb	r3, [r7, #18]
 8002b82:	e013      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002b84:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3320      	adds	r3, #32
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f925 	bl	8002de8 <RCCEx_PLLSAI2_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bc6:	490d      	ldr	r1, [pc, #52]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be8:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c0e:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d018      	beq.n	8002c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c1a:	4b72      	ldr	r3, [pc, #456]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10d      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c32:	4b6c      	ldr	r3, [pc, #432]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
       ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d047      	beq.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e044      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d018      	beq.n	8002c86 <RCCEx_PLLSAI1_Config+0x86>
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d825      	bhi.n	8002ca4 <RCCEx_PLLSAI1_Config+0xa4>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d002      	beq.n	8002c62 <RCCEx_PLLSAI1_Config+0x62>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d009      	beq.n	8002c74 <RCCEx_PLLSAI1_Config+0x74>
 8002c60:	e020      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c62:	4b60      	ldr	r3, [pc, #384]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c72:	e01a      	b.n	8002caa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c74:	4b5b      	ldr	r3, [pc, #364]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e013      	b.n	8002cae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c86:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c92:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca2:	e006      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e004      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	4944      	ldr	r1, [pc, #272]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d17d      	bne.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cdc:	4b41      	ldr	r3, [pc, #260]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fbba 	bl	8001460 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cee:	e009      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf0:	f7fe fbb6 	bl	8001460 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d902      	bls.n	8002d04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	73fb      	strb	r3, [r7, #15]
        break;
 8002d02:	e005      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d04:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ef      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d160      	bne.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1c:	4b31      	ldr	r3, [pc, #196]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	0912      	lsrs	r2, r2, #4
 8002d34:	0452      	lsls	r2, r2, #17
 8002d36:	430a      	orrs	r2, r1
 8002d38:	492a      	ldr	r1, [pc, #168]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	610b      	str	r3, [r1, #16]
 8002d3e:	e027      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d112      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d46:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6892      	ldr	r2, [r2, #8]
 8002d56:	0211      	lsls	r1, r2, #8
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6912      	ldr	r2, [r2, #16]
 8002d5c:	0852      	lsrs	r2, r2, #1
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0552      	lsls	r2, r2, #21
 8002d62:	430a      	orrs	r2, r1
 8002d64:	491f      	ldr	r1, [pc, #124]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	610b      	str	r3, [r1, #16]
 8002d6a:	e011      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6892      	ldr	r2, [r2, #8]
 8002d7c:	0211      	lsls	r1, r2, #8
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6952      	ldr	r2, [r2, #20]
 8002d82:	0852      	lsrs	r2, r2, #1
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0652      	lsls	r2, r2, #25
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4916      	ldr	r1, [pc, #88]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fb60 	bl	8001460 <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da2:	e009      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da4:	f7fe fb5c 	bl	8001460 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	73fb      	strb	r3, [r7, #15]
          break;
 8002db6:	e005      	b.n	8002dc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	4904      	ldr	r1, [pc, #16]	@ (8002de4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e02:	4b67      	ldr	r3, [pc, #412]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10d      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
       ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e1a:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
       ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d047      	beq.n	8002ebe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e044      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d018      	beq.n	8002e6e <RCCEx_PLLSAI2_Config+0x86>
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d825      	bhi.n	8002e8c <RCCEx_PLLSAI2_Config+0xa4>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d002      	beq.n	8002e4a <RCCEx_PLLSAI2_Config+0x62>
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d009      	beq.n	8002e5c <RCCEx_PLLSAI2_Config+0x74>
 8002e48:	e020      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e4a:	4b55      	ldr	r3, [pc, #340]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d11d      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5a:	e01a      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e5c:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d116      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e013      	b.n	8002e96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e7a:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e8a:	e006      	b.n	8002e9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e004      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	4939      	ldr	r1, [pc, #228]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d167      	bne.n	8002f94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ec4:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a35      	ldr	r2, [pc, #212]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fac6 	bl	8001460 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ed6:	e009      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ed8:	f7fe fac2 	bl	8001460 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d902      	bls.n	8002eec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eea:	e005      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eec:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ef      	bne.n	8002ed8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d14a      	bne.n	8002f94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	0912      	lsrs	r2, r2, #4
 8002f1c:	0452      	lsls	r2, r2, #17
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	491f      	ldr	r1, [pc, #124]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	614b      	str	r3, [r1, #20]
 8002f26:	e011      	b.n	8002f4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6892      	ldr	r2, [r2, #8]
 8002f38:	0211      	lsls	r1, r2, #8
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6912      	ldr	r2, [r2, #16]
 8002f3e:	0852      	lsrs	r2, r2, #1
 8002f40:	3a01      	subs	r2, #1
 8002f42:	0652      	lsls	r2, r2, #25
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4916      	ldr	r1, [pc, #88]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fa82 	bl	8001460 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f5e:	e009      	b.n	8002f74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f60:	f7fe fa7e 	bl	8001460 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	73fb      	strb	r3, [r7, #15]
          break;
 8002f72:	e005      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f74:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f86:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4904      	ldr	r1, [pc, #16]	@ (8002fa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000

08002fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e095      	b.n	80030e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc6:	d009      	beq.n	8002fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
 8002fce:	e005      	b.n	8002fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fc80 	bl	80008fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800301c:	d902      	bls.n	8003024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e002      	b.n	800302a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003032:	d007      	beq.n	8003044 <HAL_SPI_Init+0xa0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	ea42 0103 	orr.w	r1, r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	f003 0204 	and.w	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b088      	sub	sp, #32
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fa:	f7fe f9b1 	bl	8001460 <HAL_GetTick>
 80030fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e15c      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0x36>
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e154      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_SPI_Transmit+0x48>
 800312e:	2302      	movs	r3, #2
 8003130:	e14d      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003184:	d10f      	bne.n	80031a6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d007      	beq.n	80031c4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031cc:	d952      	bls.n	8003274 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0xf2>
 80031d6:	8b7b      	ldrh	r3, [r7, #26]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d145      	bne.n	8003268 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003200:	e032      	b.n	8003268 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d112      	bne.n	8003236 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003234:	e018      	b.n	8003268 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003236:	f7fe f913 	bl	8001460 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_Transmit+0x164>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x16a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0b2      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1c7      	bne.n	8003202 <HAL_SPI_Transmit+0x118>
 8003272:	e083      	b.n	800337c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x198>
 800327c:	8b7b      	ldrh	r3, [r7, #26]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d177      	bne.n	8003372 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d912      	bls.n	80032b2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b02      	subs	r3, #2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b0:	e05f      	b.n	8003372 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032d8:	e04b      	b.n	8003372 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d12b      	bne.n	8003340 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d912      	bls.n	8003318 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003302:	1c9a      	adds	r2, r3, #2
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b02      	subs	r3, #2
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003316:	e02c      	b.n	8003372 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800333e:	e018      	b.n	8003372 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003340:	f7fe f88e 	bl	8001460 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d803      	bhi.n	8003358 <HAL_SPI_Transmit+0x26e>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d102      	bne.n	800335e <HAL_SPI_Transmit+0x274>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e02d      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ae      	bne.n	80032da <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f947 	bl	8003614 <SPI_EndRxTxTransaction>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033e8:	f7fe f83a 	bl	8001460 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033f8:	f7fe f832 	bl	8001460 <HAL_GetTick>
 80033fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033fe:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	015b      	lsls	r3, r3, #5
 8003404:	0d1b      	lsrs	r3, r3, #20
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340e:	e054      	b.n	80034ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d050      	beq.n	80034ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003418:	f7fe f822 	bl	8001460 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	429a      	cmp	r2, r3
 8003426:	d902      	bls.n	800342e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d13d      	bne.n	80034aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800343c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003446:	d111      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003450:	d004      	beq.n	800345c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345a:	d107      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800346a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003474:	d10f      	bne.n	8003496 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003494:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e017      	b.n	80034da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d19b      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000004 	.word	0x20000004

080034e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034fa:	f7fd ffb1 	bl	8001460 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	4413      	add	r3, r2
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800350a:	f7fd ffa9 	bl	8001460 <HAL_GetTick>
 800350e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003518:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00da      	lsls	r2, r3, #3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	0d1b      	lsrs	r3, r3, #20
 8003528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003530:	e060      	b.n	80035f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003538:	d107      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0x62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003548:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d050      	beq.n	80035f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003552:	f7fd ff85 	bl	8001460 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	429a      	cmp	r2, r3
 8003560:	d902      	bls.n	8003568 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d13d      	bne.n	80035e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003576:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003580:	d111      	bne.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358a:	d004      	beq.n	8003596 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003594:	d107      	bne.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ae:	d10f      	bne.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e010      	b.n	8003606 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d196      	bne.n	8003532 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3728      	adds	r7, #40	@ 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000004 	.word	0x20000004

08003614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff ff5b 	bl	80034e8 <SPI_WaitFifoStateUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e027      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff fec0 	bl	80033d8 <SPI_WaitFlagStateUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e014      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff ff34 	bl	80034e8 <SPI_WaitFifoStateUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e000      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e049      	b.n	8003746 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fb1c 	bl	8000d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fa50 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_TIM_PWM_Start+0x24>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e03c      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d109      	bne.n	800378e <HAL_TIM_PWM_Start+0x3e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e02f      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x58>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e022      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x72>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e015      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x8c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e09c      	b.n	8003930 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0xb6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	e023      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0xc6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003814:	e01b      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xd6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003824:	e013      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Start+0xe6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003834:	e00b      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start+0xf6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	e003      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2201      	movs	r2, #1
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fd10 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a35      	ldr	r2, [pc, #212]	@ (8003938 <HAL_TIM_PWM_Start+0x1e8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a34      	ldr	r2, [pc, #208]	@ (800393c <HAL_TIM_PWM_Start+0x1ec>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a32      	ldr	r2, [pc, #200]	@ (8003940 <HAL_TIM_PWM_Start+0x1f0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a31      	ldr	r2, [pc, #196]	@ (8003944 <HAL_TIM_PWM_Start+0x1f4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <HAL_TIM_PWM_Start+0x1f8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_Start+0x142>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_TIM_PWM_Start+0x144>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <HAL_TIM_PWM_Start+0x1e8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01d      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ba:	d018      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <HAL_TIM_PWM_Start+0x1fc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a21      	ldr	r2, [pc, #132]	@ (8003950 <HAL_TIM_PWM_Start+0x200>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_PWM_Start+0x204>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a17      	ldr	r2, [pc, #92]	@ (800393c <HAL_TIM_PWM_Start+0x1ec>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIM_PWM_Start+0x19e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <HAL_TIM_PWM_Start+0x1f0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d115      	bne.n	800391a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_TIM_PWM_Start+0x208>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d015      	beq.n	800392c <HAL_TIM_PWM_Start+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003906:	d011      	beq.n	800392c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	e008      	b.n	800392c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e000      	b.n	800392e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	00010007 	.word	0x00010007

0800395c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003976:	2302      	movs	r3, #2
 8003978:	e0ff      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b14      	cmp	r3, #20
 8003986:	f200 80f0 	bhi.w	8003b6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800398a:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003b6b 	.word	0x08003b6b
 8003998:	08003b6b 	.word	0x08003b6b
 800399c:	08003b6b 	.word	0x08003b6b
 80039a0:	08003a25 	.word	0x08003a25
 80039a4:	08003b6b 	.word	0x08003b6b
 80039a8:	08003b6b 	.word	0x08003b6b
 80039ac:	08003b6b 	.word	0x08003b6b
 80039b0:	08003a67 	.word	0x08003a67
 80039b4:	08003b6b 	.word	0x08003b6b
 80039b8:	08003b6b 	.word	0x08003b6b
 80039bc:	08003b6b 	.word	0x08003b6b
 80039c0:	08003aa7 	.word	0x08003aa7
 80039c4:	08003b6b 	.word	0x08003b6b
 80039c8:	08003b6b 	.word	0x08003b6b
 80039cc:	08003b6b 	.word	0x08003b6b
 80039d0:	08003ae9 	.word	0x08003ae9
 80039d4:	08003b6b 	.word	0x08003b6b
 80039d8:	08003b6b 	.word	0x08003b6b
 80039dc:	08003b6b 	.word	0x08003b6b
 80039e0:	08003b29 	.word	0x08003b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f970 	bl	8003cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6999      	ldr	r1, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	619a      	str	r2, [r3, #24]
      break;
 8003a22:	e0a5      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f9e0 	bl	8003df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	619a      	str	r2, [r3, #24]
      break;
 8003a64:	e084      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fa49 	bl	8003f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0208 	orr.w	r2, r2, #8
 8003a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0204 	bic.w	r2, r2, #4
 8003a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69d9      	ldr	r1, [r3, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	61da      	str	r2, [r3, #28]
      break;
 8003aa4:	e064      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fab1 	bl	8004014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	021a      	lsls	r2, r3, #8
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	61da      	str	r2, [r3, #28]
      break;
 8003ae6:	e043      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fafa 	bl	80040e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b26:	e023      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fb3e 	bl	80041b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b68:	e002      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop

08003b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a46      	ldr	r2, [pc, #280]	@ (8003cb0 <TIM_Base_SetConfig+0x12c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba2:	d00f      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a43      	ldr	r2, [pc, #268]	@ (8003cb4 <TIM_Base_SetConfig+0x130>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <TIM_Base_SetConfig+0x134>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <TIM_Base_SetConfig+0x138>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a40      	ldr	r2, [pc, #256]	@ (8003cc0 <TIM_Base_SetConfig+0x13c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d108      	bne.n	8003bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a35      	ldr	r2, [pc, #212]	@ (8003cb0 <TIM_Base_SetConfig+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be4:	d01b      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a32      	ldr	r2, [pc, #200]	@ (8003cb4 <TIM_Base_SetConfig+0x130>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d017      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <TIM_Base_SetConfig+0x134>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a30      	ldr	r2, [pc, #192]	@ (8003cbc <TIM_Base_SetConfig+0x138>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc0 <TIM_Base_SetConfig+0x13c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc4 <TIM_Base_SetConfig+0x140>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <TIM_Base_SetConfig+0x144>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x9a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <TIM_Base_SetConfig+0x148>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <TIM_Base_SetConfig+0x12c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00f      	beq.n	8003c7c <TIM_Base_SetConfig+0xf8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <TIM_Base_SetConfig+0x13c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0xf8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a17      	ldr	r2, [pc, #92]	@ (8003cc4 <TIM_Base_SetConfig+0x140>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0xf8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	@ (8003cc8 <TIM_Base_SetConfig+0x144>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0xf8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a15      	ldr	r2, [pc, #84]	@ (8003ccc <TIM_Base_SetConfig+0x148>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d103      	bne.n	8003c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f023 0201 	bic.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40013400 	.word	0x40013400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800

08003cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 0201 	bic.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0302 	bic.w	r3, r3, #2
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ddc <TIM_OC1_SetConfig+0x10c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_OC1_SetConfig+0x80>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2b      	ldr	r2, [pc, #172]	@ (8003de0 <TIM_OC1_SetConfig+0x110>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_OC1_SetConfig+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <TIM_OC1_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC1_SetConfig+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <TIM_OC1_SetConfig+0x118>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC1_SetConfig+0x80>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <TIM_OC1_SetConfig+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0308 	bic.w	r3, r3, #8
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ddc <TIM_OC1_SetConfig+0x10c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <TIM_OC1_SetConfig+0xc2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <TIM_OC1_SetConfig+0x110>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_OC1_SetConfig+0xc2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <TIM_OC1_SetConfig+0x114>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_OC1_SetConfig+0xc2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <TIM_OC1_SetConfig+0x118>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC1_SetConfig+0xc2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	@ (8003dec <TIM_OC1_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d111      	bne.n	8003db6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 0210 	bic.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0320 	bic.w	r3, r3, #32
 8003e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	@ (8003ef0 <TIM_OC2_SetConfig+0x100>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC2_SetConfig+0x6c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a27      	ldr	r2, [pc, #156]	@ (8003ef4 <TIM_OC2_SetConfig+0x104>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <TIM_OC2_SetConfig+0x100>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_OC2_SetConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <TIM_OC2_SetConfig+0x104>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_OC2_SetConfig+0xb0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <TIM_OC2_SetConfig+0x108>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_OC2_SetConfig+0xb0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <TIM_OC2_SetConfig+0x10c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_OC2_SetConfig+0xb0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <TIM_OC2_SetConfig+0x110>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d113      	bne.n	8003ec8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40013400 	.word	0x40013400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <TIM_OC3_SetConfig+0xfc>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_OC3_SetConfig+0x6a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <TIM_OC3_SetConfig+0x100>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10d      	bne.n	8003f8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004000 <TIM_OC3_SetConfig+0xfc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00f      	beq.n	8003fb2 <TIM_OC3_SetConfig+0xae>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	@ (8004004 <TIM_OC3_SetConfig+0x100>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_OC3_SetConfig+0xae>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004008 <TIM_OC3_SetConfig+0x104>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_OC3_SetConfig+0xae>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	@ (800400c <TIM_OC3_SetConfig+0x108>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_OC3_SetConfig+0xae>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <TIM_OC3_SetConfig+0x10c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800

08004014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <TIM_OC4_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <TIM_OC4_SetConfig+0x84>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <TIM_OC4_SetConfig+0xc4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC4_SetConfig+0x84>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a16      	ldr	r2, [pc, #88]	@ (80040dc <TIM_OC4_SetConfig+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC4_SetConfig+0x84>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <TIM_OC4_SetConfig+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC4_SetConfig+0x84>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <TIM_OC4_SetConfig+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800409e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800412c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a17      	ldr	r2, [pc, #92]	@ (800419c <TIM_OC5_SetConfig+0xb4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_OC5_SetConfig+0x7a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <TIM_OC5_SetConfig+0xb8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_OC5_SetConfig+0x7a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a15      	ldr	r2, [pc, #84]	@ (80041a4 <TIM_OC5_SetConfig+0xbc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_OC5_SetConfig+0x7a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <TIM_OC5_SetConfig+0xc0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC5_SetConfig+0x7a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <TIM_OC5_SetConfig+0xc4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d109      	bne.n	8004176 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40013400 	.word	0x40013400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <TIM_OC6_SetConfig+0xb8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_OC6_SetConfig+0x7c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a17      	ldr	r2, [pc, #92]	@ (800426c <TIM_OC6_SetConfig+0xbc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_OC6_SetConfig+0x7c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <TIM_OC6_SetConfig+0xc0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC6_SetConfig+0x7c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <TIM_OC6_SetConfig+0xc4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC6_SetConfig+0x7c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a14      	ldr	r2, [pc, #80]	@ (8004278 <TIM_OC6_SetConfig+0xc8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d109      	bne.n	8004240 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	029b      	lsls	r3, r3, #10
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40013400 	.word	0x40013400
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e068      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2d      	ldr	r2, [pc, #180]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800431a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01d      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004352:	d018      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a13      	ldr	r2, [pc, #76]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a14      	ldr	r2, [pc, #80]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10c      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40013400 	.word	0x40013400
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40014000 	.word	0x40014000

080043d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e040      	b.n	800446c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fd7a 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	@ 0x24
 8004404:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fae0 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f825 	bl	8004474 <UART_SetConfig>
 800442a:	4603      	mov	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e01b      	b.n	800446c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb5f 	bl	8004b28 <UART_CheckIdleState>
 800446a:	4603      	mov	r3, r0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4ba4      	ldr	r3, [pc, #656]	@ (8004734 <UART_SetConfig+0x2c0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a99      	ldr	r2, [pc, #612]	@ (8004738 <UART_SetConfig+0x2c4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a90      	ldr	r2, [pc, #576]	@ (800473c <UART_SetConfig+0x2c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d126      	bne.n	800454c <UART_SetConfig+0xd8>
 80044fe:	4b90      	ldr	r3, [pc, #576]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0xd0>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <UART_SetConfig+0xa0>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452a:	e116      	b.n	800475a <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004532:	e112      	b.n	800475a <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e10e      	b.n	800475a <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e10a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e106      	b.n	800475a <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7c      	ldr	r2, [pc, #496]	@ (8004744 <UART_SetConfig+0x2d0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d138      	bne.n	80045c8 <UART_SetConfig+0x154>
 8004556:	4b7a      	ldr	r3, [pc, #488]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d82d      	bhi.n	80045c0 <UART_SetConfig+0x14c>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0xf8>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e0d8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e0d4      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e0d0      	b.n	800475a <UART_SetConfig+0x2e6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e0cc      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e0c8      	b.n	800475a <UART_SetConfig+0x2e6>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004748 <UART_SetConfig+0x2d4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d125      	bne.n	800461e <UART_SetConfig+0x1aa>
 80045d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004740 <UART_SetConfig+0x2cc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045dc:	2b30      	cmp	r3, #48	@ 0x30
 80045de:	d016      	beq.n	800460e <UART_SetConfig+0x19a>
 80045e0:	2b30      	cmp	r3, #48	@ 0x30
 80045e2:	d818      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d00a      	beq.n	80045fe <UART_SetConfig+0x18a>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d814      	bhi.n	8004616 <UART_SetConfig+0x1a2>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0x182>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d008      	beq.n	8004606 <UART_SetConfig+0x192>
 80045f4:	e00f      	b.n	8004616 <UART_SetConfig+0x1a2>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fc:	e0ad      	b.n	800475a <UART_SetConfig+0x2e6>
 80045fe:	2302      	movs	r3, #2
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004604:	e0a9      	b.n	800475a <UART_SetConfig+0x2e6>
 8004606:	2304      	movs	r3, #4
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460c:	e0a5      	b.n	800475a <UART_SetConfig+0x2e6>
 800460e:	2308      	movs	r3, #8
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004614:	e0a1      	b.n	800475a <UART_SetConfig+0x2e6>
 8004616:	2310      	movs	r3, #16
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461c:	e09d      	b.n	800475a <UART_SetConfig+0x2e6>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4a      	ldr	r2, [pc, #296]	@ (800474c <UART_SetConfig+0x2d8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <UART_SetConfig+0x200>
 8004628:	4b45      	ldr	r3, [pc, #276]	@ (8004740 <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004632:	2bc0      	cmp	r3, #192	@ 0xc0
 8004634:	d016      	beq.n	8004664 <UART_SetConfig+0x1f0>
 8004636:	2bc0      	cmp	r3, #192	@ 0xc0
 8004638:	d818      	bhi.n	800466c <UART_SetConfig+0x1f8>
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d00a      	beq.n	8004654 <UART_SetConfig+0x1e0>
 800463e:	2b80      	cmp	r3, #128	@ 0x80
 8004640:	d814      	bhi.n	800466c <UART_SetConfig+0x1f8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x1d8>
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	d008      	beq.n	800465c <UART_SetConfig+0x1e8>
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x1f8>
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e082      	b.n	800475a <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e07e      	b.n	800475a <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e07a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e076      	b.n	800475a <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e072      	b.n	800475a <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <UART_SetConfig+0x2dc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <UART_SetConfig+0x260>
 800467e:	4b30      	ldr	r3, [pc, #192]	@ (8004740 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x250>
 800468e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x258>
 8004694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x240>
 800469a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x258>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x238>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x248>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x258>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e052      	b.n	800475a <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e04e      	b.n	800475a <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e04a      	b.n	800475a <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e046      	b.n	800475a <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e042      	b.n	800475a <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <UART_SetConfig+0x2c4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d13a      	bne.n	8004754 <UART_SetConfig+0x2e0>
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046ec:	d01a      	beq.n	8004724 <UART_SetConfig+0x2b0>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f2:	d81b      	bhi.n	800472c <UART_SetConfig+0x2b8>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0x2a0>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fe:	d815      	bhi.n	800472c <UART_SetConfig+0x2b8>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x298>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004708:	d008      	beq.n	800471c <UART_SetConfig+0x2a8>
 800470a:	e00f      	b.n	800472c <UART_SetConfig+0x2b8>
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e022      	b.n	800475a <UART_SetConfig+0x2e6>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e01e      	b.n	800475a <UART_SetConfig+0x2e6>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e01a      	b.n	800475a <UART_SetConfig+0x2e6>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e016      	b.n	800475a <UART_SetConfig+0x2e6>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e012      	b.n	800475a <UART_SetConfig+0x2e6>
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	40005000 	.word	0x40005000
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a9f      	ldr	r2, [pc, #636]	@ (80049dc <UART_SetConfig+0x568>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d17a      	bne.n	800485a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004768:	2b08      	cmp	r3, #8
 800476a:	d824      	bhi.n	80047b6 <UART_SetConfig+0x342>
 800476c:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <UART_SetConfig+0x300>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b7 	.word	0x080047b7
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047b7 	.word	0x080047b7
 8004784:	080047a7 	.word	0x080047a7
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047b7 	.word	0x080047b7
 8004794:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7fd feec 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 800479c:	61f8      	str	r0, [r7, #28]
        break;
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <UART_SetConfig+0x56c>)
 80047a2:	61fb      	str	r3, [r7, #28]
        break;
 80047a4:	e00d      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fd fe4f 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80047aa:	61f8      	str	r0, [r7, #28]
        break;
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e005      	b.n	80047c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80fb 	beq.w	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d305      	bcc.n	80047e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d903      	bls.n	80047ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ec:	e0e8      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2200      	movs	r2, #0
 80047f2:	461c      	mov	r4, r3
 80047f4:	4615      	mov	r5, r2
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	022b      	lsls	r3, r5, #8
 8004800:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004804:	0222      	lsls	r2, r4, #8
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6849      	ldr	r1, [r1, #4]
 800480a:	0849      	lsrs	r1, r1, #1
 800480c:	2000      	movs	r0, #0
 800480e:	4688      	mov	r8, r1
 8004810:	4681      	mov	r9, r0
 8004812:	eb12 0a08 	adds.w	sl, r2, r8
 8004816:	eb43 0b09 	adc.w	fp, r3, r9
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fb fccc 	bl	80001c8 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483e:	d308      	bcc.n	8004852 <UART_SetConfig+0x3de>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004846:	d204      	bcs.n	8004852 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e0b6      	b.n	80049c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004858:	e0b2      	b.n	80049c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004862:	d15e      	bne.n	8004922 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004868:	2b08      	cmp	r3, #8
 800486a:	d828      	bhi.n	80048be <UART_SetConfig+0x44a>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <UART_SetConfig+0x400>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fd fe6c 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e014      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fd fe7e 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
        break;
 80048a6:	e010      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <UART_SetConfig+0x56c>)
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fd fdcb 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80048b2:	61f8      	str	r0, [r7, #28]
        break;
 80048b4:	e009      	b.n	80048ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ba:	61fb      	str	r3, [r7, #28]
        break;
 80048bc:	e005      	b.n	80048ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d077      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005a      	lsls	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d916      	bls.n	800491a <UART_SetConfig+0x4a6>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f2:	d212      	bcs.n	800491a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b29a      	uxth	r2, r3
 800490a:	8afb      	ldrh	r3, [r7, #22]
 800490c:	4313      	orrs	r3, r2
 800490e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8afa      	ldrh	r2, [r7, #22]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e052      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004920:	e04e      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004926:	2b08      	cmp	r3, #8
 8004928:	d827      	bhi.n	800497a <UART_SetConfig+0x506>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x4bc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fd fe0e 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004958:	61f8      	str	r0, [r7, #28]
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fd fe20 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <UART_SetConfig+0x56c>)
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fd fd6d 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800496e:	61f8      	str	r0, [r7, #28]
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004984:	bf00      	nop
    }

    if (pclk != 0U)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d019      	beq.n	80049c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085a      	lsrs	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	d909      	bls.n	80049ba <UART_SetConfig+0x546>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d205      	bcs.n	80049ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e002      	b.n	80049c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	@ 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40008000 	.word	0x40008000
 80049e0:	00f42400 	.word	0x00f42400

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae2:	d10a      	bne.n	8004afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b098      	sub	sp, #96	@ 0x60
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b38:	f7fc fc92 	bl	8001460 <HAL_GetTick>
 8004b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d12e      	bne.n	8004baa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f88c 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e062      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d149      	bne.n	8004c4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f856 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03c      	beq.n	8004c4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	623b      	str	r3, [r7, #32]
   return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e011      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3758      	adds	r7, #88	@ 0x58
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	e04f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d04b      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fc fbe5 	bl	8001460 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e04e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d037      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d034      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d031      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d110      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f838 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e029      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d111      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81e 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e00f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0a0      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b095      	sub	sp, #84	@ 0x54
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d118      	bne.n	8004dfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	@ 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <memset>:
 8004e1a:	4402      	add	r2, r0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d100      	bne.n	8004e24 <memset+0xa>
 8004e22:	4770      	bx	lr
 8004e24:	f803 1b01 	strb.w	r1, [r3], #1
 8004e28:	e7f9      	b.n	8004e1e <memset+0x4>
	...

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f826 	bl	8004e90 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080077fc 	.word	0x080077fc
 8004e68:	080077fc 	.word	0x080077fc
 8004e6c:	080077fc 	.word	0x080077fc
 8004e70:	08007800 	.word	0x08007800

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <_init>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr

08004e9c <_fini>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr
