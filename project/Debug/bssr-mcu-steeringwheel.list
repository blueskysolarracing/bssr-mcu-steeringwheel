
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029be4  08006c9c  08006c9c  00007c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030880  08030880  00032050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08030880  08030880  00031880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030888  08030888  00032050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030888  08030888  00031888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803088c  0803088c  0003188c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08030890  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000823c  20000050  080308e0  00032050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000828c  080308e0  0003228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001431c  00000000  00000000  00032080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9e  00000000  00000000  0004639c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00049240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  0004a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253cb  00000000  00000000  0004b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017343  00000000  00000000  0007067e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3fc9  00000000  00000000  000879c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  0016b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00170574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c84 	.word	0x08006c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	08006c84 	.word	0x08006c84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_DMA_Init+0x60>)
 80004fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <MX_DMA_Init+0x60>)
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	6493      	str	r3, [r2, #72]	@ 0x48
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_DMA_Init+0x60>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_DMA_Init+0x60>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000516:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <MX_DMA_Init+0x60>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6493      	str	r3, [r2, #72]	@ 0x48
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <MX_DMA_Init+0x60>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	200c      	movs	r0, #12
 8000530:	f001 fe39 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000534:	200c      	movs	r0, #12
 8000536:	f001 fe52 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2039      	movs	r0, #57	@ 0x39
 8000540:	f001 fe31 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000544:	2039      	movs	r0, #57	@ 0x39
 8000546:	f001 fe4a 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b57      	ldr	r3, [pc, #348]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a56      	ldr	r2, [pc, #344]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b54      	ldr	r3, [pc, #336]	@ (80006cc <MX_GPIO_Init+0x174>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b51      	ldr	r3, [pc, #324]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a50      	ldr	r2, [pc, #320]	@ (80006cc <MX_GPIO_Init+0x174>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b4e      	ldr	r3, [pc, #312]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b4b      	ldr	r3, [pc, #300]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a4a      	ldr	r2, [pc, #296]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b45      	ldr	r3, [pc, #276]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a44      	ldr	r2, [pc, #272]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b3f      	ldr	r3, [pc, #252]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a3e      	ldr	r2, [pc, #248]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b3c      	ldr	r3, [pc, #240]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4839      	ldr	r0, [pc, #228]	@ (80006d0 <MX_GPIO_Init+0x178>)
 80005ec:	f002 fa0a 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2186      	movs	r1, #134	@ 0x86
 80005f4:	4837      	ldr	r0, [pc, #220]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 80005f6:	f002 fa05 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B2_Pin|INPUT_B3_Pin|DISPLAY_DISP_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8000600:	4834      	ldr	r0, [pc, #208]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 8000602:	f002 f9ff 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	4833      	ldr	r0, [pc, #204]	@ (80006d8 <MX_GPIO_Init+0x180>)
 800060c:	f002 f9fa 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000610:	2310      	movs	r3, #16
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000614:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	482a      	ldr	r0, [pc, #168]	@ (80006d0 <MX_GPIO_Init+0x178>)
 8000626:	f002 f82b 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 800062a:	2320      	movs	r3, #32
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <MX_GPIO_Init+0x178>)
 8000642:	f002 f81d 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 8000646:	2301      	movs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 800065a:	f002 f811 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800065e:	f640 4316 	movw	r3, #3094	@ 0xc16
 8000662:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 8000678:	f002 f802 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x180>)
 8000694:	f001 fff4 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 80006b0:	f001 ffe6 	bl	8002680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	200a      	movs	r0, #10
 80006ba:	f001 fd74 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006be:	200a      	movs	r0, #10
 80006c0:	f001 fd8d 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800
 80006d4:	48000400 	.word	0x48000400
 80006d8:	48000c00 	.word	0x48000c00

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	4851      	ldr	r0, [pc, #324]	@ (800082c <main+0x150>)
 80006e8:	f002 f98c 	bl	8002a04 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f001 fbe8 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f8be 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff ff30 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f8:	f7ff fefc 	bl	80004f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80006fc:	f000 fa5c 	bl	8000bb8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000700:	f000 fa94 	bl	8000c2c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000704:	f000 fc20 	bl	8000f48 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000708:	f000 fce0 	bl	80010cc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800070c:	f000 fe0c 	bl	8001328 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000710:	f000 fc76 	bl	8001000 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // SET UP LIGHTS
  Command_UPDATE_LIGHTS();
 8000714:	f000 f8fc 	bl	8000910 <Command_UPDATE_LIGHTS>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4845      	ldr	r0, [pc, #276]	@ (8000830 <main+0x154>)
 800071c:	f004 ff12 	bl	8005544 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000720:	2108      	movs	r1, #8
 8000722:	4843      	ldr	r0, [pc, #268]	@ (8000830 <main+0x154>)
 8000724:	f004 ff0e 	bl	8005544 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000728:	2104      	movs	r1, #4
 800072a:	4842      	ldr	r0, [pc, #264]	@ (8000834 <main+0x158>)
 800072c:	f004 ff0a 	bl	8005544 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000730:	2108      	movs	r1, #8
 8000732:	4840      	ldr	r0, [pc, #256]	@ (8000834 <main+0x158>)
 8000734:	f004 ff06 	bl	8005544 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 8000738:	4b3f      	ldr	r3, [pc, #252]	@ (8000838 <main+0x15c>)
 800073a:	4a40      	ldr	r2, [pc, #256]	@ (800083c <main+0x160>)
 800073c:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <main+0x15c>)
 8000740:	4a3f      	ldr	r2, [pc, #252]	@ (8000840 <main+0x164>)
 8000742:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000744:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <main+0x15c>)
 8000746:	2204      	movs	r2, #4
 8000748:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <main+0x15c>)
 800074c:	4a3d      	ldr	r2, [pc, #244]	@ (8000844 <main+0x168>)
 800074e:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 8000750:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <main+0x15c>)
 8000752:	2204      	movs	r2, #4
 8000754:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 8000756:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <main+0x15c>)
 8000758:	4a34      	ldr	r2, [pc, #208]	@ (800082c <main+0x150>)
 800075a:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 800075c:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <main+0x15c>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <main+0x15c>)
 8000764:	4a31      	ldr	r2, [pc, #196]	@ (800082c <main+0x150>)
 8000766:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000768:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <main+0x15c>)
 800076a:	2210      	movs	r2, #16
 800076c:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <main+0x15c>)
 8000770:	4a35      	ldr	r2, [pc, #212]	@ (8000848 <main+0x16c>)
 8000772:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000774:	4b35      	ldr	r3, [pc, #212]	@ (800084c <main+0x170>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <main+0x15c>)
 800077a:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <main+0x15c>)
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <main+0x174>)
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e00e      	b.n	80007a6 <main+0xca>
		ls032.registers[i].str = ls032_registers_text[i];
 8000788:	79fa      	ldrb	r2, [r7, #7]
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <main+0x15c>)
 800078c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	4419      	add	r1, r3
 8000794:	4613      	mov	r3, r2
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <main+0x178>)
 800079c:	4413      	add	r3, r2
 800079e:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3301      	adds	r3, #1
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d9ed      	bls.n	8000788 <main+0xac>

	if (LS032_Init(&ls032)) {
 80007ac:	4822      	ldr	r0, [pc, #136]	@ (8000838 <main+0x15c>)
 80007ae:	f001 f807 	bl	80017c0 <LS032_Init>
		// TODO: Error Handle
	}

	LS032_Clear(&ls032);
 80007b2:	4821      	ldr	r0, [pc, #132]	@ (8000838 <main+0x15c>)
 80007b4:	f001 fa1b 	bl	8001bee <LS032_Clear>
	LS032_DrawLogo(&ls032);
 80007b8:	481f      	ldr	r0, [pc, #124]	@ (8000838 <main+0x15c>)
 80007ba:	f001 fa8b 	bl	8001cd4 <LS032_DrawLogo>
	LS032_UpdateManual(&ls032);
 80007be:	481e      	ldr	r0, [pc, #120]	@ (8000838 <main+0x15c>)
 80007c0:	f001 f9c8 	bl	8001b54 <LS032_UpdateManual>

	// SET UP THE INPUTS LIBRARY
	inputs.sel_gpio_handles = input_sel_gpio_ports;
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <main+0x17c>)
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <main+0x180>)
 80007c8:	611a      	str	r2, [r3, #16]
	inputs.sel_gpio_pins = input_sel_gpio_pins;
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <main+0x17c>)
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <main+0x184>)
 80007ce:	615a      	str	r2, [r3, #20]
	inputs.it_gpio_handle = INPUT_IT_GPIO_Port;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <main+0x17c>)
 80007d2:	4a24      	ldr	r2, [pc, #144]	@ (8000864 <main+0x188>)
 80007d4:	609a      	str	r2, [r3, #8]
	inputs.it_gpio_pin = INPUT_IT_Pin;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <main+0x17c>)
 80007d8:	2220      	movs	r2, #32
 80007da:	819a      	strh	r2, [r3, #12]
	inputs.state_gpio_handle = INPUT_STATE_GPIO_Port;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <main+0x17c>)
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <main+0x150>)
 80007e0:	601a      	str	r2, [r3, #0]
	inputs.state_gpio_pin = INPUT_STATE_Pin;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <main+0x17c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	809a      	strh	r2, [r3, #4]
	inputs.states = 0xFFFF;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <main+0x17c>)
 80007ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ee:	831a      	strh	r2, [r3, #24]
	inputs.states_itmask = 0b0000111111111111;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <main+0x17c>)
 80007f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80007f6:	835a      	strh	r2, [r3, #26]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LS032_UpdateAsync(&ls032);
 80007f8:	480f      	ldr	r0, [pc, #60]	@ (8000838 <main+0x15c>)
 80007fa:	f001 f9c4 	bl	8001b86 <LS032_UpdateAsync>

	  // Delay for screen refresh
	  HAL_Delay(30);
 80007fe:	201e      	movs	r0, #30
 8000800:	f001 fbd2 	bl	8001fa8 <HAL_Delay>

	  // Handle inputs:
	  Inputs_CheckAll(&inputs);
 8000804:	4814      	ldr	r0, [pc, #80]	@ (8000858 <main+0x17c>)
 8000806:	f000 fecd 	bl	80015a4 <Inputs_CheckAll>
	  // Screen Brightness
	  if ((inputs.states >> 8) & 0b1) {
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <main+0x17c>)
 800080c:	8b1b      	ldrh	r3, [r3, #24]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <main+0x148>
		  TIM4->CCR3 = lights_read_brightness;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <main+0x18c>)
 800081c:	881a      	ldrh	r2, [r3, #0]
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <main+0x190>)
 8000820:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000822:	e7e9      	b.n	80007f8 <main+0x11c>
	  } else {
		  TIM4->CCR3 = 0;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <main+0x190>)
 8000826:	2200      	movs	r2, #0
 8000828:	63da      	str	r2, [r3, #60]	@ 0x3c
	  LS032_UpdateAsync(&ls032);
 800082a:	e7e5      	b.n	80007f8 <main+0x11c>
 800082c:	48000400 	.word	0x48000400
 8000830:	200081b4 	.word	0x200081b4
 8000834:	20008168 	.word	0x20008168
 8000838:	2000006c 	.word	0x2000006c
 800083c:	20008028 	.word	0x20008028
 8000840:	48000c00 	.word	0x48000c00
 8000844:	2000811c 	.word	0x2000811c
 8000848:	2000009c 	.word	0x2000009c
 800084c:	20000000 	.word	0x20000000
 8000850:	20005cc0 	.word	0x20005cc0
 8000854:	20005ec0 	.word	0x20005ec0
 8000858:	20007ea0 	.word	0x20007ea0
 800085c:	20000004 	.word	0x20000004
 8000860:	20000014 	.word	0x20000014
 8000864:	48000800 	.word	0x48000800
 8000868:	20000022 	.word	0x20000022
 800086c:	40000800 	.word	0x40000800

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b096      	sub	sp, #88	@ 0x58
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2244      	movs	r2, #68	@ 0x44
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f006 f9c5 	bl	8006c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000896:	f002 f8f3 	bl	8002a80 <HAL_PWREx_ControlVoltageScaling>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a0:	f000 f984 	bl	8000bac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	2303      	movs	r3, #3
 80008b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008ba:	2308      	movs	r3, #8
 80008bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f92c 	bl	8002b2c <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008da:	f000 f967 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2103      	movs	r1, #3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fcf4 	bl	80032e4 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000902:	f000 f953 	bl	8000bac <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3758      	adds	r7, #88	@ 0x58
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <Command_UPDATE_LIGHTS>:
		if ((in >> bit) & 0b1) str[bit] = '1';
		else str[bit] = '0';
	}
}

void Command_UPDATE_LIGHTS() {
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	// FAULT LIGHT:
	if (lights_flt_mode)
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <Command_UPDATE_LIGHTS+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d004      	beq.n	8000926 <Command_UPDATE_LIGHTS+0x16>
		TIM4->CCR1 = lights_flt_brightness;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <Command_UPDATE_LIGHTS+0x64>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <Command_UPDATE_LIGHTS+0x68>)
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34
 8000924:	e002      	b.n	800092c <Command_UPDATE_LIGHTS+0x1c>
	else
		TIM4->CCR1 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <Command_UPDATE_LIGHTS+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34

	// LEFT IND:
	if (lights_ind_mode & 0b1)
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <Command_UPDATE_LIGHTS+0x6c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <Command_UPDATE_LIGHTS+0x32>
		TIM3->CCR2 = lights_ind_brightness;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <Command_UPDATE_LIGHTS+0x70>)
 800093a:	881a      	ldrh	r2, [r3, #0]
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <Command_UPDATE_LIGHTS+0x74>)
 800093e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000940:	e002      	b.n	8000948 <Command_UPDATE_LIGHTS+0x38>
	else
		TIM3->CCR2 = 0;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <Command_UPDATE_LIGHTS+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	639a      	str	r2, [r3, #56]	@ 0x38

	// RIGHT IND:
	if (lights_ind_mode & 0b10)
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <Command_UPDATE_LIGHTS+0x6c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d004      	beq.n	800095e <Command_UPDATE_LIGHTS+0x4e>
		TIM3->CCR3 = lights_ind_brightness;
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <Command_UPDATE_LIGHTS+0x70>)
 8000956:	881a      	ldrh	r2, [r3, #0]
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <Command_UPDATE_LIGHTS+0x74>)
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
	else
		TIM3->CCR3 = 0;
}
 800095c:	e002      	b.n	8000964 <Command_UPDATE_LIGHTS+0x54>
		TIM3->CCR3 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <Command_UPDATE_LIGHTS+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000001c 	.word	0x2000001c
 8000974:	2000001e 	.word	0x2000001e
 8000978:	40000800 	.word	0x40000800
 800097c:	20007fc1 	.word	0x20007fc1
 8000980:	20000020 	.word	0x20000020
 8000984:	40000400 	.word	0x40000400

08000988 <Handle_SPI1_RX_START>:

void Handle_SPI1_RX_START() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	// Reset the buffer and start DMA
	memset(spi1_rx_buf, 0x00, 257);
 800098c:	f240 1201 	movw	r2, #257	@ 0x101
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <Handle_SPI1_RX_START+0x20>)
 8000994:	f006 f93b 	bl	8006c0e <memset>
	HAL_SPI_Receive_DMA(&hspi1, spi1_rx_buf, 257);
 8000998:	f240 1201 	movw	r2, #257	@ 0x101
 800099c:	4902      	ldr	r1, [pc, #8]	@ (80009a8 <Handle_SPI1_RX_START+0x20>)
 800099e:	4803      	ldr	r0, [pc, #12]	@ (80009ac <Handle_SPI1_RX_START+0x24>)
 80009a0:	f003 fede 	bl	8004760 <HAL_SPI_Receive_DMA>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20007ec0 	.word	0x20007ec0
 80009ac:	20007fc4 	.word	0x20007fc4

080009b0 <Handle_SPI1_RX_CPLT>:

void Handle_SPI1_RX_CPLT() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
	// Stop DMA and parse the packet
	HAL_SPI_DMAStop(&hspi1);
 80009b6:	4851      	ldr	r0, [pc, #324]	@ (8000afc <Handle_SPI1_RX_CPLT+0x14c>)
 80009b8:	f004 f978 	bl	8004cac <HAL_SPI_DMAStop>

	if (spi1_rx_buf[0] & 0b10000000) {
 80009bc:	4b50      	ldr	r3, [pc, #320]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da55      	bge.n	8000a72 <Handle_SPI1_RX_CPLT+0xc2>
		// DISPLAY CMD
		uint8_t reg  = (spi1_rx_buf[0] & 0b01111100) >> 2;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	109b      	asrs	r3, r3, #2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	73fb      	strb	r3, [r7, #15]
		uint8_t prop = (spi1_rx_buf[0] & 0b00000011);
 80009d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	73bb      	strb	r3, [r7, #14]
		switch (prop) {
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	f200 8085 	bhi.w	8000af0 <Handle_SPI1_RX_CPLT+0x140>
 80009e6:	a201      	add	r2, pc, #4	@ (adr r2, 80009ec <Handle_SPI1_RX_CPLT+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a37 	.word	0x08000a37
 80009f4:	08000a4b 	.word	0x08000a4b
 80009f8:	08000a5f 	.word	0x08000a5f
			case 0:
				uint16_t pos_x = (((uint16_t)spi1_rx_buf[1]) << 8) | ((uint16_t)spi1_rx_buf[2]);
 80009fc:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	4b3e      	ldr	r3, [pc, #248]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a08:	789b      	ldrb	r3, [r3, #2]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	813b      	strh	r3, [r7, #8]
				uint16_t pos_y = (((uint16_t)spi1_rx_buf[3]) << 8) | ((uint16_t)spi1_rx_buf[4]);
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a14:	78db      	ldrb	r3, [r3, #3]
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	4b38      	ldr	r3, [pc, #224]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	80fb      	strh	r3, [r7, #6]
				LS032_TextReg_SetPos(&ls032, reg, pos_x, pos_y);
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	893a      	ldrh	r2, [r7, #8]
 8000a2c:	7bf9      	ldrb	r1, [r7, #15]
 8000a2e:	4835      	ldr	r0, [pc, #212]	@ (8000b04 <Handle_SPI1_RX_CPLT+0x154>)
 8000a30:	f000 ffe7 	bl	8001a02 <LS032_TextReg_SetPos>
				break;
 8000a34:	e05f      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			case 1:
				uint8_t size = spi1_rx_buf[1];
 8000a36:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	72fb      	strb	r3, [r7, #11]
				LS032_TextReg_SetSize(&ls032, reg, size);
 8000a3c:	7afa      	ldrb	r2, [r7, #11]
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4619      	mov	r1, r3
 8000a42:	4830      	ldr	r0, [pc, #192]	@ (8000b04 <Handle_SPI1_RX_CPLT+0x154>)
 8000a44:	f001 f812 	bl	8001a6c <LS032_TextReg_SetSize>
				break;
 8000a48:	e055      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			case 2:
				uint8_t mode = spi1_rx_buf[1];
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	733b      	strb	r3, [r7, #12]
				LS032_TextReg_SetMode(&ls032, reg, mode);
 8000a50:	7b3a      	ldrb	r2, [r7, #12]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4619      	mov	r1, r3
 8000a56:	482b      	ldr	r0, [pc, #172]	@ (8000b04 <Handle_SPI1_RX_CPLT+0x154>)
 8000a58:	f001 f82b 	bl	8001ab2 <LS032_TextReg_SetMode>
				break;
 8000a5c:	e04b      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			case 3:
				uint8_t len = spi1_rx_buf[1];
 8000a5e:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	737b      	strb	r3, [r7, #13]
				LS032_TextReg_SetString(&ls032, reg, len, (char*)(spi1_rx_buf + 2));
 8000a64:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <Handle_SPI1_RX_CPLT+0x158>)
 8000a66:	7b7a      	ldrb	r2, [r7, #13]
 8000a68:	7bf9      	ldrb	r1, [r7, #15]
 8000a6a:	4826      	ldr	r0, [pc, #152]	@ (8000b04 <Handle_SPI1_RX_CPLT+0x154>)
 8000a6c:	f001 f83f 	bl	8001aee <LS032_TextReg_SetString>
				break;
 8000a70:	e041      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			default:
				break;
		}
	} else if (spi1_rx_buf[0] == 0x00) {
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <Handle_SPI1_RX_CPLT+0xd2>
		// INPUT CMD
		spi1_tx_queued = 1;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <Handle_SPI1_RX_CPLT+0x15c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e039      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
	} else if (spi1_rx_buf[0] == 0x01) {
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d10a      	bne.n	8000aa0 <Handle_SPI1_RX_CPLT+0xf0>
		// FAULT LIGHT CTRL
		if (spi1_rx_buf[1] <= 3) {
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d831      	bhi.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			lights_flt_mode = spi1_rx_buf[1];
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000a94:	785a      	ldrb	r2, [r3, #1]
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <Handle_SPI1_RX_CPLT+0x160>)
 8000a98:	701a      	strb	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000a9a:	f7ff ff39 	bl	8000910 <Command_UPDATE_LIGHTS>
 8000a9e:	e02a      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
		}
	} else if (spi1_rx_buf[0] == 0x02) {
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d10a      	bne.n	8000abe <Handle_SPI1_RX_CPLT+0x10e>
		// IND. LIGHT CTRL
		if (spi1_rx_buf[1] <= 3) {
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d822      	bhi.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			lights_ind_mode = spi1_rx_buf[1];
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000ab2:	785a      	ldrb	r2, [r3, #1]
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <Handle_SPI1_RX_CPLT+0x164>)
 8000ab6:	701a      	strb	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000ab8:	f7ff ff2a 	bl	8000910 <Command_UPDATE_LIGHTS>
 8000abc:	e01b      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
		}
	} else if (spi1_rx_buf[0] == 0x03) {
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d116      	bne.n	8000af4 <Handle_SPI1_RX_CPLT+0x144>
		// READ LIGHT BRIGHTNESS
		if (spi1_rx_buf[1] <= 100) {
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	2b64      	cmp	r3, #100	@ 0x64
 8000acc:	d813      	bhi.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
			lights_read_brightness = (uint16_t)(spi1_rx_buf[1])*100;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <Handle_SPI1_RX_CPLT+0x150>)
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	0091      	lsls	r1, r2, #2
 8000adc:	461a      	mov	r2, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <Handle_SPI1_RX_CPLT+0x168>)
 8000ae8:	801a      	strh	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000aea:	f7ff ff11 	bl	8000910 <Command_UPDATE_LIGHTS>
 8000aee:	e002      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
				break;
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <Handle_SPI1_RX_CPLT+0x146>
		}
	} else {
		// Invalid Command
		return;
 8000af4:	bf00      	nop
	}
}
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20007fc4 	.word	0x20007fc4
 8000b00:	20007ec0 	.word	0x20007ec0
 8000b04:	2000006c 	.word	0x2000006c
 8000b08:	20007ec2 	.word	0x20007ec2
 8000b0c:	20007ebc 	.word	0x20007ebc
 8000b10:	2000001c 	.word	0x2000001c
 8000b14:	20007fc1 	.word	0x20007fc1
 8000b18:	20000022 	.word	0x20000022

08000b1c <HAL_GPIO_EXTI_Callback>:

// ------------------------------------------------------------ OVERRIDE EXTERNAL INTERRUPTS -- //
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SPI1_CS_Pin) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	2b10      	cmp	r3, #16
 8000b2a:	d124      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x5a>
	  if (HAL_GPIO_ReadPin(SPI1_CS_GPIO_Port, SPI1_CS_Pin)) {
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4814      	ldr	r0, [pc, #80]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b30:	f001 ff50 	bl	80029d4 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_GPIO_EXTI_Callback+0x24>
		  // SPI CS was just deasserted
		  Handle_SPI1_RX_CPLT();
 8000b3a:	f7ff ff39 	bl	80009b0 <Handle_SPI1_RX_CPLT>
		  }
	  }
  } else {
      __NOP();
  }
}
 8000b3e:	e01b      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x5c>
		  Handle_SPI1_RX_START();
 8000b40:	f7ff ff22 	bl	8000988 <Handle_SPI1_RX_START>
		  if (spi1_tx_queued) {
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d015      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0x5c>
			  uint8_t tx_data[2] = {(inputs.states & 0xFF00) >> 8, inputs.states & 0x00FF};
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b4e:	8b1b      	ldrh	r3, [r3, #24]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	733b      	strb	r3, [r7, #12]
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b5a:	8b1b      	ldrh	r3, [r3, #24]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	737b      	strb	r3, [r7, #13]
			  HAL_SPI_Transmit_IT(&hspi1, tx_data, 2);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2202      	movs	r2, #2
 8000b66:	4619      	mov	r1, r3
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x70>)
 8000b6a:	f003 fc83 	bl	8004474 <HAL_SPI_Transmit_IT>
			  spi1_tx_queued = 0;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
}
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x5c>
      __NOP();
 8000b76:	bf00      	nop
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	48000800 	.word	0x48000800
 8000b84:	20007ebc 	.word	0x20007ebc
 8000b88:	20007ea0 	.word	0x20007ea0
 8000b8c:	20007fc4 	.word	0x20007fc4

08000b90 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
//	ls032.spi_state = 0;
//	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
	LS032_TX_DMA_CPLT(&ls032);
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <HAL_SPI_TxCpltCallback+0x18>)
 8000b9a:	f000 ff1e 	bl	80019da <LS032_TX_DMA_CPLT>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000006c 	.word	0x2000006c

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <MX_SPI1_Init+0x70>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bd0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_SPI1_Init+0x6c>)
 8000c10:	f003 fa16 	bl	8004040 <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000c1a:	f7ff ffc7 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20007fc4 	.word	0x20007fc4
 8000c28:	40013000 	.word	0x40013000

08000c2c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <MX_SPI3_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c44:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c48:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c60:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_SPI3_Init+0x74>)
 8000c8e:	f003 f9d7 	bl	8004040 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000c98:	f7ff ff88 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20008028 	.word	0x20008028
 8000ca4:	40003c00 	.word	0x40003c00

08000ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	@ 0x30
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a58      	ldr	r2, [pc, #352]	@ (8000e28 <HAL_SPI_MspInit+0x180>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d153      	bne.n	8000d72 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cca:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	4a57      	ldr	r2, [pc, #348]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cd6:	4b55      	ldr	r3, [pc, #340]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b52      	ldr	r3, [pc, #328]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a51      	ldr	r2, [pc, #324]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b4f      	ldr	r3, [pc, #316]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23e0      	movs	r3, #224	@ 0xe0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f001 fcb2 	bl	8002680 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000d1c:	4b44      	ldr	r3, [pc, #272]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d1e:	4a45      	ldr	r2, [pc, #276]	@ (8000e34 <HAL_SPI_MspInit+0x18c>)
 8000d20:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000d22:	4b43      	ldr	r3, [pc, #268]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d28:	4b41      	ldr	r3, [pc, #260]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b3e      	ldr	r3, [pc, #248]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d36:	2280      	movs	r2, #128	@ 0x80
 8000d38:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d40:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d54:	4836      	ldr	r0, [pc, #216]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d56:	f001 fa5d 	bl	8002214 <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000d60:	f7ff ff24 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a32      	ldr	r2, [pc, #200]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d68:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d6a:	4a31      	ldr	r2, [pc, #196]	@ (8000e30 <HAL_SPI_MspInit+0x188>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d70:	e056      	b.n	8000e20 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a30      	ldr	r2, [pc, #192]	@ (8000e38 <HAL_SPI_MspInit+0x190>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d151      	bne.n	8000e20 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	4a2a      	ldr	r2, [pc, #168]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	4a24      	ldr	r2, [pc, #144]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <HAL_SPI_MspInit+0x184>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000dac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <HAL_SPI_MspInit+0x194>)
 8000dca:	f001 fc59 	bl	8002680 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <HAL_SPI_MspInit+0x19c>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000ddc:	2210      	movs	r2, #16
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e04:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000e06:	f001 fa05 	bl	8002214 <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8000e10:	f7ff fecc 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000e18:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <HAL_SPI_MspInit+0x198>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	@ 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	2000808c 	.word	0x2000808c
 8000e34:	4002001c 	.word	0x4002001c
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	200080d4 	.word	0x200080d4
 8000e44:	4002041c 	.word	0x4002041c

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f001 f83f 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}

08000eee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_CS_Pin);
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f001 fd9e 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <DMA1_Channel2_IRQHandler+0x10>)
 8000f02:	f001 fadd 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000808c 	.word	0x2000808c

08000f10 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <DMA2_Channel2_IRQHandler+0x10>)
 8000f16:	f001 fad3 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200080d4 	.word	0x200080d4

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f76:	2230      	movs	r2, #48	@ 0x30
 8000f78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f82:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <MX_TIM2_Init+0xb0>)
 8000f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f92:	4818      	ldr	r0, [pc, #96]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000f94:	f004 fa7f 	bl	8005496 <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f9e:	f7ff fe05 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000fb2:	f005 f883 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fbc:	f7ff fdf6 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	@ 0x60
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <MX_TIM2_Init+0xb4>)
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000fd8:	f004 fbba 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000fe2:	f7ff fde3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <MX_TIM2_Init+0xac>)
 8000fe8:	f000 f91c 	bl	8001224 <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000811c 	.word	0x2000811c
 8000ff8:	0061a7ff 	.word	0x0061a7ff
 8000ffc:	0030d400 	.word	0x0030d400

08001000 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001026:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <MX_TIM3_Init+0xc8>)
 8001028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001038:	f242 720f 	movw	r2, #9999	@ 0x270f
 800103c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800104a:	481e      	ldr	r0, [pc, #120]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 800104c:	f004 fa23 	bl	8005496 <HAL_TIM_PWM_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001056:	f7ff fda9 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 800106a:	f005 f827 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001074:	f7ff fd9a 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001078:	2360      	movs	r3, #96	@ 0x60
 800107a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 800107c:	2332      	movs	r3, #50	@ 0x32
 800107e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	2204      	movs	r2, #4
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 8001090:	f004 fb5e 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800109a:	f7ff fd87 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	2208      	movs	r2, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 80010a6:	f004 fb53 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80010b0:	f7ff fd7c 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <MX_TIM3_Init+0xc4>)
 80010b6:	f000 f8b5 	bl	8001224 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	@ 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20008168 	.word	0x20008168
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_TIM4_Init+0xc4>)
 80010f2:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <MX_TIM4_Init+0xc8>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_TIM4_Init+0xc4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_TIM4_Init+0xc4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001102:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001104:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001108:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_TIM4_Init+0xc4>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001116:	481e      	ldr	r0, [pc, #120]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001118:	f004 f9bd 	bl	8005496 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001122:	f7ff fd43 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4816      	ldr	r0, [pc, #88]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001136:	f004 ffc1 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001140:	f7ff fd34 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	@ 0x60
 8001146:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_TIM4_Init+0xc4>)
 800115c:	f004 faf8 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001166:	f7ff fd21 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2208      	movs	r2, #8
 800116e:	4619      	mov	r1, r3
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001172:	f004 faed 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800117c:	f7ff fd16 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <MX_TIM4_Init+0xc4>)
 8001182:	f000 f84f 	bl	8001224 <HAL_TIM_MspPostInit>

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200081b4 	.word	0x200081b4
 8001194:	40000800 	.word	0x40000800

08001198 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a8:	d10c      	bne.n	80011c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011c2:	e022      	b.n	800120a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <HAL_TIM_PWM_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10c      	bne.n	80011e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
}
 80011e6:	e010      	b.n	800120a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_TIM_PWM_MspInit+0x88>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10b      	bne.n	800120a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_TIM_PWM_MspInit+0x80>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	40000400 	.word	0x40000400
 8001220:	40000800 	.word	0x40000800

08001224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001244:	d11c      	bne.n	8001280 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b33      	ldr	r3, [pc, #204]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a32      	ldr	r2, [pc, #200]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b30      	ldr	r3, [pc, #192]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 800125e:	2308      	movs	r3, #8
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126e:	2301      	movs	r3, #1
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4827      	ldr	r0, [pc, #156]	@ (8001318 <HAL_TIM_MspPostInit+0xf4>)
 800127a:	f001 fa01 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800127e:	e044      	b.n	800130a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a25      	ldr	r2, [pc, #148]	@ (800131c <HAL_TIM_MspPostInit+0xf8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11d      	bne.n	80012c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 80012a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b4:	2302      	movs	r3, #2
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4818      	ldr	r0, [pc, #96]	@ (8001320 <HAL_TIM_MspPostInit+0xfc>)
 80012c0:	f001 f9de 	bl	8002680 <HAL_GPIO_Init>
}
 80012c4:	e021      	b.n	800130a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <HAL_TIM_MspPostInit+0x100>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d11c      	bne.n	800130a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_TIM_MspPostInit+0xf0>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 80012e8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <HAL_TIM_MspPostInit+0xf4>)
 8001306:	f001 f9bb 	bl	8002680 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	40000400 	.word	0x40000400
 8001320:	48000800 	.word	0x48000800
 8001324:	40000800 	.word	0x40000800

08001328 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 800132e:	4a15      	ldr	r2, [pc, #84]	@ (8001384 <MX_USART2_UART_Init+0x5c>)
 8001330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART2_UART_Init+0x58>)
 800136c:	f004 ff2e 	bl	80061cc <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001376:	f7ff fc19 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20008200 	.word	0x20008200
 8001384:	40004400 	.word	0x40004400

08001388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0aa      	sub	sp, #168	@ 0xa8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2284      	movs	r2, #132	@ 0x84
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 fc30 	bl	8006c0e <memset>
  if(uartHandle->Instance==USART2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <HAL_UART_MspInit+0xb0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d13b      	bne.n	8001430 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 f9af 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d0:	f7ff fbec 	bl	8000bac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013de:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001404:	230c      	movs	r3, #12
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	2307      	movs	r3, #7
 800141e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f001 f928 	bl	8002680 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001430:	bf00      	nop
 8001432:	37a8      	adds	r7, #168	@ 0xa8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff fd6e 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f005 fbd7 	bl	8006c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff f933 	bl	80006dc <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001484:	08030890 	.word	0x08030890
  ldr r2, =_sbss
 8001488:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800148c:	2000828c 	.word	0x2000828c

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>

08001492 <Inputs_CheckInput>:
 *      Author: Lucas Di Sarra
 */

#include "../Inc/Inputs.h"

uint8_t Inputs_CheckInput(Inputs_HandleTypeDef *inputs, uint8_t input) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
	if (input >= NUM_INPUTS) return ERROR;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d901      	bls.n	80014a8 <Inputs_CheckInput+0x16>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e079      	b.n	800159c <Inputs_CheckInput+0x10a>

	HAL_GPIO_WritePin(inputs->sel_gpio_handles[3], inputs->sel_gpio_pins[3], input & 0b1000);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	330c      	adds	r3, #12
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	3306      	adds	r3, #6
 80014b6:	8819      	ldrh	r1, [r3, #0]
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	f001 fa9f 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[2], inputs->sel_gpio_pins[2], input & 0b0100);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	3308      	adds	r3, #8
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	3304      	adds	r3, #4
 80014d4:	8819      	ldrh	r1, [r3, #0]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	f001 fa90 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[1], inputs->sel_gpio_pins[1], input & 0b0010);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	3304      	adds	r3, #4
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	3302      	adds	r3, #2
 80014f2:	8819      	ldrh	r1, [r3, #0]
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	f001 fa81 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], input & 0b0001);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	8819      	ldrh	r1, [r3, #0]
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	f001 fa74 	bl	8002a04 <HAL_GPIO_WritePin>

	uint8_t old_state = inputs->states;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	8b1b      	ldrh	r3, [r3, #24]
 8001520:	73fb      	strb	r3, [r7, #15]

	// Write state changes
	if (HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	889b      	ldrh	r3, [r3, #4]
 800152a:	4619      	mov	r1, r3
 800152c:	4610      	mov	r0, r2
 800152e:	f001 fa51 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00d      	beq.n	8001554 <Inputs_CheckInput+0xc2>
		inputs->states |= (0x0001 << (uint16_t)input);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	8b1b      	ldrh	r3, [r3, #24]
 800153c:	b21a      	sxth	r2, r3
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	831a      	strh	r2, [r3, #24]
 8001552:	e00e      	b.n	8001572 <Inputs_CheckInput+0xe0>
	else
		inputs->states &= 0xFFFF ^ (0x0001 << (uint16_t)input);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8b1b      	ldrh	r3, [r3, #24]
 8001558:	b21a      	sxth	r2, r3
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	b21b      	sxth	r3, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	b21b      	sxth	r3, r3
 8001568:	4013      	ands	r3, r2
 800156a:	b21b      	sxth	r3, r3
 800156c:	b29a      	uxth	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	831a      	strh	r2, [r3, #24]

	// Check if the masked buttons have changed
	if ((old_state & inputs->states_itmask) != (inputs->states & inputs->states_itmask))
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	8b52      	ldrh	r2, [r2, #26]
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	8b11      	ldrh	r1, [r2, #24]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	8b52      	ldrh	r2, [r2, #26]
 8001582:	400a      	ands	r2, r1
 8001584:	b292      	uxth	r2, r2
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <Inputs_CheckInput+0x108>
		HAL_GPIO_WritePin(inputs->it_gpio_handle, inputs->it_gpio_pin, GPIO_PIN_SET);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6898      	ldr	r0, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	899b      	ldrh	r3, [r3, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	4619      	mov	r1, r3
 8001596:	f001 fa35 	bl	8002a04 <HAL_GPIO_WritePin>

	return SUCCESS;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Inputs_CheckAll>:
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], 0);

	return HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin);
}

uint8_t Inputs_CheckAll(Inputs_HandleTypeDef *inputs) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	inputs->states = 0xFFFF;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b2:	831a      	strh	r2, [r3, #24]
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e007      	b.n	80015ca <Inputs_CheckAll+0x26>
		Inputs_CheckInput(inputs, i);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff67 	bl	8001492 <Inputs_CheckInput>
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d9f4      	bls.n	80015ba <Inputs_CheckAll+0x16>
	}

	return SUCCESS;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e003      	b.n	80015f0 <delay_us+0x16>
		asm("NOP");
 80015e8:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3f6      	bcc.n	80015e8 <delay_us+0xe>
	}
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed (FLIPPED)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 800161a:	80fb      	strh	r3, [r7, #6]
	//gate_addr++;										// gate is 1 indexed (NORMAL)
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2280      	movs	r2, #128	@ 0x80
 8001620:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25a      	sxtb	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b25b      	sxtb	r3, r3
 800163a:	b2da      	uxtb	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25a      	sxtb	r2, r3
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	105b      	asrs	r3, r3, #1
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	b25b      	sxtb	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b25a      	sxtb	r2, r3
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25a      	sxtb	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25a      	sxtb	r2, r3
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001692:	b25b      	sxtb	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b25a      	sxtb	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	105b      	asrs	r3, r3, #1
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	10db      	asrs	r3, r3, #3
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25a      	sxtb	r2, r3
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	115b      	asrs	r3, r3, #5
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b25a      	sxtb	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25a      	sxtb	r2, r3
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	11db      	asrs	r3, r3, #7
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b25a      	sxtb	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25a      	sxtb	r2, r3
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	125b      	asrs	r3, r3, #9
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b25b      	sxtb	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b25a      	sxtb	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	603a      	str	r2, [r7, #0]
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001784:	d301      	bcc.n	800178a <get_idx_from_pos+0x1c>
 8001786:	2301      	movs	r3, #1
 8001788:	e014      	b.n	80017b4 <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	2b29      	cmp	r3, #41	@ 0x29
 800178e:	d901      	bls.n	8001794 <get_idx_from_pos+0x26>
 8001790:	2301      	movs	r3, #1
 8001792:	e00f      	b.n	80017b4 <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	461a      	mov	r2, r3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	441a      	add	r2, r3
 800179c:	0052      	lsls	r2, r2, #1
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3302      	adds	r3, #2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d0:	461a      	mov	r2, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	f005 fa1b 	bl	8006c0e <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	81fb      	strh	r3, [r7, #14]
 80017dc:	e00e      	b.n	80017fc <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	89fa      	ldrh	r2, [r7, #14]
 80017e4:	212c      	movs	r1, #44	@ 0x2c
 80017e6:	fb01 f202 	mul.w	r2, r1, r2
 80017ea:	441a      	add	r2, r3
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff09 	bl	8001608 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	3301      	adds	r3, #1
 80017fa:	81fb      	strh	r3, [r7, #14]
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001802:	d3ec      	bcc.n	80017de <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001804:	2300      	movs	r3, #0
 8001806:	737b      	strb	r3, [r7, #13]
 8001808:	e030      	b.n	800186c <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	2200      	movs	r2, #0
 8001816:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181c:	7b7b      	ldrb	r3, [r7, #13]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	2200      	movs	r2, #0
 8001824:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182a:	7b7b      	ldrb	r3, [r7, #13]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	2200      	movs	r2, #0
 8001832:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001838:	7b7b      	ldrb	r3, [r7, #13]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	2200      	movs	r2, #0
 8001840:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001854:	7b7b      	ldrb	r3, [r7, #13]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	22ff      	movs	r2, #255	@ 0xff
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f005 f9d4 	bl	8006c0e <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001866:	7b7b      	ldrb	r3, [r7, #13]
 8001868:	3301      	adds	r3, #1
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	2b1f      	cmp	r3, #31
 8001870:	d9cb      	bls.n	800180a <LS032_Init+0x4a>
	}

	// Flag SPI as Idle
	ls032->spi_state = 0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	72da      	strb	r2, [r3, #11]

	delay_us(30);
 800187e:	201e      	movs	r0, #30
 8001880:	f7ff feab 	bl	80015da <delay_us>
	// Need to clear twice for some reason
	LS032_Wipe(ls032);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f9a0 	bl	8001bca <LS032_Wipe>
	LS032_Wipe(ls032);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f99d 	bl	8001bca <LS032_Wipe>
	delay_us(30);
 8001890:	201e      	movs	r0, #30
 8001892:	f7ff fea2 	bl	80015da <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69d8      	ldr	r0, [r3, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	8c1b      	ldrh	r3, [r3, #32]
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	f001 f8af 	bl	8002a04 <HAL_GPIO_WritePin>
	delay_us(30);
 80018a6:	201e      	movs	r0, #30
 80018a8:	f7ff fe97 	bl	80015da <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8a1b      	ldrh	r3, [r3, #16]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f003 fe44 	bl	8005544 <HAL_TIM_PWM_Start>
	delay_us(30);
 80018bc:	201e      	movs	r0, #30
 80018be:	f7ff fe8c 	bl	80015da <delay_us>

	return SUCCESS;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LS032_TX>:

uint8_t LS032_TX(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7a9b      	ldrb	r3, [r3, #10]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <LS032_TX+0x1a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e034      	b.n	8001950 <LS032_TX+0x84>

	// Clear update queue
	ls032->update_queued = 0;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6858      	ldr	r0, [r3, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	f001 f882 	bl	8002a04 <HAL_GPIO_WritePin>
	delay_us(3);
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff fe6a 	bl	80015da <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	2364      	movs	r3, #100	@ 0x64
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	f002 fc39 	bl	8004186 <HAL_SPI_Transmit>
 8001914:	4603      	mov	r3, r0
 8001916:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fe5e 	bl	80015da <delay_us>
	if (ret) {
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <LS032_TX+0x72>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6858      	ldr	r0, [r3, #4]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	891b      	ldrh	r3, [r3, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	f001 f868 	bl	8002a04 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	729a      	strb	r2, [r3, #10]
		return ret;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	e008      	b.n	8001950 <LS032_TX+0x84>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6858      	ldr	r0, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	891b      	ldrh	r3, [r3, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	f001 f85b 	bl	8002a04 <HAL_GPIO_WritePin>

	return SUCCESS;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	7a9b      	ldrb	r3, [r3, #10]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <LS032_TX_DMA+0x1a>
 800196e:	2301      	movs	r3, #1
 8001970:	e02f      	b.n	80019d2 <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6858      	ldr	r0, [r3, #4]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	891b      	ldrh	r3, [r3, #8]
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	f001 f83c 	bl	8002a04 <HAL_GPIO_WritePin>
	delay_us(3);
 800198c:	2003      	movs	r0, #3
 800198e:	f7ff fe24 	bl	80015da <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fdf2 	bl	8004584 <HAL_SPI_Transmit_DMA>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fe15 	bl	80015da <delay_us>
	if (ret) {
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00c      	beq.n	80019d0 <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6858      	ldr	r0, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	891b      	ldrh	r3, [r3, #8]
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	f001 f81f 	bl	8002a04 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	729a      	strb	r2, [r3, #10]
		return ret;
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	e000      	b.n	80019d2 <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <LS032_TX_DMA_CPLT>:

uint8_t LS032_TX_DMA_CPLT(LS032_HandleTypeDef *ls032) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	// Release the CS
	ls032->spi_state = 0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6858      	ldr	r0, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	891b      	ldrh	r3, [r3, #8]
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	f001 f806 	bl	8002a04 <HAL_GPIO_WritePin>

	return SUCCESS;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	4608      	mov	r0, r1
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	72fb      	strb	r3, [r7, #11]
 8001a14:	460b      	mov	r3, r1
 8001a16:	813b      	strh	r3, [r7, #8]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	2b1f      	cmp	r3, #31
 8001a20:	d901      	bls.n	8001a26 <LS032_TextReg_SetPos+0x24>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01c      	b.n	8001a60 <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 8001a26:	893b      	ldrh	r3, [r7, #8]
 8001a28:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001a2c:	d301      	bcc.n	8001a32 <LS032_TextReg_SetPos+0x30>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e016      	b.n	8001a60 <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2b29      	cmp	r3, #41	@ 0x29
 8001a36:	d901      	bls.n	8001a3c <LS032_TextReg_SetPos+0x3a>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e011      	b.n	8001a60 <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	893a      	ldrh	r2, [r7, #8]
 8001a48:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a4e:	7afb      	ldrb	r3, [r7, #11]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b1f      	cmp	r3, #31
 8001a80:	d901      	bls.n	8001a86 <LS032_TextReg_SetSize+0x1a>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d901      	bls.n	8001a90 <LS032_TextReg_SetSize+0x24>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00a      	b.n	8001aa6 <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	78ba      	ldrb	r2, [r7, #2]
 8001a9c:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LS032_TextReg_SetMode>:

uint8_t LS032_TextReg_SetMode(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t mode) {
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	2b1f      	cmp	r3, #31
 8001ac6:	d901      	bls.n	8001acc <LS032_TextReg_SetMode+0x1a>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00a      	b.n	8001ae2 <LS032_TextReg_SetMode+0x30>

	ls032->registers[reg].mode = mode;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	78ba      	ldrb	r2, [r7, #2]
 8001ad8:	71da      	strb	r2, [r3, #7]

	ls032->update_queued = 1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LS032_TextReg_SetString>:

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	72fb      	strb	r3, [r7, #11]
 8001afc:	4613      	mov	r3, r2
 8001afe:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	d901      	bls.n	8001b0a <LS032_TextReg_SetString+0x1c>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e020      	b.n	8001b4c <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	7aba      	ldrb	r2, [r7, #10]
 8001b16:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	22ff      	movs	r2, #255	@ 0xff
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 f870 	bl	8006c0e <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	7aba      	ldrb	r2, [r7, #10]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f005 f892 	bl	8006c68 <memcpy>

	ls032->update_queued = 1;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <LS032_UpdateManual>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	if (LS032_DrawScene(ls032)) return ERROR;
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f89c 	bl	8001c9a <LS032_DrawScene>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <LS032_UpdateManual+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e008      	b.n	8001b7e <LS032_UpdateManual+0x2a>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	461a      	mov	r2, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff feee 	bl	8001958 <LS032_TX_DMA>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <LS032_UpdateAsync>:

uint8_t LS032_UpdateAsync(LS032_HandleTypeDef *ls032) {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	if (ls032->update_queued == 0) return ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7adb      	ldrb	r3, [r3, #11]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <LS032_UpdateAsync+0x14>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e013      	b.n	8001bc2 <LS032_UpdateAsync+0x3c>
	LS032_Clear(ls032);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f827 	bl	8001bee <LS032_Clear>
	if (LS032_DrawScene(ls032)) return ERROR;
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f87a 	bl	8001c9a <LS032_DrawScene>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <LS032_UpdateAsync+0x2a>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e008      	b.n	8001bc2 <LS032_UpdateAsync+0x3c>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fecc 	bl	8001958 <LS032_TX_DMA>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <LS032_Wipe>:

uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	81bb      	strh	r3, [r7, #12]
	return LS032_TX(ls032, clear_cmd, 2);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe74 	bl	80018cc <LS032_TX>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <LS032_Clear>:

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	81fb      	strh	r3, [r7, #14]
 8001bfa:	e00f      	b.n	8001c1c <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	212c      	movs	r1, #44	@ 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	3302      	adds	r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	222a      	movs	r2, #42	@ 0x2a
 8001c0e:	21ff      	movs	r1, #255	@ 0xff
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fffc 	bl	8006c0e <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	81fb      	strh	r3, [r7, #14]
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001c22:	d3eb      	bcc.n	8001bfc <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001c2e:	b5b0      	push	{r4, r5, r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af02      	add	r7, sp, #8
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	2b1f      	cmp	r3, #31
 8001c3e:	d901      	bls.n	8001c44 <LS032_DrawRegister+0x16>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e026      	b.n	8001c92 <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001c4e:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001c5a:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001c66:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001c72:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 8001c7e:	68d2      	ldr	r2, [r2, #12]
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	462b      	mov	r3, r5
 8001c86:	4622      	mov	r2, r4
 8001c88:	4601      	mov	r1, r0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8d4 	bl	8001e38 <LS032_DrawString>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}

08001c9a <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e00c      	b.n	8001cc2 <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffbe 	bl	8001c2e <LS032_DrawRegister>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <LS032_DrawScene+0x22>
			return ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e006      	b.n	8001cca <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b1f      	cmp	r3, #31
 8001cc6:	d9ef      	bls.n	8001ca8 <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff86 	bl	8001bee <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	81fb      	strh	r3, [r7, #14]
 8001cee:	e01c      	b.n	8001d2a <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf4:	89f9      	ldrh	r1, [r7, #14]
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	212c      	movs	r1, #44	@ 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	440b      	add	r3, r1
 8001d06:	3302      	adds	r3, #2
 8001d08:	18d0      	adds	r0, r2, r3
 8001d0a:	89fa      	ldrh	r2, [r7, #14]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00da      	lsls	r2, r3, #3
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <LS032_DrawLogo+0x68>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	2215      	movs	r2, #21
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f004 ffa2 	bl	8006c68 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001d24:	89fb      	ldrh	r3, [r7, #14]
 8001d26:	3301      	adds	r3, #1
 8001d28:	81fb      	strh	r3, [r7, #14]
 8001d2a:	89fb      	ldrh	r3, [r7, #14]
 8001d2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d30:	d3de      	bcc.n	8001cf0 <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	0802df7c 	.word	0x0802df7c

08001d40 <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 8001d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d101      	bne.n	8001d66 <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e05d      	b.n	8001e22 <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a30      	ldr	r2, [pc, #192]	@ (8001e2c <LS032_DrawChar+0xec>)
 8001d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 8001d80:	2301      	movs	r3, #1
 8001d82:	e04e      	b.n	8001e22 <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <LS032_DrawChar+0xf0>)
 8001d88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d8c:	8a7b      	ldrh	r3, [r7, #18]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <LS032_DrawChar+0xf4>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001da0:	f107 0210 	add.w	r2, r7, #16
 8001da4:	8939      	ldrh	r1, [r7, #8]
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fce0 	bl	800176e <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	da04      	bge.n	8001dc4 <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f1c3 0318 	rsb	r3, r3, #24
 8001dc2:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001dca:	7dbb      	ldrb	r3, [r7, #22]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	da04      	bge.n	8001dda <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001dd8:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	757b      	strb	r3, [r7, #21]
 8001dde:	e01b      	b.n	8001e18 <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	8a3a      	ldrh	r2, [r7, #16]
 8001de6:	189c      	adds	r4, r3, r2
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <LS032_DrawChar+0xf0>)
 8001dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001df0:	8a7b      	ldrh	r3, [r7, #18]
 8001df2:	7d79      	ldrb	r1, [r7, #21]
 8001df4:	7db8      	ldrb	r0, [r7, #22]
 8001df6:	fb00 f101 	mul.w	r1, r0, r1
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	7dba      	ldrb	r2, [r7, #22]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4620      	mov	r0, r4
 8001e06:	f004 ff2f 	bl	8006c68 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001e0a:	8a3b      	ldrh	r3, [r7, #16]
 8001e0c:	332c      	adds	r3, #44	@ 0x2c
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001e12:	7d7b      	ldrb	r3, [r7, #21]
 8001e14:	3301      	adds	r3, #1
 8001e16:	757b      	strb	r3, [r7, #21]
 8001e18:	7d7a      	ldrb	r2, [r7, #21]
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3df      	bcc.n	8001de0 <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000028 	.word	0x20000028
 8001e30:	20000038 	.word	0x20000038
 8001e34:	0802df78 	.word	0x0802df78

08001e38 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	813b      	strh	r3, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	e025      	b.n	8001ea4 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	79f8      	ldrb	r0, [r7, #7]
 8001e62:	893a      	ldrh	r2, [r7, #8]
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4603      	mov	r3, r0
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff68 	bl	8001d40 <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <LS032_DrawString+0x80>)
 8001e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e7c:	440b      	add	r3, r1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <LS032_DrawString+0x84>)
 8001e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e90:	8abb      	ldrh	r3, [r7, #20]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	75fb      	strb	r3, [r7, #23]
 8001ea4:	7dfa      	ldrb	r2, [r7, #23]
 8001ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3d4      	bcc.n	8001e58 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000028 	.word	0x20000028
 8001ebc:	20000038 	.word	0x20000038

08001ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f960 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed0:	200f      	movs	r0, #15
 8001ed2:	f000 f80d 	bl	8001ef0 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	e001      	b.n	8001ee6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee2:	f7fe ffb1 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <HAL_InitTick+0x6c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_InitTick+0x70>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_InitTick+0x6c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f96d 	bl	80021fa <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d809      	bhi.n	8001f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f000 f937 	bl	80021a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_InitTick+0x74>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e007      	b.n	8001f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e004      	b.n	8001f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e001      	b.n	8001f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000004c 	.word	0x2000004c
 8001f60:	20000024 	.word	0x20000024
 8001f64:	20000048 	.word	0x20000048

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000004c 	.word	0x2000004c
 8001f8c:	20008288 	.word	0x20008288

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20008288 	.word	0x20008288

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000004c 	.word	0x2000004c

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	@ (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	@ (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	@ (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	@ (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e098      	b.n	8002358 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b4d      	ldr	r3, [pc, #308]	@ (8002364 <HAL_DMA_Init+0x150>)
 800222e:	429a      	cmp	r2, r3
 8002230:	d80f      	bhi.n	8002252 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <HAL_DMA_Init+0x154>)
 800223a:	4413      	add	r3, r2
 800223c:	4a4b      	ldr	r2, [pc, #300]	@ (800236c <HAL_DMA_Init+0x158>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a48      	ldr	r2, [pc, #288]	@ (8002370 <HAL_DMA_Init+0x15c>)
 800224e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002250:	e00e      	b.n	8002270 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_DMA_Init+0x160>)
 800225a:	4413      	add	r3, r2
 800225c:	4a43      	ldr	r2, [pc, #268]	@ (800236c <HAL_DMA_Init+0x158>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a42      	ldr	r2, [pc, #264]	@ (8002378 <HAL_DMA_Init+0x164>)
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022ca:	d039      	beq.n	8002340 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	4a27      	ldr	r2, [pc, #156]	@ (8002370 <HAL_DMA_Init+0x15c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11a      	bne.n	800230c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022d6:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_DMA_Init+0x168>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	210f      	movs	r1, #15
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4924      	ldr	r1, [pc, #144]	@ (800237c <HAL_DMA_Init+0x168>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022f0:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_DMA_Init+0x168>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	f003 031c 	and.w	r3, r3, #28
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	491d      	ldr	r1, [pc, #116]	@ (800237c <HAL_DMA_Init+0x168>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
 800230a:	e019      	b.n	8002340 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800230c:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <HAL_DMA_Init+0x16c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	f003 031c 	and.w	r3, r3, #28
 8002318:	210f      	movs	r1, #15
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	4917      	ldr	r1, [pc, #92]	@ (8002380 <HAL_DMA_Init+0x16c>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002326:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_DMA_Init+0x16c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 031c 	and.w	r3, r3, #28
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	4911      	ldr	r1, [pc, #68]	@ (8002380 <HAL_DMA_Init+0x16c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40020407 	.word	0x40020407
 8002368:	bffdfff8 	.word	0xbffdfff8
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	40020000 	.word	0x40020000
 8002374:	bffdfbf8 	.word	0xbffdfbf8
 8002378:	40020400 	.word	0x40020400
 800237c:	400200a8 	.word	0x400200a8
 8002380:	400204a8 	.word	0x400204a8

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x20>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e04b      	b.n	800243c <HAL_DMA_Start_IT+0xb8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d13a      	bne.n	800242e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f91e 	bl	800261e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 020e 	orr.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00f      	b.n	800241c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020a 	orr.w	r2, r2, #10
 800241a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e005      	b.n	800243a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d008      	beq.n	800246e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e022      	b.n	80024b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020e 	bic.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f003 021c 	and.w	r2, r3, #28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	f003 031c 	and.w	r3, r3, #28
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d026      	beq.n	800253a <HAL_DMA_IRQHandler+0x7a>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	f003 021c 	and.w	r2, r3, #28
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	2104      	movs	r1, #4
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	2b00      	cmp	r3, #0
 800252e:	d071      	beq.n	8002614 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002538:	e06c      	b.n	8002614 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f003 031c 	and.w	r3, r3, #28
 8002542:	2202      	movs	r2, #2
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02e      	beq.n	80025ac <HAL_DMA_IRQHandler+0xec>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d029      	beq.n	80025ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020a 	bic.w	r2, r2, #10
 8002574:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f003 021c 	and.w	r2, r3, #28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2102      	movs	r1, #2
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d038      	beq.n	8002614 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025aa:	e033      	b.n	8002614 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f003 031c 	and.w	r3, r3, #28
 80025b4:	2208      	movs	r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02a      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020e 	bic.w	r2, r2, #14
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f003 021c 	and.w	r2, r3, #28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002614:	bf00      	nop
 8002616:	bf00      	nop
}
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002630:	f003 021c 	and.w	r2, r3, #28
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b10      	cmp	r3, #16
 800264e:	d108      	bne.n	8002662 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002660:	e007      	b.n	8002672 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	e17f      	b.n	8002990 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8171 	beq.w	800298a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d005      	beq.n	80026c0 <HAL_GPIO_Init+0x40>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d130      	bne.n	8002722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f6:	2201      	movs	r2, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0201 	and.w	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b03      	cmp	r3, #3
 800272c:	d118      	bne.n	8002760 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	6939      	ldr	r1, [r7, #16]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80ac 	beq.w	800298a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	4a5e      	ldr	r2, [pc, #376]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6613      	str	r3, [r2, #96]	@ 0x60
 800283e:	4b5c      	ldr	r3, [pc, #368]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x242>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4f      	ldr	r2, [pc, #316]	@ (80029b8 <HAL_GPIO_Init+0x338>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4e      	ldr	r2, [pc, #312]	@ (80029bc <HAL_GPIO_Init+0x33c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <HAL_GPIO_Init+0x340>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <HAL_GPIO_Init+0x344>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <HAL_GPIO_Init+0x348>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <HAL_GPIO_Init+0x34c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x22a>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028c2:	2300      	movs	r3, #0
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d4:	4937      	ldr	r1, [pc, #220]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002906:	4a32      	ldr	r2, [pc, #200]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800290c:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002930:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800295a:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002984:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	f47f ae78 	bne.w	8002690 <HAL_GPIO_Init+0x10>
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	48000400 	.word	0x48000400
 80029bc:	48000800 	.word	0x48000800
 80029c0:	48000c00 	.word	0x48000c00
 80029c4:	48001000 	.word	0x48001000
 80029c8:	48001400 	.word	0x48001400
 80029cc:	48001800 	.word	0x48001800
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e001      	b.n	80029f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4a:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f862 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40007000 	.word	0x40007000

08002a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a8e:	d130      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a90:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a9c:	d038      	beq.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aae:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2232      	movs	r2, #50	@ 0x32
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac4:	e002      	b.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f2      	bne.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aec:	d110      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e00f      	b.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	d007      	beq.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b08:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40007000 	.word	0x40007000
 8002b24:	20000024 	.word	0x20000024
 8002b28:	431bde83 	.word	0x431bde83

08002b2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e3ca      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3e:	4b97      	ldr	r3, [pc, #604]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b48:	4b94      	ldr	r3, [pc, #592]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80e4 	beq.w	8002d28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4a>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	f040 808b 	bne.w	8002c84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	f040 8087 	bne.w	8002c84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b76:	4b89      	ldr	r3, [pc, #548]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e3a2      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	4b82      	ldr	r3, [pc, #520]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x7c>
 8002b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_OscConfig+0x88>
 8002ba8:	4b7c      	ldr	r3, [pc, #496]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d223      	bcs.n	8002c00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fd53 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e383      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bcc:	4b73      	ldr	r3, [pc, #460]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a72      	ldr	r2, [pc, #456]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	496d      	ldr	r1, [pc, #436]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4b6c      	ldr	r3, [pc, #432]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4968      	ldr	r1, [pc, #416]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
 8002bfe:	e025      	b.n	8002c4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c00:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b63      	ldr	r3, [pc, #396]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4960      	ldr	r1, [pc, #384]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	495b      	ldr	r1, [pc, #364]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fd13 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e343      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c4c:	f000 fc4a 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b52      	ldr	r3, [pc, #328]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	4950      	ldr	r1, [pc, #320]	@ (8002da0 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
 8002c68:	4a4e      	ldr	r2, [pc, #312]	@ (8002da4 <HAL_RCC_OscConfig+0x278>)
 8002c6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f93d 	bl	8001ef0 <HAL_InitTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d052      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	e327      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d032      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c8c:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a42      	ldr	r2, [pc, #264]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c98:	f7ff f97a 	bl	8001f90 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca0:	f7ff f976 	bl	8001f90 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e310      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a36      	ldr	r2, [pc, #216]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b34      	ldr	r3, [pc, #208]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4931      	ldr	r1, [pc, #196]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	492c      	ldr	r1, [pc, #176]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	e01a      	b.n	8002d28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a29      	ldr	r2, [pc, #164]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfe:	f7ff f947 	bl	8001f90 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d06:	f7ff f943 	bl	8001f90 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e2dd      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d18:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1da>
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d074      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x21a>
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d10e      	bne.n	8002d5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d064      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d160      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e2ba      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x24a>
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e026      	b.n	8002dc4 <HAL_RCC_OscConfig+0x298>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7e:	d115      	bne.n	8002dac <HAL_RCC_OscConfig+0x280>
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a02      	ldr	r2, [pc, #8]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x298>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08006c9c 	.word	0x08006c9c
 8002da4:	20000024 	.word	0x20000024
 8002da8:	20000048 	.word	0x20000048
 8002dac:	4ba0      	ldr	r3, [pc, #640]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a9f      	ldr	r2, [pc, #636]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b9d      	ldr	r3, [pc, #628]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a9c      	ldr	r2, [pc, #624]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f8e0 	bl	8001f90 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7ff f8dc 	bl	8001f90 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	@ 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e276      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de6:	4b92      	ldr	r3, [pc, #584]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2a8>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7ff f8cc 	bl	8001f90 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f8c8 	bl	8001f90 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	@ 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e262      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0e:	4b88      	ldr	r3, [pc, #544]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2d0>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d060      	beq.n	8002eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x310>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d119      	bne.n	8002e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d116      	bne.n	8002e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_OscConfig+0x328>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e23f      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b76      	ldr	r3, [pc, #472]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	4973      	ldr	r1, [pc, #460]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	e040      	b.n	8002eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d023      	beq.n	8002eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e72:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f887 	bl	8001f90 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7ff f883 	bl	8001f90 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e21d      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e98:	4b65      	ldr	r3, [pc, #404]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b62      	ldr	r3, [pc, #392]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	495f      	ldr	r1, [pc, #380]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b5d      	ldr	r3, [pc, #372]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7ff f863 	bl	8001f90 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ece:	f7ff f85f 	bl	8001f90 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1f9      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee0:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d03c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f00:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f06:	4a4a      	ldr	r2, [pc, #296]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff f83e 	bl	8001f90 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff f83a 	bl	8001f90 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1d4      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ef      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
 8002f38:	e01b      	b.n	8002f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f40:	4a3b      	ldr	r2, [pc, #236]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f821 	bl	8001f90 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7ff f81d 	bl	8001f90 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1b7      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ef      	bne.n	8002f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a6 	beq.w	80030cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f84:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	4a26      	ldr	r2, [pc, #152]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9c:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fac:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d118      	bne.n	8002fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe ffe4 	bl	8001f90 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7fe ffe0 	bl	8001f90 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e17a      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCC_OscConfig+0x508>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <HAL_RCC_OscConfig+0x4d8>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003002:	e029      	b.n	8003058 <HAL_RCC_OscConfig+0x52c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d115      	bne.n	8003038 <HAL_RCC_OscConfig+0x50c>
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003012:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800301c:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	4a03      	ldr	r2, [pc, #12]	@ (8003030 <HAL_RCC_OscConfig+0x504>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x52c>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
 8003038:	4b9c      	ldr	r3, [pc, #624]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303e:	4a9b      	ldr	r2, [pc, #620]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003048:	4b98      	ldr	r3, [pc, #608]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304e:	4a97      	ldr	r2, [pc, #604]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe ff96 	bl	8001f90 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe ff92 	bl	8001f90 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e12a      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307e:	4b8b      	ldr	r3, [pc, #556]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ed      	beq.n	8003068 <HAL_RCC_OscConfig+0x53c>
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe ff7f 	bl	8001f90 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe ff7b 	bl	8001f90 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e113      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ac:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ed      	bne.n	8003096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b7a      	ldr	r3, [pc, #488]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	4a79      	ldr	r2, [pc, #484]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80fe 	beq.w	80032d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	2b02      	cmp	r3, #2
 80030dc:	f040 80d0 	bne.w	8003280 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030e0:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d130      	bne.n	8003156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	3b01      	subs	r3, #1
 8003100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d127      	bne.n	8003156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003110:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d11f      	bne.n	8003156 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003120:	2a07      	cmp	r2, #7
 8003122:	bf14      	ite	ne
 8003124:	2201      	movne	r2, #1
 8003126:	2200      	moveq	r2, #0
 8003128:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d109      	bne.n	8003156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d06e      	beq.n	8003234 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d069      	beq.n	8003230 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0ad      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003178:	4b4c      	ldr	r3, [pc, #304]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4b      	ldr	r2, [pc, #300]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003184:	f7fe ff04 	bl	8001f90 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe ff00 	bl	8001f90 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e09a      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319e:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031aa:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	4b40      	ldr	r3, [pc, #256]	@ (80032b0 <HAL_RCC_OscConfig+0x784>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031c4:	0212      	lsls	r2, r2, #8
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031cc:	0852      	lsrs	r2, r2, #1
 80031ce:	3a01      	subs	r2, #1
 80031d0:	0552      	lsls	r2, r2, #21
 80031d2:	4311      	orrs	r1, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	3a01      	subs	r2, #1
 80031dc:	0652      	lsls	r2, r2, #25
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031e4:	0912      	lsrs	r2, r2, #4
 80031e6:	0452      	lsls	r2, r2, #17
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4930      	ldr	r1, [pc, #192]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031f0:	4b2e      	ldr	r3, [pc, #184]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2d      	ldr	r2, [pc, #180]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031fc:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a2a      	ldr	r2, [pc, #168]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003208:	f7fe fec2 	bl	8001f90 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fe febe 	bl	8001f90 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e058      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800322e:	e050      	b.n	80032d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04f      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003234:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d148      	bne.n	80032d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003240:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a19      	ldr	r2, [pc, #100]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a16      	ldr	r2, [pc, #88]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003258:	f7fe fe9a 	bl	8001f90 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fe96 	bl	8001f90 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e030      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x734>
 800327e:	e028      	b.n	80032d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d023      	beq.n	80032ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003286:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <HAL_RCC_OscConfig+0x780>)
 800328c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fe7d 	bl	8001f90 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003298:	e00c      	b.n	80032b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329a:	f7fe fe79 	bl	8001f90 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d905      	bls.n	80032b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e013      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_OscConfig+0x7b0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ec      	bne.n	800329a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_OscConfig+0x7b0>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4905      	ldr	r1, [pc, #20]	@ (80032dc <HAL_RCC_OscConfig+0x7b0>)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x7b4>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e001      	b.n	80032d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	feeefffc 	.word	0xfeeefffc

080032e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0e7      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b75      	ldr	r3, [pc, #468]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d910      	bls.n	8003328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b72      	ldr	r3, [pc, #456]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4970      	ldr	r1, [pc, #448]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b6e      	ldr	r3, [pc, #440]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cf      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d908      	bls.n	8003356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4960      	ldr	r1, [pc, #384]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04c      	beq.n	80033fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b5a      	ldr	r3, [pc, #360]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d121      	bne.n	80033ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0a6      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e09a      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800339a:	4b4e      	ldr	r3, [pc, #312]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e08e      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033aa:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e086      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b46      	ldr	r3, [pc, #280]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4943      	ldr	r1, [pc, #268]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe fde0 	bl	8001f90 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fe fddc 	bl	8001f90 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e06e      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	492b      	ldr	r1, [pc, #172]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d210      	bcs.n	800345a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003438:	4b25      	ldr	r3, [pc, #148]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 0207 	bic.w	r2, r3, #7
 8003440:	4923      	ldr	r1, [pc, #140]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003448:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_RCC_ClockConfig+0x1ec>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e036      	b.n	80034c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003466:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4918      	ldr	r1, [pc, #96]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003484:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4910      	ldr	r1, [pc, #64]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003498:	f000 f824 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	490b      	ldr	r1, [pc, #44]	@ (80034d8 <HAL_RCC_ClockConfig+0x1f4>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	4a09      	ldr	r2, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x1f8>)
 80034b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <HAL_RCC_ClockConfig+0x1fc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fd17 	bl	8001ef0 <HAL_InitTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c6:	7afb      	ldrb	r3, [r7, #11]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08006c9c 	.word	0x08006c9c
 80034dc:	20000024 	.word	0x20000024
 80034e0:	20000048 	.word	0x20000048

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d121      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d11e      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003518:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003524:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e005      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003534:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003540:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	e00a      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d102      	bne.n	8003562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800355c:	4b25      	ldr	r3, [pc, #148]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e004      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d101      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003568:	4b22      	ldr	r3, [pc, #136]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800356a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d134      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0xa6>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d003      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0xac>
 8003588:	e005      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800358a:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800358c:	617b      	str	r3, [r7, #20]
      break;
 800358e:	e005      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003590:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003592:	617b      	str	r3, [r7, #20]
      break;
 8003594:	e002      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	617b      	str	r3, [r7, #20]
      break;
 800359a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800359c:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	3301      	adds	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	fb03 f202 	mul.w	r2, r3, r2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x108>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	0e5b      	lsrs	r3, r3, #25
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	3301      	adds	r3, #1
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035dc:	69bb      	ldr	r3, [r7, #24]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	@ 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08006cb4 	.word	0x08006cb4
 80035f4:	00f42400 	.word	0x00f42400

080035f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	@ (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000024 	.word	0x20000024

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4904      	ldr	r1, [pc, #16]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	08006cac 	.word	0x08006cac

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003640:	f7ff ffda 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4904      	ldr	r1, [pc, #16]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08006cac 	.word	0x08006cac

08003668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003674:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003680:	f7ff f9f0 	bl	8002a64 <HAL_PWREx_GetVoltageRange>
 8003684:	6178      	str	r0, [r7, #20]
 8003686:	e014      	b.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b25      	ldr	r3, [pc, #148]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	4a24      	ldr	r2, [pc, #144]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	@ 0x58
 8003694:	4b22      	ldr	r3, [pc, #136]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a0:	f7ff f9e0 	bl	8002a64 <HAL_PWREx_GetVoltageRange>
 80036a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b8:	d10b      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b80      	cmp	r3, #128	@ 0x80
 80036be:	d919      	bls.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80036c4:	d902      	bls.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c6:	2302      	movs	r3, #2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e013      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036cc:	2301      	movs	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e010      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b80      	cmp	r3, #128	@ 0x80
 80036d6:	d902      	bls.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036d8:	2303      	movs	r3, #3
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e00a      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b80      	cmp	r3, #128	@ 0x80
 80036e2:	d102      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036e4:	2302      	movs	r3, #2
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	e004      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b70      	cmp	r3, #112	@ 0x70
 80036ee:	d101      	bne.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 0207 	bic.w	r2, r3, #7
 80036fc:	4909      	ldr	r1, [pc, #36]	@ (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	40022000 	.word	0x40022000

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d041      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003748:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800374c:	d02a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800374e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003752:	d824      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800375a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800375e:	d81e      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003768:	d010      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800376c:	4b86      	ldr	r3, [pc, #536]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a85      	ldr	r2, [pc, #532]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003776:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fa8b 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3320      	adds	r3, #32
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb76 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	74fb      	strb	r3, [r7, #19]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ac:	4b76      	ldr	r3, [pc, #472]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ba:	4973      	ldr	r1, [pc, #460]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037c2:	e001      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d041      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037dc:	d02a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037e2:	d824      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ee:	d81e      	bhi.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f8:	d010      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037fa:	e018      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037fc:	4b62      	ldr	r3, [pc, #392]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a61      	ldr	r2, [pc, #388]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003806:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003808:	e015      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fa43 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800381a:	e00c      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3320      	adds	r3, #32
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fb2e 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382c:	e003      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	74fb      	strb	r3, [r7, #19]
      break;
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800383c:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800384a:	494f      	ldr	r1, [pc, #316]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003852:	e001      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a0 	beq.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800386a:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b41      	ldr	r3, [pc, #260]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	4a40      	ldr	r2, [pc, #256]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	4b3e      	ldr	r3, [pc, #248]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003898:	2301      	movs	r3, #1
 800389a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800389c:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3a      	ldr	r2, [pc, #232]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a8:	f7fe fb72 	bl	8001f90 <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038ae:	e009      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fe fb6e 	bl	8001f90 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	74fb      	strb	r3, [r7, #19]
        break;
 80038c2:	e005      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038c4:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ef      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d15c      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d019      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003920:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe fb2d 	bl	8001f90 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003938:	e00b      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe fb29 	bl	8001f90 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d902      	bls.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	74fb      	strb	r3, [r7, #19]
            break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ec      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003976:	4904      	ldr	r1, [pc, #16]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800397e:	e009      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
 8003984:	e006      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003994:	7c7b      	ldrb	r3, [r7, #17]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4ba1      	ldr	r3, [pc, #644]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	4aa0      	ldr	r2, [pc, #640]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b2:	4b9b      	ldr	r3, [pc, #620]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b8:	f023 0203 	bic.w	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c0:	4997      	ldr	r1, [pc, #604]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d4:	4b92      	ldr	r3, [pc, #584]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039da:	f023 020c 	bic.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	498f      	ldr	r1, [pc, #572]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	4986      	ldr	r1, [pc, #536]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a18:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	497e      	ldr	r1, [pc, #504]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a3a:	4b79      	ldr	r3, [pc, #484]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a48:	4975      	ldr	r1, [pc, #468]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5c:	4b70      	ldr	r3, [pc, #448]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6a:	496d      	ldr	r1, [pc, #436]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7e:	4b68      	ldr	r3, [pc, #416]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	4964      	ldr	r1, [pc, #400]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	495c      	ldr	r1, [pc, #368]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac2:	4b57      	ldr	r3, [pc, #348]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad0:	4953      	ldr	r1, [pc, #332]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	494b      	ldr	r1, [pc, #300]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b06:	4b46      	ldr	r3, [pc, #280]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	4942      	ldr	r1, [pc, #264]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d028      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b28:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b36:	493a      	ldr	r1, [pc, #232]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b48:	4b35      	ldr	r3, [pc, #212]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a34      	ldr	r2, [pc, #208]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b52:	60d3      	str	r3, [r2, #12]
 8003b54:	e011      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b5e:	d10c      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f898 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d028      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b86:	4b26      	ldr	r3, [pc, #152]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4922      	ldr	r1, [pc, #136]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bb0:	60d3      	str	r3, [r2, #12]
 8003bb2:	e011      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f869 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d031      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf2:	490b      	ldr	r1, [pc, #44]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c02:	d10f      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f846 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	74bb      	strb	r3, [r7, #18]
 8003c1e:	e013      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c20:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3320      	adds	r3, #32
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f925 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c54:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c62:	490d      	ldr	r1, [pc, #52]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c84:	4904      	ldr	r1, [pc, #16]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000

08003c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003caa:	4b75      	ldr	r3, [pc, #468]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cb6:	4b72      	ldr	r3, [pc, #456]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10d      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cce:	4b6c      	ldr	r3, [pc, #432]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d047      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e044      	b.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d018      	beq.n	8003d22 <RCCEx_PLLSAI1_Config+0x86>
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d825      	bhi.n	8003d40 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d002      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x62>
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d009      	beq.n	8003d10 <RCCEx_PLLSAI1_Config+0x74>
 8003cfc:	e020      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cfe:	4b60      	ldr	r3, [pc, #384]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0e:	e01a      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d10:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d20:	e013      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d22:	4b57      	ldr	r3, [pc, #348]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d2e:	4b54      	ldr	r3, [pc, #336]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d3e:	e006      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e004      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	4944      	ldr	r1, [pc, #272]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d17d      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d78:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a40      	ldr	r2, [pc, #256]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fe f904 	bl	8001f90 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8c:	f7fe f900 	bl	8001f90 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da0:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ef      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d160      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	0211      	lsls	r1, r2, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	0912      	lsrs	r2, r2, #4
 8003dd0:	0452      	lsls	r2, r2, #17
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	492a      	ldr	r1, [pc, #168]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
 8003dda:	e027      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d112      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de2:	4b27      	ldr	r3, [pc, #156]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	0211      	lsls	r1, r2, #8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6912      	ldr	r2, [r2, #16]
 8003df8:	0852      	lsrs	r2, r2, #1
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	0552      	lsls	r2, r2, #21
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	491f      	ldr	r1, [pc, #124]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]
 8003e06:	e011      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e08:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6952      	ldr	r2, [r2, #20]
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	430a      	orrs	r2, r1
 8003e26:	4916      	ldr	r1, [pc, #88]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe f8aa 	bl	8001f90 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3e:	e009      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e40:	f7fe f8a6 	bl	8001f90 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	73fb      	strb	r3, [r7, #15]
          break;
 8003e52:	e005      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4904      	ldr	r1, [pc, #16]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000

08003e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e9e:	4b67      	ldr	r3, [pc, #412]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0203 	and.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d10d      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eb6:	4b61      	ldr	r3, [pc, #388]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d047      	beq.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e044      	b.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d018      	beq.n	8003f0a <RCCEx_PLLSAI2_Config+0x86>
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d825      	bhi.n	8003f28 <RCCEx_PLLSAI2_Config+0xa4>
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d002      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x62>
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d009      	beq.n	8003ef8 <RCCEx_PLLSAI2_Config+0x74>
 8003ee4:	e020      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ee6:	4b55      	ldr	r3, [pc, #340]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11d      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef6:	e01a      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ef8:	4b50      	ldr	r3, [pc, #320]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e013      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f16:	4b49      	ldr	r3, [pc, #292]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f26:	e006      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e004      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	430b      	orrs	r3, r1
 8003f54:	4939      	ldr	r1, [pc, #228]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d167      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f60:	4b36      	ldr	r3, [pc, #216]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a35      	ldr	r2, [pc, #212]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f810 	bl	8001f90 <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f72:	e009      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f74:	f7fe f80c 	bl	8001f90 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	73fb      	strb	r3, [r7, #15]
        break;
 8003f86:	e005      	b.n	8003f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f88:	4b2c      	ldr	r3, [pc, #176]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ef      	bne.n	8003f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d14a      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d111      	bne.n	8003fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6892      	ldr	r2, [r2, #8]
 8003fb0:	0211      	lsls	r1, r2, #8
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	0912      	lsrs	r2, r2, #4
 8003fb8:	0452      	lsls	r2, r2, #17
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	491f      	ldr	r1, [pc, #124]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	614b      	str	r3, [r1, #20]
 8003fc2:	e011      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6892      	ldr	r2, [r2, #8]
 8003fd4:	0211      	lsls	r1, r2, #8
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6912      	ldr	r2, [r2, #16]
 8003fda:	0852      	lsrs	r2, r2, #1
 8003fdc:	3a01      	subs	r2, #1
 8003fde:	0652      	lsls	r2, r2, #25
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4916      	ldr	r1, [pc, #88]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fe8:	4b14      	ldr	r3, [pc, #80]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a13      	ldr	r2, [pc, #76]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fd ffcc 	bl	8001f90 <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffa:	e009      	b.n	8004010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ffc:	f7fd ffc8 	bl	8001f90 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d902      	bls.n	8004010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	73fb      	strb	r3, [r7, #15]
          break;
 800400e:	e005      	b.n	800401c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004010:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ef      	beq.n	8003ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4904      	ldr	r1, [pc, #16]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e095      	b.n	800417e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004062:	d009      	beq.n	8004078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
 800406a:	e005      	b.n	8004078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fe08 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040b8:	d902      	bls.n	80040c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e002      	b.n	80040c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040ce:	d007      	beq.n	80040e0 <HAL_SPI_Init+0xa0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	ea42 0103 	orr.w	r1, r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 0204 	and.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800415c:	ea42 0103 	orr.w	r1, r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b088      	sub	sp, #32
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004196:	f7fd fefb 	bl	8001f90 <HAL_GetTick>
 800419a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
 80041ae:	e15c      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Transmit+0x36>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e154      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Transmit+0x48>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e14d      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004220:	d10f      	bne.n	8004242 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424c:	2b40      	cmp	r3, #64	@ 0x40
 800424e:	d007      	beq.n	8004260 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004268:	d952      	bls.n	8004310 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Transmit+0xf2>
 8004272:	8b7b      	ldrh	r3, [r7, #26]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d145      	bne.n	8004304 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	881a      	ldrh	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	1c9a      	adds	r2, r3, #2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800429c:	e032      	b.n	8004304 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d112      	bne.n	80042d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042d0:	e018      	b.n	8004304 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d2:	f7fd fe5d 	bl	8001f90 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d803      	bhi.n	80042ea <HAL_SPI_Transmit+0x164>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d102      	bne.n	80042f0 <HAL_SPI_Transmit+0x16a>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0b2      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1c7      	bne.n	800429e <HAL_SPI_Transmit+0x118>
 800430e:	e083      	b.n	8004418 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_SPI_Transmit+0x198>
 8004318:	8b7b      	ldrh	r3, [r7, #26]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d177      	bne.n	800440e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d912      	bls.n	800434e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	881a      	ldrh	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b02      	subs	r3, #2
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800434c:	e05f      	b.n	800440e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004374:	e04b      	b.n	800440e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d12b      	bne.n	80043dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d912      	bls.n	80043b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	1c9a      	adds	r2, r3, #2
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b02      	subs	r3, #2
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043b2:	e02c      	b.n	800440e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043da:	e018      	b.n	800440e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043dc:	f7fd fdd8 	bl	8001f90 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d803      	bhi.n	80043f4 <HAL_SPI_Transmit+0x26e>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Transmit+0x274>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e02d      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ae      	bne.n	8004376 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 ffb5 	bl	800538c <SPI_EndRxTxTransaction>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004468:	2300      	movs	r3, #0
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_SPI_Transmit_IT+0x1a>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e06d      	b.n	800456e <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	e065      	b.n	800456e <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_SPI_Transmit_IT+0x3c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e05e      	b.n	800456e <HAL_SPI_Transmit_IT+0xfa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2203      	movs	r2, #3
 80044bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044fc:	d903      	bls.n	8004506 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a1e      	ldr	r2, [pc, #120]	@ (800457c <HAL_SPI_Transmit_IT+0x108>)
 8004502:	651a      	str	r2, [r3, #80]	@ 0x50
 8004504:	e002      	b.n	800450c <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <HAL_SPI_Transmit_IT+0x10c>)
 800450a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004514:	d10f      	bne.n	8004536 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d007      	beq.n	8004554 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800456a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	0800505b 	.word	0x0800505b
 8004580:	08005015 	.word	0x08005015

08004584 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	e0d4      	b.n	800474c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_Transmit_DMA+0x2a>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0cc      	b.n	800474c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_Transmit_DMA+0x3c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0c5      	b.n	800474c <HAL_SPI_Transmit_DMA+0x1c8>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2203      	movs	r2, #3
 80045cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004612:	d10f      	bne.n	8004634 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004632:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	4a46      	ldr	r2, [pc, #280]	@ (8004754 <HAL_SPI_Transmit_DMA+0x1d0>)
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	4a45      	ldr	r2, [pc, #276]	@ (8004758 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	4a44      	ldr	r2, [pc, #272]	@ (800475c <HAL_SPI_Transmit_DMA+0x1d8>)
 800464a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	2200      	movs	r2, #0
 8004652:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004662:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800466c:	d82d      	bhi.n	80046ca <HAL_SPI_Transmit_DMA+0x146>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004678:	d127      	bne.n	80046ca <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10f      	bne.n	80046a8 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004696:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046a6:	e010      	b.n	80046ca <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046b6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	4619      	mov	r1, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046e2:	f7fd fe4f 	bl	8002384 <HAL_DMA_Start_IT>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f0:	f043 0210 	orr.w	r2, r3, #16
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e023      	b.n	800474c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b40      	cmp	r3, #64	@ 0x40
 8004710:	d007      	beq.n	8004722 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0220 	orr.w	r2, r2, #32
 8004738:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0202 	orr.w	r2, r2, #2
 8004748:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08004f81 	.word	0x08004f81
 8004758:	08004da3 	.word	0x08004da3
 800475c:	08004fd5 	.word	0x08004fd5

08004760 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
 800477c:	e105      	b.n	800498a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <HAL_SPI_Receive_DMA+0x48>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800478e:	d10b      	bne.n	80047a8 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2204      	movs	r2, #4
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f8fe 	bl	80049a0 <HAL_SPI_TransmitReceive_DMA>
 80047a4:	4603      	mov	r3, r0
 80047a6:	e0f0      	b.n	800498a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Receive_DMA+0x54>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e8      	b.n	800498a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Receive_DMA+0x66>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0e1      	b.n	800498a <HAL_SPI_Receive_DMA+0x22a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2204      	movs	r2, #4
 80047d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004812:	d10f      	bne.n	8004834 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004822:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004832:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004842:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800484c:	d908      	bls.n	8004860 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	e042      	b.n	80048e6 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800486e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487a:	d134      	bne.n	80048e6 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800488a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004892:	b29b      	uxth	r3, r3
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048aa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80048be:	e012      	b.n	80048e6 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <HAL_SPI_Receive_DMA+0x234>)
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <HAL_SPI_Receive_DMA+0x238>)
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	4a28      	ldr	r2, [pc, #160]	@ (800499c <HAL_SPI_Receive_DMA+0x23c>)
 80048fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	2200      	movs	r2, #0
 8004904:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	4619      	mov	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004920:	f7fd fd30 	bl	8002384 <HAL_DMA_Start_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	f043 0210 	orr.w	r2, r3, #16
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e023      	b.n	800498a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b40      	cmp	r3, #64	@ 0x40
 800494e:	d007      	beq.n	8004960 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08004f9d 	.word	0x08004f9d
 8004998:	08004e49 	.word	0x08004e49
 800499c:	08004fd5 	.word	0x08004fd5

080049a0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049b4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d00c      	beq.n	80049dc <HAL_SPI_TransmitReceive_DMA+0x3c>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c8:	d106      	bne.n	80049d8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <HAL_SPI_TransmitReceive_DMA+0x38>
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d001      	beq.n	80049dc <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
 80049da:	e158      	b.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_SPI_TransmitReceive_DMA+0x4e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_TransmitReceive_DMA+0x4e>
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e14d      	b.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_SPI_TransmitReceive_DMA+0x60>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e146      	b.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d003      	beq.n	8004a1c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2205      	movs	r2, #5
 8004a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	887a      	ldrh	r2, [r7, #2]
 8004a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	887a      	ldrh	r2, [r7, #2]
 8004a46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004a64:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a6e:	d908      	bls.n	8004a82 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a7e:	605a      	str	r2, [r3, #4]
 8004a80:	e06f      	b.n	8004b62 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a90:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d126      	bne.n	8004aec <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ac8:	e010      	b.n	8004aec <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ad8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af6:	d134      	bne.n	8004b62 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b06:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004b3a:	e012      	b.n	8004b62 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b4a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d108      	bne.n	8004b80 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	4a49      	ldr	r2, [pc, #292]	@ (8004c98 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	4a48      	ldr	r2, [pc, #288]	@ (8004c9c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8004b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b7e:	e007      	b.n	8004b90 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	4a46      	ldr	r2, [pc, #280]	@ (8004ca0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	4a45      	ldr	r2, [pc, #276]	@ (8004ca4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	4a44      	ldr	r2, [pc, #272]	@ (8004ca8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004b96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	4619      	mov	r1, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004bba:	f7fd fbe3 	bl	8002384 <HAL_DMA_Start_IT>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc8:	f043 0210 	orr.w	r2, r3, #16
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e058      	b.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	2200      	movs	r2, #0
 8004c0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	4619      	mov	r1, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c24:	f7fd fbae 	bl	8002384 <HAL_DMA_Start_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e023      	b.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d007      	beq.n	8004c64 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0220 	orr.w	r2, r2, #32
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0202 	orr.w	r2, r2, #2
 8004c8a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	08004f9d 	.word	0x08004f9d
 8004c9c:	08004e49 	.word	0x08004e49
 8004ca0:	08004fb9 	.word	0x08004fb9
 8004ca4:	08004ef1 	.word	0x08004ef1
 8004ca8:	08004fd5 	.word	0x08004fd5

08004cac <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00f      	beq.n	8004ce0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fd fbbd 	bl	8002444 <HAL_DMA_Abort>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	f043 0210 	orr.w	r2, r3, #16
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00f      	beq.n	8004d08 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fd fba9 	bl	8002444 <HAL_DMA_Abort>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfc:	f043 0210 	orr.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0203 	bic.w	r2, r2, #3
 8004d16:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db0:	f7fd f8ee 	bl	8001f90 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d03b      	beq.n	8004e3c <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0220 	bic.w	r2, r2, #32
 8004dd2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0202 	bic.w	r2, r2, #2
 8004de2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	2164      	movs	r1, #100	@ 0x64
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f000 facf 	bl	800538c <SPI_EndRxTxTransaction>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e34:	6978      	ldr	r0, [r7, #20]
 8004e36:	f7ff ffaa 	bl	8004d8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e3a:	e002      	b.n	8004e42 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f7fb fea7 	bl	8000b90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e56:	f7fd f89b 	bl	8001f90 <HAL_GetTick>
 8004e5a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d03c      	beq.n	8004ee4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0220 	bic.w	r2, r2, #32
 8004e78:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <SPI_DMAReceiveCplt+0x56>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8a:	d108      	bne.n	8004e9e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0203 	bic.w	r2, r2, #3
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	e007      	b.n	8004eae <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	2164      	movs	r1, #100	@ 0x64
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa12 	bl	80052dc <SPI_EndRxTransaction>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff56 	bl	8004d8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ee2:	e002      	b.n	8004eea <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff20 	bl	8004d2a <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004efe:	f7fd f847 	bl	8001f90 <HAL_GetTick>
 8004f02:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d030      	beq.n	8004f74 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0220 	bic.w	r2, r2, #32
 8004f20:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	2164      	movs	r1, #100	@ 0x64
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fa30 	bl	800538c <SPI_EndRxTxTransaction>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0203 	bic.w	r2, r2, #3
 8004f4c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff ff0e 	bl	8004d8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004f72:	e002      	b.n	8004f7a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fee2 	bl	8004d3e <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fedf 	bl	8004d52 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fedb 	bl	8004d66 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fed7 	bl	8004d7a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0203 	bic.w	r2, r2, #3
 8004ff0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	f043 0210 	orr.w	r2, r3, #16
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff fec1 	bl	8004d8e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9e3 	bl	8005418 <SPI_CloseTx_ISR>
  }
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	1c9a      	adds	r2, r3, #2
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9c1 	bl	8005418 <SPI_CloseTx_ISR>
  }
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050b0:	f7fc ff6e 	bl	8001f90 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050c0:	f7fc ff66 	bl	8001f90 <HAL_GetTick>
 80050c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050c6:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	015b      	lsls	r3, r3, #5
 80050cc:	0d1b      	lsrs	r3, r3, #20
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050d6:	e054      	b.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d050      	beq.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050e0:	f7fc ff56 	bl	8001f90 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d902      	bls.n	80050f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d13d      	bne.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005104:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d111      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005118:	d004      	beq.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005122:	d107      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005132:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513c:	d10f      	bne.n	800515e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800515c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e017      	b.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	429a      	cmp	r2, r3
 800519e:	d19b      	bne.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000024 	.word	0x20000024

080051b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	@ 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051c2:	f7fc fee5 	bl	8001f90 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4413      	add	r3, r2
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80051d2:	f7fc fedd 	bl	8001f90 <HAL_GetTick>
 80051d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051e0:	4b3d      	ldr	r3, [pc, #244]	@ (80052d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00da      	lsls	r2, r3, #3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	0d1b      	lsrs	r3, r3, #20
 80051f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051f8:	e060      	b.n	80052bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005200:	d107      	bne.n	8005212 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005210:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d050      	beq.n	80052bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800521a:	f7fc feb9 	bl	8001f90 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005226:	429a      	cmp	r2, r3
 8005228:	d902      	bls.n	8005230 <SPI_WaitFifoStateUntilTimeout+0x80>
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d13d      	bne.n	80052ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800523e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005248:	d111      	bne.n	800526e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005252:	d004      	beq.n	800525e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525c:	d107      	bne.n	800526e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005276:	d10f      	bne.n	8005298 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005296:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e010      	b.n	80052ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d196      	bne.n	80051fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3728      	adds	r7, #40	@ 0x28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000024 	.word	0x20000024

080052dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052f0:	d111      	bne.n	8005316 <SPI_EndRxTransaction+0x3a>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052fa:	d004      	beq.n	8005306 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005304:	d107      	bne.n	8005316 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005314:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	@ 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff febd 	bl	80050a0 <SPI_WaitFlagStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e023      	b.n	8005384 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005344:	d11d      	bne.n	8005382 <SPI_EndRxTransaction+0xa6>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800534e:	d004      	beq.n	800535a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005358:	d113      	bne.n	8005382 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff ff22 	bl	80051b0 <SPI_WaitFifoStateUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e000      	b.n	8005384 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff ff03 	bl	80051b0 <SPI_WaitFifoStateUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e027      	b.n	8005410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	@ 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fe68 	bl	80050a0 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e014      	b.n	8005410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fedc 	bl	80051b0 <SPI_WaitFifoStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e000      	b.n	8005410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005420:	f7fc fdb6 	bl	8001f90 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005434:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	2164      	movs	r1, #100	@ 0x64
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff ffa6 	bl	800538c <SPI_EndRxTxTransaction>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fc84 	bl	8004d8e <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005486:	e002      	b.n	800548e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fb fb81 	bl	8000b90 <HAL_SPI_TxCpltCallback>
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e049      	b.n	800553c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fe6b 	bl	8001198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f000 fa4f 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <HAL_TIM_PWM_Start+0x24>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e03c      	b.n	80055e2 <HAL_TIM_PWM_Start+0x9e>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d109      	bne.n	8005582 <HAL_TIM_PWM_Start+0x3e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e02f      	b.n	80055e2 <HAL_TIM_PWM_Start+0x9e>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d109      	bne.n	800559c <HAL_TIM_PWM_Start+0x58>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e022      	b.n	80055e2 <HAL_TIM_PWM_Start+0x9e>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d109      	bne.n	80055b6 <HAL_TIM_PWM_Start+0x72>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	bf14      	ite	ne
 80055ae:	2301      	movne	r3, #1
 80055b0:	2300      	moveq	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e015      	b.n	80055e2 <HAL_TIM_PWM_Start+0x9e>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d109      	bne.n	80055d0 <HAL_TIM_PWM_Start+0x8c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e008      	b.n	80055e2 <HAL_TIM_PWM_Start+0x9e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e09c      	b.n	8005724 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_PWM_Start+0xb6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f8:	e023      	b.n	8005642 <HAL_TIM_PWM_Start+0xfe>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d104      	bne.n	800560a <HAL_TIM_PWM_Start+0xc6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005608:	e01b      	b.n	8005642 <HAL_TIM_PWM_Start+0xfe>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b08      	cmp	r3, #8
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0xd6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005618:	e013      	b.n	8005642 <HAL_TIM_PWM_Start+0xfe>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0xe6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005628:	e00b      	b.n	8005642 <HAL_TIM_PWM_Start+0xfe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b10      	cmp	r3, #16
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xf6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005638:	e003      	b.n	8005642 <HAL_TIM_PWM_Start+0xfe>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fd10 	bl	8006070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a35      	ldr	r2, [pc, #212]	@ (800572c <HAL_TIM_PWM_Start+0x1e8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <HAL_TIM_PWM_Start+0x13e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a34      	ldr	r2, [pc, #208]	@ (8005730 <HAL_TIM_PWM_Start+0x1ec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00e      	beq.n	8005682 <HAL_TIM_PWM_Start+0x13e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a32      	ldr	r2, [pc, #200]	@ (8005734 <HAL_TIM_PWM_Start+0x1f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_TIM_PWM_Start+0x13e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a31      	ldr	r2, [pc, #196]	@ (8005738 <HAL_TIM_PWM_Start+0x1f4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_TIM_PWM_Start+0x13e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2f      	ldr	r2, [pc, #188]	@ (800573c <HAL_TIM_PWM_Start+0x1f8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <HAL_TIM_PWM_Start+0x142>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_TIM_PWM_Start+0x144>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a22      	ldr	r2, [pc, #136]	@ (800572c <HAL_TIM_PWM_Start+0x1e8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d018      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a22      	ldr	r2, [pc, #136]	@ (8005740 <HAL_TIM_PWM_Start+0x1fc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <HAL_TIM_PWM_Start+0x200>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005748 <HAL_TIM_PWM_Start+0x204>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a17      	ldr	r2, [pc, #92]	@ (8005730 <HAL_TIM_PWM_Start+0x1ec>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x19e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <HAL_TIM_PWM_Start+0x1f0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d115      	bne.n	800570e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	4b18      	ldr	r3, [pc, #96]	@ (800574c <HAL_TIM_PWM_Start+0x208>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d015      	beq.n	8005720 <HAL_TIM_PWM_Start+0x1dc>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fa:	d011      	beq.n	8005720 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	e008      	b.n	8005720 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e000      	b.n	8005722 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	00010007 	.word	0x00010007

08005750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0ff      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b14      	cmp	r3, #20
 800577a:	f200 80f0 	bhi.w	800595e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057d9 	.word	0x080057d9
 8005788:	0800595f 	.word	0x0800595f
 800578c:	0800595f 	.word	0x0800595f
 8005790:	0800595f 	.word	0x0800595f
 8005794:	08005819 	.word	0x08005819
 8005798:	0800595f 	.word	0x0800595f
 800579c:	0800595f 	.word	0x0800595f
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	0800585b 	.word	0x0800585b
 80057a8:	0800595f 	.word	0x0800595f
 80057ac:	0800595f 	.word	0x0800595f
 80057b0:	0800595f 	.word	0x0800595f
 80057b4:	0800589b 	.word	0x0800589b
 80057b8:	0800595f 	.word	0x0800595f
 80057bc:	0800595f 	.word	0x0800595f
 80057c0:	0800595f 	.word	0x0800595f
 80057c4:	080058dd 	.word	0x080058dd
 80057c8:	0800595f 	.word	0x0800595f
 80057cc:	0800595f 	.word	0x0800595f
 80057d0:	0800595f 	.word	0x0800595f
 80057d4:	0800591d 	.word	0x0800591d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f970 	bl	8005ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
      break;
 8005816:	e0a5      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f9e0 	bl	8005be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
      break;
 8005858:	e084      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fa49 	bl	8005cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0204 	bic.w	r2, r2, #4
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
      break;
 8005898:	e064      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fab1 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69d9      	ldr	r1, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
      break;
 80058da:	e043      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fafa 	bl	8005edc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800591a:	e023      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fb3e 	bl	8005fa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005936:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005946:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800595c:	e002      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
      break;
 8005962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a46      	ldr	r2, [pc, #280]	@ (8005aa4 <TIM_Base_SetConfig+0x12c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a43      	ldr	r2, [pc, #268]	@ (8005aa8 <TIM_Base_SetConfig+0x130>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a42      	ldr	r2, [pc, #264]	@ (8005aac <TIM_Base_SetConfig+0x134>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a41      	ldr	r2, [pc, #260]	@ (8005ab0 <TIM_Base_SetConfig+0x138>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a40      	ldr	r2, [pc, #256]	@ (8005ab4 <TIM_Base_SetConfig+0x13c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d108      	bne.n	80059ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a35      	ldr	r2, [pc, #212]	@ (8005aa4 <TIM_Base_SetConfig+0x12c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01f      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d8:	d01b      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a32      	ldr	r2, [pc, #200]	@ (8005aa8 <TIM_Base_SetConfig+0x130>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d017      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a31      	ldr	r2, [pc, #196]	@ (8005aac <TIM_Base_SetConfig+0x134>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a30      	ldr	r2, [pc, #192]	@ (8005ab0 <TIM_Base_SetConfig+0x138>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab4 <TIM_Base_SetConfig+0x13c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab8 <TIM_Base_SetConfig+0x140>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2d      	ldr	r2, [pc, #180]	@ (8005abc <TIM_Base_SetConfig+0x144>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac0 <TIM_Base_SetConfig+0x148>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	@ (8005aa4 <TIM_Base_SetConfig+0x12c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00f      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <TIM_Base_SetConfig+0x13c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00b      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <TIM_Base_SetConfig+0x140>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <TIM_Base_SetConfig+0x144>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <TIM_Base_SetConfig+0x148>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	611a      	str	r2, [r3, #16]
  }
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800

08005ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 0201 	bic.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 0302 	bic.w	r3, r3, #2
 8005b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd0 <TIM_OC1_SetConfig+0x10c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00f      	beq.n	8005b44 <TIM_OC1_SetConfig+0x80>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd4 <TIM_OC1_SetConfig+0x110>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_OC1_SetConfig+0x80>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd8 <TIM_OC1_SetConfig+0x114>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_OC1_SetConfig+0x80>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a29      	ldr	r2, [pc, #164]	@ (8005bdc <TIM_OC1_SetConfig+0x118>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC1_SetConfig+0x80>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a28      	ldr	r2, [pc, #160]	@ (8005be0 <TIM_OC1_SetConfig+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d10c      	bne.n	8005b5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0308 	bic.w	r3, r3, #8
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 0304 	bic.w	r3, r3, #4
 8005b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd0 <TIM_OC1_SetConfig+0x10c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00f      	beq.n	8005b86 <TIM_OC1_SetConfig+0xc2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd4 <TIM_OC1_SetConfig+0x110>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00b      	beq.n	8005b86 <TIM_OC1_SetConfig+0xc2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <TIM_OC1_SetConfig+0x114>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <TIM_OC1_SetConfig+0xc2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <TIM_OC1_SetConfig+0x118>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_OC1_SetConfig+0xc2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <TIM_OC1_SetConfig+0x11c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d111      	bne.n	8005baa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 0210 	bic.w	r2, r3, #16
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a28      	ldr	r2, [pc, #160]	@ (8005ce4 <TIM_OC2_SetConfig+0x100>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC2_SetConfig+0x6c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ce8 <TIM_OC2_SetConfig+0x104>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10d      	bne.n	8005c6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <TIM_OC2_SetConfig+0x100>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00f      	beq.n	8005c94 <TIM_OC2_SetConfig+0xb0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <TIM_OC2_SetConfig+0x104>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_OC2_SetConfig+0xb0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <TIM_OC2_SetConfig+0x108>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_OC2_SetConfig+0xb0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf0 <TIM_OC2_SetConfig+0x10c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC2_SetConfig+0xb0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <TIM_OC2_SetConfig+0x110>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d113      	bne.n	8005cbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40013400 	.word	0x40013400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <TIM_OC3_SetConfig+0xfc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC3_SetConfig+0x6a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	@ (8005df8 <TIM_OC3_SetConfig+0x100>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <TIM_OC3_SetConfig+0xfc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC3_SetConfig+0xae>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <TIM_OC3_SetConfig+0x100>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC3_SetConfig+0xae>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1a      	ldr	r2, [pc, #104]	@ (8005dfc <TIM_OC3_SetConfig+0x104>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC3_SetConfig+0xae>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <TIM_OC3_SetConfig+0x108>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC3_SetConfig+0xae>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <TIM_OC3_SetConfig+0x10c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d113      	bne.n	8005dce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <TIM_OC4_SetConfig+0xc0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_OC4_SetConfig+0x84>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <TIM_OC4_SetConfig+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_OC4_SetConfig+0x84>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <TIM_OC4_SetConfig+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_OC4_SetConfig+0x84>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	@ (8005ed4 <TIM_OC4_SetConfig+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x84>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a14      	ldr	r2, [pc, #80]	@ (8005ed8 <TIM_OC4_SetConfig+0xd0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <TIM_OC5_SetConfig+0xb4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_OC5_SetConfig+0x7a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a16      	ldr	r2, [pc, #88]	@ (8005f94 <TIM_OC5_SetConfig+0xb8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_OC5_SetConfig+0x7a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a15      	ldr	r2, [pc, #84]	@ (8005f98 <TIM_OC5_SetConfig+0xbc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_OC5_SetConfig+0x7a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a14      	ldr	r2, [pc, #80]	@ (8005f9c <TIM_OC5_SetConfig+0xc0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_OC5_SetConfig+0x7a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <TIM_OC5_SetConfig+0xc4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d109      	bne.n	8005f6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800

08005fa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	051b      	lsls	r3, r3, #20
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <TIM_OC6_SetConfig+0xb8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00f      	beq.n	8006020 <TIM_OC6_SetConfig+0x7c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <TIM_OC6_SetConfig+0xbc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00b      	beq.n	8006020 <TIM_OC6_SetConfig+0x7c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <TIM_OC6_SetConfig+0xc0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d007      	beq.n	8006020 <TIM_OC6_SetConfig+0x7c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a15      	ldr	r2, [pc, #84]	@ (8006068 <TIM_OC6_SetConfig+0xc4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC6_SetConfig+0x7c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a14      	ldr	r2, [pc, #80]	@ (800606c <TIM_OC6_SetConfig+0xc8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d109      	bne.n	8006034 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800

08006070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2201      	movs	r2, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	43db      	mvns	r3, r3
 8006092:	401a      	ands	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e068      	b.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800610e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1e      	ldr	r2, [pc, #120]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006146:	d018      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1b      	ldr	r2, [pc, #108]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1a      	ldr	r2, [pc, #104]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a18      	ldr	r2, [pc, #96]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4313      	orrs	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000

080061cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e040      	b.n	8006260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fb f8ca 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	@ 0x24
 80061f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fae0 	bl	80067d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f825 	bl	8006268 <UART_SetConfig>
 800621e:	4603      	mov	r3, r0
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e01b      	b.n	8006260 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb5f 	bl	800691c <UART_CheckIdleState>
 800625e:	4603      	mov	r3, r0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08a      	sub	sp, #40	@ 0x28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4313      	orrs	r3, r2
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4ba4      	ldr	r3, [pc, #656]	@ (8006528 <UART_SetConfig+0x2c0>)
 8006298:	4013      	ands	r3, r2
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a99      	ldr	r2, [pc, #612]	@ (800652c <UART_SetConfig+0x2c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	4313      	orrs	r3, r2
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a90      	ldr	r2, [pc, #576]	@ (8006530 <UART_SetConfig+0x2c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d126      	bne.n	8006340 <UART_SetConfig+0xd8>
 80062f2:	4b90      	ldr	r3, [pc, #576]	@ (8006534 <UART_SetConfig+0x2cc>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d81b      	bhi.n	8006338 <UART_SetConfig+0xd0>
 8006300:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <UART_SetConfig+0xa0>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	08006329 	.word	0x08006329
 8006310:	08006321 	.word	0x08006321
 8006314:	08006331 	.word	0x08006331
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631e:	e116      	b.n	800654e <UART_SetConfig+0x2e6>
 8006320:	2302      	movs	r3, #2
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006326:	e112      	b.n	800654e <UART_SetConfig+0x2e6>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006336:	e10a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633e:	e106      	b.n	800654e <UART_SetConfig+0x2e6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7c      	ldr	r2, [pc, #496]	@ (8006538 <UART_SetConfig+0x2d0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d138      	bne.n	80063bc <UART_SetConfig+0x154>
 800634a:	4b7a      	ldr	r3, [pc, #488]	@ (8006534 <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d82d      	bhi.n	80063b4 <UART_SetConfig+0x14c>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0xf8>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006395 	.word	0x08006395
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639a:	e0d8      	b.n	800654e <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a2:	e0d4      	b.n	800654e <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063aa:	e0d0      	b.n	800654e <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e0cc      	b.n	800654e <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x2e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <UART_SetConfig+0x2d4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d125      	bne.n	8006412 <UART_SetConfig+0x1aa>
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <UART_SetConfig+0x2cc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d016      	beq.n	8006402 <UART_SetConfig+0x19a>
 80063d4:	2b30      	cmp	r3, #48	@ 0x30
 80063d6:	d818      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d00a      	beq.n	80063f2 <UART_SetConfig+0x18a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d814      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <UART_SetConfig+0x182>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d008      	beq.n	80063fa <UART_SetConfig+0x192>
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0x1a2>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f0:	e0ad      	b.n	800654e <UART_SetConfig+0x2e6>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f8:	e0a9      	b.n	800654e <UART_SetConfig+0x2e6>
 80063fa:	2304      	movs	r3, #4
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006400:	e0a5      	b.n	800654e <UART_SetConfig+0x2e6>
 8006402:	2308      	movs	r3, #8
 8006404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006408:	e0a1      	b.n	800654e <UART_SetConfig+0x2e6>
 800640a:	2310      	movs	r3, #16
 800640c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x2e6>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <UART_SetConfig+0x2d8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d125      	bne.n	8006468 <UART_SetConfig+0x200>
 800641c:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d016      	beq.n	8006458 <UART_SetConfig+0x1f0>
 800642a:	2bc0      	cmp	r3, #192	@ 0xc0
 800642c:	d818      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d00a      	beq.n	8006448 <UART_SetConfig+0x1e0>
 8006432:	2b80      	cmp	r3, #128	@ 0x80
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x1d8>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d008      	beq.n	8006450 <UART_SetConfig+0x1e8>
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x1f8>
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e082      	b.n	800654e <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e07e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e07a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e076      	b.n	800654e <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x2e6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	@ (8006544 <UART_SetConfig+0x2dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d12a      	bne.n	80064c8 <UART_SetConfig+0x260>
 8006472:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006480:	d01a      	beq.n	80064b8 <UART_SetConfig+0x250>
 8006482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006486:	d81b      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800648c:	d00c      	beq.n	80064a8 <UART_SetConfig+0x240>
 800648e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006492:	d815      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <UART_SetConfig+0x238>
 8006498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800649c:	d008      	beq.n	80064b0 <UART_SetConfig+0x248>
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x258>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e052      	b.n	800654e <UART_SetConfig+0x2e6>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e04e      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e046      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e042      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <UART_SetConfig+0x2c4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d13a      	bne.n	8006548 <UART_SetConfig+0x2e0>
 80064d2:	4b18      	ldr	r3, [pc, #96]	@ (8006534 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e0:	d01a      	beq.n	8006518 <UART_SetConfig+0x2b0>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e6:	d81b      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ec:	d00c      	beq.n	8006508 <UART_SetConfig+0x2a0>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f2:	d815      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x298>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d008      	beq.n	8006510 <UART_SetConfig+0x2a8>
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x2b8>
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e022      	b.n	800654e <UART_SetConfig+0x2e6>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e01e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e01a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e016      	b.n	800654e <UART_SetConfig+0x2e6>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e012      	b.n	800654e <UART_SetConfig+0x2e6>
 8006528:	efff69f3 	.word	0xefff69f3
 800652c:	40008000 	.word	0x40008000
 8006530:	40013800 	.word	0x40013800
 8006534:	40021000 	.word	0x40021000
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a9f      	ldr	r2, [pc, #636]	@ (80067d0 <UART_SetConfig+0x568>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d17a      	bne.n	800664e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800655c:	2b08      	cmp	r3, #8
 800655e:	d824      	bhi.n	80065aa <UART_SetConfig+0x342>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x300>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800658d 	.word	0x0800658d
 800656c:	080065ab 	.word	0x080065ab
 8006570:	08006595 	.word	0x08006595
 8006574:	080065ab 	.word	0x080065ab
 8006578:	0800659b 	.word	0x0800659b
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065ab 	.word	0x080065ab
 8006588:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd f840 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8006590:	61f8      	str	r0, [r7, #28]
        break;
 8006592:	e010      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b8f      	ldr	r3, [pc, #572]	@ (80067d4 <UART_SetConfig+0x56c>)
 8006596:	61fb      	str	r3, [r7, #28]
        break;
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fc ffa3 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800659e:	61f8      	str	r0, [r7, #28]
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	61fb      	str	r3, [r7, #28]
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80fb 	beq.w	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d305      	bcc.n	80065da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d903      	bls.n	80065e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065e0:	e0e8      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	461c      	mov	r4, r3
 80065e8:	4615      	mov	r5, r2
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	022b      	lsls	r3, r5, #8
 80065f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065f8:	0222      	lsls	r2, r4, #8
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6849      	ldr	r1, [r1, #4]
 80065fe:	0849      	lsrs	r1, r1, #1
 8006600:	2000      	movs	r0, #0
 8006602:	4688      	mov	r8, r1
 8006604:	4681      	mov	r9, r0
 8006606:	eb12 0a08 	adds.w	sl, r2, r8
 800660a:	eb43 0b09 	adc.w	fp, r3, r9
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7f9 fdd2 	bl	80001c8 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006632:	d308      	bcc.n	8006646 <UART_SetConfig+0x3de>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663a:	d204      	bcs.n	8006646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e0b6      	b.n	80067b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800664c:	e0b2      	b.n	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006656:	d15e      	bne.n	8006716 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x44a>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <UART_SetConfig+0x400>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fc ffc0 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8006690:	61f8      	str	r0, [r7, #28]
        break;
 8006692:	e014      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fc ffd2 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8006698:	61f8      	str	r0, [r7, #28]
        break;
 800669a:	e010      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b4d      	ldr	r3, [pc, #308]	@ (80067d4 <UART_SetConfig+0x56c>)
 800669e:	61fb      	str	r3, [r7, #28]
        break;
 80066a0:	e00d      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fc ff1f 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80066a6:	61f8      	str	r0, [r7, #28]
        break;
 80066a8:	e009      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ae:	61fb      	str	r3, [r7, #28]
        break;
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d077      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b0f      	cmp	r3, #15
 80066de:	d916      	bls.n	800670e <UART_SetConfig+0x4a6>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e6:	d212      	bcs.n	800670e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f023 030f 	bic.w	r3, r3, #15
 80066f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	4313      	orrs	r3, r2
 8006702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	8afa      	ldrh	r2, [r7, #22]
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	e052      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006714:	e04e      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800671a:	2b08      	cmp	r3, #8
 800671c:	d827      	bhi.n	800676e <UART_SetConfig+0x506>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x4bc>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800675f 	.word	0x0800675f
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800676f 	.word	0x0800676f
 8006744:	08006767 	.word	0x08006767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fc ff62 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 800674c:	61f8      	str	r0, [r7, #28]
        break;
 800674e:	e014      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fc ff74 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8006754:	61f8      	str	r0, [r7, #28]
        break;
 8006756:	e010      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006758:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <UART_SetConfig+0x56c>)
 800675a:	61fb      	str	r3, [r7, #28]
        break;
 800675c:	e00d      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675e:	f7fc fec1 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8006762:	61f8      	str	r0, [r7, #28]
        break;
 8006764:	e009      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676a:	61fb      	str	r3, [r7, #28]
        break;
 800676c:	e005      	b.n	800677a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006778:	bf00      	nop
    }

    if (pclk != 0U)
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085a      	lsrs	r2, r3, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d909      	bls.n	80067ae <UART_SetConfig+0x546>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d205      	bcs.n	80067ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e002      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	@ 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	40008000 	.word	0x40008000
 80067d4:	00f42400 	.word	0x00f42400

080067d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d6:	d10a      	bne.n	80068ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b098      	sub	sp, #96	@ 0x60
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800692c:	f7fb fb30 	bl	8001f90 <HAL_GetTick>
 8006930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d12e      	bne.n	800699e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f88c 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d021      	beq.n	800699e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800696e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e062      	b.n	8006a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d149      	bne.n	8006a40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f856 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d03c      	beq.n	8006a40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	623b      	str	r3, [r7, #32]
   return(result);
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e6      	bne.n	80069c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a18:	61fa      	str	r2, [r7, #28]
 8006a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	617b      	str	r3, [r7, #20]
   return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e5      	bne.n	80069f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e011      	b.n	8006a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3758      	adds	r7, #88	@ 0x58
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7c:	e04f      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d04b      	beq.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fb fa83 	bl	8001f90 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e04e      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d037      	beq.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b80      	cmp	r3, #128	@ 0x80
 8006ab2:	d034      	beq.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d031      	beq.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d110      	bne.n	8006aea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2208      	movs	r2, #8
 8006ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f838 	bl	8006b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e029      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af8:	d111      	bne.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f81e 	bl	8006b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e00f      	b.n	8006b3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d0a0      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b095      	sub	sp, #84	@ 0x54
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f023 0301 	bic.w	r3, r3, #1
 8006b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d118      	bne.n	8006bee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6979      	ldr	r1, [r7, #20]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c02:	bf00      	nop
 8006c04:	3754      	adds	r7, #84	@ 0x54
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <memset>:
 8006c0e:	4402      	add	r2, r0
 8006c10:	4603      	mov	r3, r0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d100      	bne.n	8006c18 <memset+0xa>
 8006c16:	4770      	bx	lr
 8006c18:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1c:	e7f9      	b.n	8006c12 <memset+0x4>
	...

08006c20 <__libc_init_array>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4d0d      	ldr	r5, [pc, #52]	@ (8006c58 <__libc_init_array+0x38>)
 8006c24:	4c0d      	ldr	r4, [pc, #52]	@ (8006c5c <__libc_init_array+0x3c>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d109      	bne.n	8006c44 <__libc_init_array+0x24>
 8006c30:	4d0b      	ldr	r5, [pc, #44]	@ (8006c60 <__libc_init_array+0x40>)
 8006c32:	4c0c      	ldr	r4, [pc, #48]	@ (8006c64 <__libc_init_array+0x44>)
 8006c34:	f000 f826 	bl	8006c84 <_init>
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d105      	bne.n	8006c4e <__libc_init_array+0x2e>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c48:	4798      	blx	r3
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7ee      	b.n	8006c2c <__libc_init_array+0xc>
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	4798      	blx	r3
 8006c54:	3601      	adds	r6, #1
 8006c56:	e7f2      	b.n	8006c3e <__libc_init_array+0x1e>
 8006c58:	08030888 	.word	0x08030888
 8006c5c:	08030888 	.word	0x08030888
 8006c60:	08030888 	.word	0x08030888
 8006c64:	0803088c 	.word	0x0803088c

08006c68 <memcpy>:
 8006c68:	440a      	add	r2, r1
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c70:	d100      	bne.n	8006c74 <memcpy+0xc>
 8006c72:	4770      	bx	lr
 8006c74:	b510      	push	{r4, lr}
 8006c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	d1f9      	bne.n	8006c76 <memcpy+0xe>
 8006c82:	bd10      	pop	{r4, pc}

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
