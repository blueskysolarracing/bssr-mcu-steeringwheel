
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000ae99c  080069b0  080069b0  000079b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080b534c  080b534c  000b70b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080b534c  080b534c  000b634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080b5354  080b5354  000b70b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080b5354  080b5354  000b6354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080b5358  080b5358  000b6358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  080b535c  000b7000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008394  200000b0  080b540c  000b70b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008444  080b540c  000b7444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000b70b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c2  00000000  00000000  000b70e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e92  00000000  00000000  000cb7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  000ce638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  000cf880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253cb  00000000  00000000  000d06d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017441  00000000  00000000  000f5aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e418f  00000000  00000000  0010cee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c0c  00000000  00000000  001f10b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001f5cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006998 	.word	0x08006998

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08006998 	.word	0x08006998

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_DMA_Init+0x70>)
 80004fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004fe:	4a19      	ldr	r2, [pc, #100]	@ (8000564 <MX_DMA_Init+0x70>)
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	6493      	str	r3, [r2, #72]	@ 0x48
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_DMA_Init+0x70>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_DMA_Init+0x70>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000516:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <MX_DMA_Init+0x70>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6493      	str	r3, [r2, #72]	@ 0x48
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <MX_DMA_Init+0x70>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	200c      	movs	r0, #12
 8000530:	f001 feef 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000534:	200c      	movs	r0, #12
 8000536:	f001 ff08 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	200d      	movs	r0, #13
 8000540:	f001 fee7 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000544:	200d      	movs	r0, #13
 8000546:	f001 ff00 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2039      	movs	r0, #57	@ 0x39
 8000550:	f001 fedf 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000554:	2039      	movs	r0, #57	@ 0x39
 8000556:	f001 fef8 	bl	800234a <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	4b57      	ldr	r3, [pc, #348]	@ (80006dc <MX_GPIO_Init+0x174>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a56      	ldr	r2, [pc, #344]	@ (80006dc <MX_GPIO_Init+0x174>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b54      	ldr	r3, [pc, #336]	@ (80006dc <MX_GPIO_Init+0x174>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b51      	ldr	r3, [pc, #324]	@ (80006dc <MX_GPIO_Init+0x174>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a50      	ldr	r2, [pc, #320]	@ (80006dc <MX_GPIO_Init+0x174>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b4e      	ldr	r3, [pc, #312]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b4b      	ldr	r3, [pc, #300]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a4a      	ldr	r2, [pc, #296]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b48      	ldr	r3, [pc, #288]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b45      	ldr	r3, [pc, #276]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a44      	ldr	r2, [pc, #272]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b42      	ldr	r3, [pc, #264]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a3e      	ldr	r2, [pc, #248]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b3c      	ldr	r3, [pc, #240]	@ (80006dc <MX_GPIO_Init+0x174>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4839      	ldr	r0, [pc, #228]	@ (80006e0 <MX_GPIO_Init+0x178>)
 80005fc:	f002 fab8 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2186      	movs	r1, #134	@ 0x86
 8000604:	4837      	ldr	r0, [pc, #220]	@ (80006e4 <MX_GPIO_Init+0x17c>)
 8000606:	f002 fab3 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B2_Pin|INPUT_B3_Pin|DISPLAY_DISP_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8000610:	4834      	ldr	r0, [pc, #208]	@ (80006e4 <MX_GPIO_Init+0x17c>)
 8000612:	f002 faad 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	4833      	ldr	r0, [pc, #204]	@ (80006e8 <MX_GPIO_Init+0x180>)
 800061c:	f002 faa8 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000620:	2310      	movs	r3, #16
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000624:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	482a      	ldr	r0, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0x178>)
 8000636:	f002 f8d9 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 800063a:	2320      	movs	r3, #32
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4823      	ldr	r0, [pc, #140]	@ (80006e0 <MX_GPIO_Init+0x178>)
 8000652:	f002 f8cb 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800065e:	2302      	movs	r3, #2
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	481e      	ldr	r0, [pc, #120]	@ (80006e4 <MX_GPIO_Init+0x17c>)
 800066a:	f002 f8bf 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800066e:	f640 4316 	movw	r3, #3094	@ 0xc16
 8000672:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <MX_GPIO_Init+0x17c>)
 8000688:	f002 f8b0 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800068c:	2304      	movs	r3, #4
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_GPIO_Init+0x180>)
 80006a4:	f002 f8a2 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MX_GPIO_Init+0x17c>)
 80006c0:	f002 f894 	bl	80027ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 fe22 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f001 fe3b 	bl	800234a <HAL_NVIC_EnableIRQ>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	48000800 	.word	0x48000800
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000c00 	.word	0x48000c00

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	4856      	ldr	r0, [pc, #344]	@ (8000850 <main+0x164>)
 80006f8:	f002 fa3a 	bl	8002b70 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f001 fc96 	bl	800202c <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(spi1_tx_buf, 0x00, 257);
 8000700:	f240 1201 	movw	r2, #257	@ 0x101
 8000704:	2100      	movs	r1, #0
 8000706:	4853      	ldr	r0, [pc, #332]	@ (8000854 <main+0x168>)
 8000708:	f006 f90b 	bl	8006922 <memset>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f8c4 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff2a 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000714:	f7ff feee 	bl	80004f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000718:	f000 fa48 	bl	8000bac <MX_SPI1_Init>
  MX_SPI3_Init();
 800071c:	f000 fa80 	bl	8000c20 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000720:	f000 fc44 	bl	8000fac <MX_TIM2_Init>
  MX_TIM4_Init();
 8000724:	f000 fd04 	bl	8001130 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000728:	f000 fe30 	bl	800138c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800072c:	f000 fc9a 	bl	8001064 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // SET UP LIGHTS
  Command_UPDATE_LIGHTS();
 8000730:	f000 f902 	bl	8000938 <Command_UPDATE_LIGHTS>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000734:	2100      	movs	r1, #0
 8000736:	4848      	ldr	r0, [pc, #288]	@ (8000858 <main+0x16c>)
 8000738:	f004 fd8e 	bl	8005258 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800073c:	2108      	movs	r1, #8
 800073e:	4846      	ldr	r0, [pc, #280]	@ (8000858 <main+0x16c>)
 8000740:	f004 fd8a 	bl	8005258 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000744:	2104      	movs	r1, #4
 8000746:	4845      	ldr	r0, [pc, #276]	@ (800085c <main+0x170>)
 8000748:	f004 fd86 	bl	8005258 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800074c:	2108      	movs	r1, #8
 800074e:	4843      	ldr	r0, [pc, #268]	@ (800085c <main+0x170>)
 8000750:	f004 fd82 	bl	8005258 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 8000754:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <main+0x174>)
 8000756:	4a43      	ldr	r2, [pc, #268]	@ (8000864 <main+0x178>)
 8000758:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 800075a:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <main+0x174>)
 800075c:	4a42      	ldr	r2, [pc, #264]	@ (8000868 <main+0x17c>)
 800075e:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000760:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <main+0x174>)
 8000762:	2204      	movs	r2, #4
 8000764:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 8000766:	4b3e      	ldr	r3, [pc, #248]	@ (8000860 <main+0x174>)
 8000768:	4a40      	ldr	r2, [pc, #256]	@ (800086c <main+0x180>)
 800076a:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 800076c:	4b3c      	ldr	r3, [pc, #240]	@ (8000860 <main+0x174>)
 800076e:	2204      	movs	r2, #4
 8000770:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 8000772:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <main+0x174>)
 8000774:	4a36      	ldr	r2, [pc, #216]	@ (8000850 <main+0x164>)
 8000776:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 8000778:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <main+0x174>)
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 800077e:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <main+0x174>)
 8000780:	4a33      	ldr	r2, [pc, #204]	@ (8000850 <main+0x164>)
 8000782:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <main+0x174>)
 8000786:	2210      	movs	r2, #16
 8000788:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800078a:	4b35      	ldr	r3, [pc, #212]	@ (8000860 <main+0x174>)
 800078c:	4a38      	ldr	r2, [pc, #224]	@ (8000870 <main+0x184>)
 800078e:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000790:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <main+0x188>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <main+0x174>)
 8000796:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 8000798:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <main+0x174>)
 800079a:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <main+0x18c>)
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e00e      	b.n	80007c2 <main+0xd6>
		ls032.registers[i].str = ls032_registers_text[i];
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <main+0x174>)
 80007a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	4419      	add	r1, r3
 80007b0:	4613      	mov	r3, r2
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	4a31      	ldr	r2, [pc, #196]	@ (800087c <main+0x190>)
 80007b8:	4413      	add	r3, r2
 80007ba:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3301      	adds	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	d9ed      	bls.n	80007a4 <main+0xb8>

	if (LS032_Init(&ls032)) {
 80007c8:	4825      	ldr	r0, [pc, #148]	@ (8000860 <main+0x174>)
 80007ca:	f001 f841 	bl	8001850 <LS032_Init>
		// TODO: Error Handle
	}

	LS032_Clear(&ls032);
 80007ce:	4824      	ldr	r0, [pc, #144]	@ (8000860 <main+0x174>)
 80007d0:	f001 fa28 	bl	8001c24 <LS032_Clear>
	LS032_DrawLogo(&ls032);
 80007d4:	4822      	ldr	r0, [pc, #136]	@ (8000860 <main+0x174>)
 80007d6:	f001 fb33 	bl	8001e40 <LS032_DrawLogo>
	LS032_UpdateManual(&ls032);
 80007da:	4821      	ldr	r0, [pc, #132]	@ (8000860 <main+0x174>)
 80007dc:	f001 f9d2 	bl	8001b84 <LS032_UpdateManual>

	// SET UP THE INPUTS LIBRARY
	inputs.sel_gpio_handles = input_sel_gpio_ports;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <main+0x194>)
 80007e2:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <main+0x198>)
 80007e4:	611a      	str	r2, [r3, #16]
	inputs.sel_gpio_pins = input_sel_gpio_pins;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <main+0x194>)
 80007e8:	4a27      	ldr	r2, [pc, #156]	@ (8000888 <main+0x19c>)
 80007ea:	615a      	str	r2, [r3, #20]
	inputs.it_gpio_handle = INPUT_IT_GPIO_Port;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <main+0x194>)
 80007ee:	4a27      	ldr	r2, [pc, #156]	@ (800088c <main+0x1a0>)
 80007f0:	609a      	str	r2, [r3, #8]
	inputs.it_gpio_pin = INPUT_IT_Pin;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <main+0x194>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	819a      	strh	r2, [r3, #12]
	inputs.state_gpio_handle = INPUT_STATE_GPIO_Port;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <main+0x194>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <main+0x164>)
 80007fc:	601a      	str	r2, [r3, #0]
	inputs.state_gpio_pin = INPUT_STATE_Pin;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <main+0x194>)
 8000800:	2201      	movs	r2, #1
 8000802:	809a      	strh	r2, [r3, #4]
	inputs.states = 0xFFFF;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <main+0x194>)
 8000806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080a:	831a      	strh	r2, [r3, #24]
	inputs.states_itmask = 0b0000111111111111;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0x194>)
 800080e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000812:	835a      	strh	r2, [r3, #26]
	inputs.states_invertmask = 0b0000001111000000;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <main+0x194>)
 8000816:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800081a:	839a      	strh	r2, [r3, #28]
	inputs.spi_tx = spi1_tx_buf;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <main+0x194>)
 800081e:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <main+0x168>)
 8000820:	621a      	str	r2, [r3, #32]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LS032_UpdateAsync(&ls032);
 8000822:	480f      	ldr	r0, [pc, #60]	@ (8000860 <main+0x174>)
 8000824:	f001 f9c7 	bl	8001bb6 <LS032_UpdateAsync>

	  // Delay for screen refresh
	  //HAL_Delay(30);

	  // Handle inputs:
	  Inputs_CheckAll(&inputs);
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <main+0x194>)
 800082a:	f000 fef0 	bl	800160e <Inputs_CheckAll>
	  // Screen Brightness
	  if ((inputs.states >> 9) & 0b1) {
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <main+0x194>)
 8000830:	8b1b      	ldrh	r3, [r3, #24]
 8000832:	0a5b      	lsrs	r3, r3, #9
 8000834:	b29b      	uxth	r3, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <main+0x15a>
		  TIM4->CCR3 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <main+0x1a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000844:	e7ed      	b.n	8000822 <main+0x136>
	  } else {
		  TIM4->CCR3 = lights_read_brightness;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <main+0x1a8>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <main+0x1a4>)
 800084c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  LS032_UpdateAsync(&ls032);
 800084e:	e7e8      	b.n	8000822 <main+0x136>
 8000850:	48000400 	.word	0x48000400
 8000854:	20008030 	.word	0x20008030
 8000858:	2000836c 	.word	0x2000836c
 800085c:	20008320 	.word	0x20008320
 8000860:	200000cc 	.word	0x200000cc
 8000864:	20008198 	.word	0x20008198
 8000868:	48000c00 	.word	0x48000c00
 800086c:	200082d4 	.word	0x200082d4
 8000870:	20000100 	.word	0x20000100
 8000874:	20000000 	.word	0x20000000
 8000878:	20005d24 	.word	0x20005d24
 800087c:	20005f24 	.word	0x20005f24
 8000880:	20007f04 	.word	0x20007f04
 8000884:	20000004 	.word	0x20000004
 8000888:	20000014 	.word	0x20000014
 800088c:	48000800 	.word	0x48000800
 8000890:	40000800 	.word	0x40000800
 8000894:	20000020 	.word	0x20000020

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b096      	sub	sp, #88	@ 0x58
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2244      	movs	r2, #68	@ 0x44
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 f83b 	bl	8006922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008be:	f002 f995 	bl	8002bec <HAL_PWREx_ControlVoltageScaling>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c8:	f000 f96a 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	2303      	movs	r3, #3
 80008dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008e2:	2308      	movs	r3, #8
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 f9ce 	bl	8002c98 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000902:	f000 f94d 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2303      	movs	r3, #3
 800090c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	2103      	movs	r1, #3
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fd96 	bl	8003450 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 f939 	bl	8000ba0 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3758      	adds	r7, #88	@ 0x58
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Command_UPDATE_LIGHTS>:
		if ((in >> bit) & 0b1) str[bit] = '1';
		else str[bit] = '0';
	}
}

void Command_UPDATE_LIGHTS() {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	// FAULT LIGHT:
	if (lights_flt_mode)
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <Command_UPDATE_LIGHTS+0x60>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d004      	beq.n	800094e <Command_UPDATE_LIGHTS+0x16>
		TIM4->CCR1 = lights_flt_brightness;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <Command_UPDATE_LIGHTS+0x64>)
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <Command_UPDATE_LIGHTS+0x68>)
 800094a:	635a      	str	r2, [r3, #52]	@ 0x34
 800094c:	e002      	b.n	8000954 <Command_UPDATE_LIGHTS+0x1c>
	else
		TIM4->CCR1 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <Command_UPDATE_LIGHTS+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	@ 0x34

	// LEFT IND:
	if (lights_ind_mode & 0b1)
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <Command_UPDATE_LIGHTS+0x6c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <Command_UPDATE_LIGHTS+0x32>
		TIM3->CCR2 = lights_ind_brightness;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <Command_UPDATE_LIGHTS+0x70>)
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <Command_UPDATE_LIGHTS+0x74>)
 8000966:	639a      	str	r2, [r3, #56]	@ 0x38
 8000968:	e002      	b.n	8000970 <Command_UPDATE_LIGHTS+0x38>
	else
		TIM3->CCR2 = 0;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <Command_UPDATE_LIGHTS+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	639a      	str	r2, [r3, #56]	@ 0x38

	// RIGHT IND:
	if (lights_ind_mode & 0b10)
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <Command_UPDATE_LIGHTS+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <Command_UPDATE_LIGHTS+0x4e>
		TIM3->CCR3 = lights_ind_brightness;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <Command_UPDATE_LIGHTS+0x70>)
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <Command_UPDATE_LIGHTS+0x74>)
 8000982:	63da      	str	r2, [r3, #60]	@ 0x3c
	else
		TIM3->CCR3 = 0;
}
 8000984:	e002      	b.n	800098c <Command_UPDATE_LIGHTS+0x54>
		TIM3->CCR3 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <Command_UPDATE_LIGHTS+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20008131 	.word	0x20008131
 800099c:	2000001c 	.word	0x2000001c
 80009a0:	40000800 	.word	0x40000800
 80009a4:	20008132 	.word	0x20008132
 80009a8:	2000001e 	.word	0x2000001e
 80009ac:	40000400 	.word	0x40000400

080009b0 <Handle_SPI1_RX_START>:

void Handle_SPI1_RX_START() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	// Start DMA
	HAL_SPI_TransmitReceive_DMA(&hspi1, spi1_tx_buf, spi1_rx_buf, 257);
 80009b4:	f240 1301 	movw	r3, #257	@ 0x101
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <Handle_SPI1_RX_START+0x18>)
 80009ba:	4904      	ldr	r1, [pc, #16]	@ (80009cc <Handle_SPI1_RX_START+0x1c>)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <Handle_SPI1_RX_START+0x20>)
 80009be:	f003 fefd 	bl	80047bc <HAL_SPI_TransmitReceive_DMA>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20007f2c 	.word	0x20007f2c
 80009cc:	20008030 	.word	0x20008030
 80009d0:	20008134 	.word	0x20008134

080009d4 <Handle_SPI1_RX_CPLT>:

void Handle_SPI1_RX_CPLT() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
	// Stop DMA and parse the packet
	HAL_SPI_DMAStop(&hspi1);
 80009da:	4854      	ldr	r0, [pc, #336]	@ (8000b2c <Handle_SPI1_RX_CPLT+0x158>)
 80009dc:	f004 f874 	bl	8004ac8 <HAL_SPI_DMAStop>

	if (spi1_rx_buf[0] & 0b10000000) {
 80009e0:	4b53      	ldr	r3, [pc, #332]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da55      	bge.n	8000a96 <Handle_SPI1_RX_CPLT+0xc2>
		// DISPLAY CMD
		uint8_t reg  = (spi1_rx_buf[0] & 0b01111100) >> 2;
 80009ea:	4b51      	ldr	r3, [pc, #324]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	109b      	asrs	r3, r3, #2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 031f 	and.w	r3, r3, #31
 80009f6:	73fb      	strb	r3, [r7, #15]
		uint8_t prop = (spi1_rx_buf[0] & 0b00000011);
 80009f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	73bb      	strb	r3, [r7, #14]
		switch (prop) {
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	f200 8085 	bhi.w	8000b14 <Handle_SPI1_RX_CPLT+0x140>
 8000a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a10 <Handle_SPI1_RX_CPLT+0x3c>)
 8000a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000a5b 	.word	0x08000a5b
 8000a18:	08000a6f 	.word	0x08000a6f
 8000a1c:	08000a83 	.word	0x08000a83
			case 0:
				uint16_t pos_x = (((uint16_t)spi1_rx_buf[1]) << 8) | ((uint16_t)spi1_rx_buf[2]);
 8000a20:	4b43      	ldr	r3, [pc, #268]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	813b      	strh	r3, [r7, #8]
				uint16_t pos_y = (((uint16_t)spi1_rx_buf[3]) << 8) | ((uint16_t)spi1_rx_buf[4]);
 8000a36:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a38:	78db      	ldrb	r3, [r3, #3]
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	b21a      	sxth	r2, r3
 8000a40:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	80fb      	strh	r3, [r7, #6]
				LS032_TextReg_SetPos(&ls032, reg, pos_x, pos_y);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	893a      	ldrh	r2, [r7, #8]
 8000a50:	7bf9      	ldrb	r1, [r7, #15]
 8000a52:	4838      	ldr	r0, [pc, #224]	@ (8000b34 <Handle_SPI1_RX_CPLT+0x160>)
 8000a54:	f000 ffed 	bl	8001a32 <LS032_TextReg_SetPos>
				break;
 8000a58:	e05d      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			case 1:
				uint8_t size = spi1_rx_buf[1];
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	72fb      	strb	r3, [r7, #11]
				LS032_TextReg_SetSize(&ls032, reg, size);
 8000a60:	7afa      	ldrb	r2, [r7, #11]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <Handle_SPI1_RX_CPLT+0x160>)
 8000a68:	f001 f818 	bl	8001a9c <LS032_TextReg_SetSize>
				break;
 8000a6c:	e053      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			case 2:
				uint8_t mode = spi1_rx_buf[1];
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	733b      	strb	r3, [r7, #12]
				LS032_TextReg_SetMode(&ls032, reg, mode);
 8000a74:	7b3a      	ldrb	r2, [r7, #12]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482e      	ldr	r0, [pc, #184]	@ (8000b34 <Handle_SPI1_RX_CPLT+0x160>)
 8000a7c:	f001 f831 	bl	8001ae2 <LS032_TextReg_SetMode>
				break;
 8000a80:	e049      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			case 3:
				uint8_t len = spi1_rx_buf[1];
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	737b      	strb	r3, [r7, #13]
				LS032_TextReg_SetString(&ls032, reg, len, (char*)(spi1_rx_buf + 2));
 8000a88:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <Handle_SPI1_RX_CPLT+0x164>)
 8000a8a:	7b7a      	ldrb	r2, [r7, #13]
 8000a8c:	7bf9      	ldrb	r1, [r7, #15]
 8000a8e:	4829      	ldr	r0, [pc, #164]	@ (8000b34 <Handle_SPI1_RX_CPLT+0x160>)
 8000a90:	f001 f845 	bl	8001b1e <LS032_TextReg_SetString>
				break;
 8000a94:	e03f      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			default:
				break;
		}
	} else if (spi1_rx_buf[0] == 0x00) {
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <Handle_SPI1_RX_CPLT+0xd2>
		// INPUT CMD
		spi1_tx_queued = 1;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <Handle_SPI1_RX_CPLT+0x168>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e037      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
	} else if (spi1_rx_buf[0] == 0x01) {
 8000aa6:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d10a      	bne.n	8000ac4 <Handle_SPI1_RX_CPLT+0xf0>
		// FAULT LIGHT CTRL
		if (spi1_rx_buf[1] <= 3) {
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d82f      	bhi.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			lights_flt_mode = spi1_rx_buf[1];
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ab8:	785a      	ldrb	r2, [r3, #1]
 8000aba:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <Handle_SPI1_RX_CPLT+0x16c>)
 8000abc:	701a      	strb	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000abe:	f7ff ff3b 	bl	8000938 <Command_UPDATE_LIGHTS>
 8000ac2:	e028      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
		}
	} else if (spi1_rx_buf[0] == 0x02) {
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d10a      	bne.n	8000ae2 <Handle_SPI1_RX_CPLT+0x10e>
		// IND. LIGHT CTRL
		if (spi1_rx_buf[1] <= 3) {
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d820      	bhi.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			lights_ind_mode = spi1_rx_buf[1];
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ad6:	785a      	ldrb	r2, [r3, #1]
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <Handle_SPI1_RX_CPLT+0x170>)
 8000ada:	701a      	strb	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000adc:	f7ff ff2c 	bl	8000938 <Command_UPDATE_LIGHTS>
 8000ae0:	e019      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
		}
	} else if (spi1_rx_buf[0] == 0x03) {
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d115      	bne.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
		// READ LIGHT BRIGHTNESS
		if (spi1_rx_buf[1] <= 100) {
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000aec:	785b      	ldrb	r3, [r3, #1]
 8000aee:	2b64      	cmp	r3, #100	@ 0x64
 8000af0:	d811      	bhi.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
			lights_read_brightness = (uint16_t)(spi1_rx_buf[1])*100;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000af4:	785b      	ldrb	r3, [r3, #1]
 8000af6:	461a      	mov	r2, r3
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	461a      	mov	r2, r3
 8000afe:	0091      	lsls	r1, r2, #2
 8000b00:	461a      	mov	r2, r3
 8000b02:	460b      	mov	r3, r1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <Handle_SPI1_RX_CPLT+0x174>)
 8000b0c:	801a      	strh	r2, [r3, #0]
			Command_UPDATE_LIGHTS();
 8000b0e:	f7ff ff13 	bl	8000938 <Command_UPDATE_LIGHTS>
 8000b12:	e000      	b.n	8000b16 <Handle_SPI1_RX_CPLT+0x142>
				break;
 8000b14:	bf00      	nop
		}
	}

	// Reset the buffers
	memset(spi1_rx_buf, 0x00, 257);
 8000b16:	f240 1201 	movw	r2, #257	@ 0x101
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <Handle_SPI1_RX_CPLT+0x15c>)
 8000b1e:	f005 ff00 	bl	8006922 <memset>
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20008134 	.word	0x20008134
 8000b30:	20007f2c 	.word	0x20007f2c
 8000b34:	200000cc 	.word	0x200000cc
 8000b38:	20007f2e 	.word	0x20007f2e
 8000b3c:	20007f28 	.word	0x20007f28
 8000b40:	20008131 	.word	0x20008131
 8000b44:	20008132 	.word	0x20008132
 8000b48:	20000020 	.word	0x20000020

08000b4c <HAL_GPIO_EXTI_Callback>:

// ------------------------------------------------------------ OVERRIDE EXTERNAL INTERRUPTS -- //
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SPI1_CS_Pin) {
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b10      	cmp	r3, #16
 8000b5a:	d10c      	bne.n	8000b76 <HAL_GPIO_EXTI_Callback+0x2a>
	  if (HAL_GPIO_ReadPin(SPI1_CS_GPIO_Port, SPI1_CS_Pin)) {
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b60:	f001 ffee 	bl	8002b40 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <HAL_GPIO_EXTI_Callback+0x24>
		  // SPI CS was just deasserted
		  Handle_SPI1_RX_CPLT();
 8000b6a:	f7ff ff33 	bl	80009d4 <Handle_SPI1_RX_CPLT>
		  Handle_SPI1_RX_START();
	  }
  } else {
      __NOP();
  }
}
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2c>
		  Handle_SPI1_RX_START();
 8000b70:	f7ff ff1e 	bl	80009b0 <Handle_SPI1_RX_START>
}
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2c>
      __NOP();
 8000b76:	bf00      	nop
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	48000800 	.word	0x48000800

08000b84 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
//	ls032.spi_state = 0;
//	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
	LS032_TX_DMA_CPLT(&ls032);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <HAL_SPI_TxCpltCallback+0x18>)
 8000b8e:	f000 ff3c 	bl	8001a0a <LS032_TX_DMA_CPLT>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000cc 	.word	0x200000cc

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c1c <MX_SPI1_Init+0x70>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_SPI1_Init+0x6c>)
 8000c04:	f003 fad2 	bl	80041ac <HAL_SPI_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000c0e:	f7ff ffc7 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20008134 	.word	0x20008134
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <MX_SPI3_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c38:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c3c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_SPI3_Init+0x74>)
 8000c82:	f003 fa93 	bl	80041ac <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f7ff ff88 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20008198 	.word	0x20008198
 8000c98:	40003c00 	.word	0x40003c00

08000c9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	@ 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a6d      	ldr	r2, [pc, #436]	@ (8000e70 <HAL_SPI_MspInit+0x1d4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d17d      	bne.n	8000dba <HAL_SPI_MspInit+0x11e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	4a6c      	ldr	r2, [pc, #432]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cca:	4b6a      	ldr	r3, [pc, #424]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b67      	ldr	r3, [pc, #412]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a66      	ldr	r2, [pc, #408]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b64      	ldr	r3, [pc, #400]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cee:	23e0      	movs	r3, #224	@ 0xe0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f001 fd6e 	bl	80027ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000d10:	4b59      	ldr	r3, [pc, #356]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d12:	4a5a      	ldr	r2, [pc, #360]	@ (8000e7c <HAL_SPI_MspInit+0x1e0>)
 8000d14:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000d16:	4b58      	ldr	r3, [pc, #352]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1c:	4b56      	ldr	r3, [pc, #344]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d22:	4b55      	ldr	r3, [pc, #340]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	4b53      	ldr	r3, [pc, #332]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2e:	4b52      	ldr	r3, [pc, #328]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d34:	4b50      	ldr	r3, [pc, #320]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d40:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d48:	484b      	ldr	r0, [pc, #300]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d4a:	f001 fb19 	bl	8002380 <HAL_DMA_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000d54:	f7ff ff24 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a47      	ldr	r2, [pc, #284]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d5e:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <HAL_SPI_MspInit+0x1dc>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000d64:	4b46      	ldr	r3, [pc, #280]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d66:	4a47      	ldr	r2, [pc, #284]	@ (8000e84 <HAL_SPI_MspInit+0x1e8>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000d6a:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b43      	ldr	r3, [pc, #268]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d72:	2210      	movs	r2, #16
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b42      	ldr	r3, [pc, #264]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b40      	ldr	r3, [pc, #256]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b3f      	ldr	r3, [pc, #252]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b3d      	ldr	r3, [pc, #244]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d9c:	4838      	ldr	r0, [pc, #224]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000d9e:	f001 faef 	bl	8002380 <HAL_DMA_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000da8:	f7ff fefa 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a34      	ldr	r2, [pc, #208]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000db0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000db2:	4a33      	ldr	r2, [pc, #204]	@ (8000e80 <HAL_SPI_MspInit+0x1e4>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000db8:	e056      	b.n	8000e68 <HAL_SPI_MspInit+0x1cc>
  else if(spiHandle->Instance==SPI3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a32      	ldr	r2, [pc, #200]	@ (8000e88 <HAL_SPI_MspInit+0x1ec>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d151      	bne.n	8000e68 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	4a24      	ldr	r2, [pc, #144]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <HAL_SPI_MspInit+0x1d8>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000df4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481e      	ldr	r0, [pc, #120]	@ (8000e8c <HAL_SPI_MspInit+0x1f0>)
 8000e12:	f001 fceb 	bl	80027ec <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e18:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_SPI_MspInit+0x1f8>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e1e:	2203      	movs	r2, #3
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e24:	2210      	movs	r2, #16
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e4c:	4810      	ldr	r0, [pc, #64]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e4e:	f001 fa97 	bl	8002380 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_SPI_MspInit+0x1c0>
      Error_Handler();
 8000e58:	f7ff fea2 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_SPI_MspInit+0x1f4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	200081fc 	.word	0x200081fc
 8000e7c:	4002001c 	.word	0x4002001c
 8000e80:	20008244 	.word	0x20008244
 8000e84:	40020030 	.word	0x40020030
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	2000828c 	.word	0x2000828c
 8000e94:	4002041c 	.word	0x4002041c

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f001 f8cd 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_CS_Pin);
 8000f42:	2010      	movs	r0, #16
 8000f44:	f001 fe2c 	bl	8002ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <DMA1_Channel2_IRQHandler+0x10>)
 8000f52:	f001 fb6b 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200081fc 	.word	0x200081fc

08000f60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <DMA1_Channel3_IRQHandler+0x10>)
 8000f66:	f001 fb61 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20008244 	.word	0x20008244

08000f74 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA2_Channel2_IRQHandler+0x10>)
 8000f7a:	f001 fb57 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000828c 	.word	0x2000828c

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000fda:	2230      	movs	r2, #48	@ 0x30
 8000fdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <MX_TIM2_Init+0xb0>)
 8000fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ff6:	4818      	ldr	r0, [pc, #96]	@ (8001058 <MX_TIM2_Init+0xac>)
 8000ff8:	f004 f8d6 	bl	80051a8 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001002:	f7ff fdcd 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	@ (8001058 <MX_TIM2_Init+0xac>)
 8001016:	f004 fedb 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001020:	f7ff fdbe 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	@ 0x60
 8001026:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <MX_TIM2_Init+0xb4>)
 800102a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2204      	movs	r2, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM2_Init+0xac>)
 800103c:	f004 fa12 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001046:	f7ff fdab 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM2_Init+0xac>)
 800104c:	f000 f91c 	bl	8001288 <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	@ 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200082d4 	.word	0x200082d4
 800105c:	0061a7ff 	.word	0x0061a7ff
 8001060:	0030d400 	.word	0x0030d400

08001064 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <MX_TIM3_Init+0xc4>)
 800108a:	4a28      	ldr	r2, [pc, #160]	@ (800112c <MX_TIM3_Init+0xc8>)
 800108c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <MX_TIM3_Init+0xc4>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <MX_TIM3_Init+0xc4>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800109a:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <MX_TIM3_Init+0xc4>)
 800109c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_TIM3_Init+0xc4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_TIM3_Init+0xc4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ae:	481e      	ldr	r0, [pc, #120]	@ (8001128 <MX_TIM3_Init+0xc4>)
 80010b0:	f004 f87a 	bl	80051a8 <HAL_TIM_PWM_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80010ba:	f7ff fd71 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4816      	ldr	r0, [pc, #88]	@ (8001128 <MX_TIM3_Init+0xc4>)
 80010ce:	f004 fe7f 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80010d8:	f7ff fd62 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010dc:	2360      	movs	r3, #96	@ 0x60
 80010de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80010e0:	2332      	movs	r3, #50	@ 0x32
 80010e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <MX_TIM3_Init+0xc4>)
 80010f4:	f004 f9b6 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80010fe:	f7ff fd4f 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	@ (8001128 <MX_TIM3_Init+0xc4>)
 800110a:	f004 f9ab 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001114:	f7ff fd44 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <MX_TIM3_Init+0xc4>)
 800111a:	f000 f8b5 	bl	8001288 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20008320 	.word	0x20008320
 800112c:	40000400 	.word	0x40000400

08001130 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 8001156:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <MX_TIM4_Init+0xc8>)
 8001158:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 8001168:	f242 720f 	movw	r2, #9999	@ 0x270f
 800116c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117a:	481e      	ldr	r0, [pc, #120]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 800117c:	f004 f814 	bl	80051a8 <HAL_TIM_PWM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001186:	f7ff fd0b 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 800119a:	f004 fe19 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80011a4:	f7ff fcfc 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	@ 0x60
 80011aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 80011c0:	f004 f950 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80011ca:	f7ff fce9 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2208      	movs	r2, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 80011d6:	f004 f945 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80011e0:	f7ff fcde 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM4_Init+0xc4>)
 80011e6:	f000 f84f 	bl	8001288 <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000836c 	.word	0x2000836c
 80011f8:	40000800 	.word	0x40000800

080011fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800120c:	d10c      	bne.n	8001228 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a1a      	ldr	r2, [pc, #104]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001226:	e022      	b.n	800126e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <HAL_TIM_PWM_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10c      	bne.n	800124c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6593      	str	r3, [r2, #88]	@ 0x58
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
}
 800124a:	e010      	b.n	800126e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <HAL_TIM_PWM_MspInit+0x88>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	4a08      	ldr	r2, [pc, #32]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_TIM_PWM_MspInit+0x80>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40000400 	.word	0x40000400
 8001284:	40000800 	.word	0x40000800

08001288 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a8:	d11c      	bne.n	80012e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a32      	ldr	r2, [pc, #200]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 80012c2:	2308      	movs	r3, #8
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d2:	2301      	movs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4827      	ldr	r0, [pc, #156]	@ (800137c <HAL_TIM_MspPostInit+0xf4>)
 80012de:	f001 fa85 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012e2:	e044      	b.n	800136e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <HAL_TIM_MspPostInit+0xf8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11d      	bne.n	800132a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8001306:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001318:	2302      	movs	r3, #2
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	@ (8001384 <HAL_TIM_MspPostInit+0xfc>)
 8001324:	f001 fa62 	bl	80027ec <HAL_GPIO_Init>
}
 8001328:	e021      	b.n	800136e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <HAL_TIM_MspPostInit+0x100>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d11c      	bne.n	800136e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_TIM_MspPostInit+0xf0>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 800134c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <HAL_TIM_MspPostInit+0xf4>)
 800136a:	f001 fa3f 	bl	80027ec <HAL_GPIO_Init>
}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	@ 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	48000400 	.word	0x48000400
 8001380:	40000400 	.word	0x40000400
 8001384:	48000800 	.word	0x48000800
 8001388:	40000800 	.word	0x40000800

0800138c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f004 fd86 	bl	8005ee0 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fbe1 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200083b8 	.word	0x200083b8
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0aa      	sub	sp, #168	@ 0xa8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2284      	movs	r2, #132	@ 0x84
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f005 fa88 	bl	8006922 <memset>
  if(uartHandle->Instance==USART2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	@ (800149c <HAL_UART_MspInit+0xb0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13b      	bne.n	8001494 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fa33 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fbb4 	bl	8000ba0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001480:	2307      	movs	r3, #7
 8001482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f001 f9ac 	bl	80027ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001494:	bf00      	nop
 8001496:	37a8      	adds	r7, #168	@ 0xa8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40004400 	.word	0x40004400
 80014a0:	40021000 	.word	0x40021000

080014a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a8:	f7ff fd6e 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	@ (80014e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <LoopForever+0xe>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	@ (80014f0 <LoopForever+0x16>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d2:	f005 fa2f 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d6:	f7ff f909 	bl	80006ec <main>

080014da <LoopForever>:

LoopForever:
    b LoopForever
 80014da:	e7fe      	b.n	80014da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80014e8:	080b535c 	.word	0x080b535c
  ldr r2, =_sbss
 80014ec:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80014f0:	20008444 	.word	0x20008444

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>

080014f6 <Inputs_CheckInput>:
 *      Author: Lucas Di Sarra
 */

#include "../Inc/Inputs.h"

uint8_t Inputs_CheckInput(Inputs_HandleTypeDef *inputs, uint8_t input) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
	if (input >= NUM_INPUTS) return ERROR;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d901      	bls.n	800150c <Inputs_CheckInput+0x16>
 8001508:	2301      	movs	r3, #1
 800150a:	e07c      	b.n	8001606 <Inputs_CheckInput+0x110>

	HAL_GPIO_WritePin(inputs->sel_gpio_handles[3], inputs->sel_gpio_pins[3], input & 0b1000);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	330c      	adds	r3, #12
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	3306      	adds	r3, #6
 800151a:	8819      	ldrh	r1, [r3, #0]
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	f001 fb23 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[2], inputs->sel_gpio_pins[2], input & 0b0100);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	3308      	adds	r3, #8
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	3304      	adds	r3, #4
 8001538:	8819      	ldrh	r1, [r3, #0]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	f001 fb14 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[1], inputs->sel_gpio_pins[1], input & 0b0010);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	3304      	adds	r3, #4
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	3302      	adds	r3, #2
 8001556:	8819      	ldrh	r1, [r3, #0]
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	f001 fb05 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], input & 0b0001);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	8819      	ldrh	r1, [r3, #0]
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	f001 faf8 	bl	8002b70 <HAL_GPIO_WritePin>

	// Let things settle
	HAL_Delay(2);
 8001580:	2002      	movs	r0, #2
 8001582:	f000 fdc7 	bl	8002114 <HAL_Delay>

	uint8_t old_state = inputs->states;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	8b1b      	ldrh	r3, [r3, #24]
 800158a:	73fb      	strb	r3, [r7, #15]

	// Write state changes
	if (HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	889b      	ldrh	r3, [r3, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f001 fad2 	bl	8002b40 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00d      	beq.n	80015be <Inputs_CheckInput+0xc8>
		inputs->states |= (0x0001 << (uint16_t)input);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8b1b      	ldrh	r3, [r3, #24]
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2101      	movs	r1, #1
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	831a      	strh	r2, [r3, #24]
 80015bc:	e00e      	b.n	80015dc <Inputs_CheckInput+0xe6>
	else
		inputs->states &= 0xFFFF ^ (0x0001 << (uint16_t)input);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8b1b      	ldrh	r3, [r3, #24]
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4013      	ands	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	831a      	strh	r2, [r3, #24]

	// Check if the masked buttons have changed
	if ((old_state & inputs->states_itmask) != (inputs->states & inputs->states_itmask))
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	8b52      	ldrh	r2, [r2, #26]
 80015e2:	4013      	ands	r3, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	8b11      	ldrh	r1, [r2, #24]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	8b52      	ldrh	r2, [r2, #26]
 80015ec:	400a      	ands	r2, r1
 80015ee:	b292      	uxth	r2, r2
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <Inputs_CheckInput+0x10e>
		HAL_GPIO_WritePin(inputs->it_gpio_handle, inputs->it_gpio_pin, GPIO_PIN_SET);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6898      	ldr	r0, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	899b      	ldrh	r3, [r3, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	f001 fab6 	bl	8002b70 <HAL_GPIO_WritePin>

	return SUCCESS;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <Inputs_CheckAll>:
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], 0);

	return HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin);
}

uint8_t Inputs_CheckAll(Inputs_HandleTypeDef *inputs) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	//inputs->states = 0xFFFF;
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e007      	b.n	800162c <Inputs_CheckAll+0x1e>
		Inputs_CheckInput(inputs, i);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff68 	bl	80014f6 <Inputs_CheckInput>
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	d9f4      	bls.n	800161c <Inputs_CheckAll+0xe>
	}
	inputs->states ^= inputs->states_invertmask;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8b1a      	ldrh	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	8b9b      	ldrh	r3, [r3, #28]
 800163a:	4053      	eors	r3, r2
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	831a      	strh	r2, [r3, #24]

	inputs->spi_tx[0] = (uint8_t)(inputs->states & 0x00FF);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8b1a      	ldrh	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
	inputs->spi_tx[1] = (uint8_t)((inputs->states >> 8) & 0x00FF);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	8b1b      	ldrh	r3, [r3, #24]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	3301      	adds	r3, #1
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
	//inputs->spi_tx[2] = inputs->spi_tx[0] ^ inputs->spi_tx[1]; // CHECKSUM

	return SUCCESS;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e003      	b.n	8001680 <delay_us+0x16>
		asm("NOP");
 8001678:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3f6      	bcc.n	8001678 <delay_us+0xe>
	}
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed (FLIPPED)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 80016aa:	80fb      	strh	r3, [r7, #6]
	//gate_addr++;										// gate is 1 indexed (NORMAL)
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25a      	sxtb	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25a      	sxtb	r2, r3
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	b25b      	sxtb	r3, r3
 800171e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b25a      	sxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b25a      	sxtb	r2, r3
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b25b      	sxtb	r3, r3
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25a      	sxtb	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b25a      	sxtb	r2, r3
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	105b      	asrs	r3, r3, #1
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25a      	sxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25a      	sxtb	r2, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	10db      	asrs	r3, r3, #3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b25a      	sxtb	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b25a      	sxtb	r2, r3
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	115b      	asrs	r3, r3, #5
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	11db      	asrs	r3, r3, #7
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	125b      	asrs	r3, r3, #9
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	603a      	str	r2, [r7, #0]
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001814:	d301      	bcc.n	800181a <get_idx_from_pos+0x1c>
 8001816:	2301      	movs	r3, #1
 8001818:	e014      	b.n	8001844 <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	2b29      	cmp	r3, #41	@ 0x29
 800181e:	d901      	bls.n	8001824 <get_idx_from_pos+0x26>
 8001820:	2301      	movs	r3, #1
 8001822:	e00f      	b.n	8001844 <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	461a      	mov	r2, r3
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	441a      	add	r2, r3
 800182c:	0052      	lsls	r2, r2, #1
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	b29a      	uxth	r2, r3
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	3302      	adds	r3, #2
 800183c:	b29a      	uxth	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	461a      	mov	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f005 f85d 	bl	8006922 <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001868:	2300      	movs	r3, #0
 800186a:	81fb      	strh	r3, [r7, #14]
 800186c:	e00e      	b.n	800188c <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	89fa      	ldrh	r2, [r7, #14]
 8001874:	212c      	movs	r1, #44	@ 0x2c
 8001876:	fb01 f202 	mul.w	r2, r1, r2
 800187a:	441a      	add	r2, r3
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff09 	bl	8001698 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	3301      	adds	r3, #1
 800188a:	81fb      	strh	r3, [r7, #14]
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001892:	d3ec      	bcc.n	800186e <LS032_Init+0x1e>
	}

	// Initialize register RAM
	LS032_ResetRegisters(ls032);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f9e5 	bl	8001c64 <LS032_ResetRegisters>

	// Flag SPI as Idle
	ls032->spi_state = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	72da      	strb	r2, [r3, #11]
	ls032->flash_counter = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	delay_us(30);
 80018ae:	201e      	movs	r0, #30
 80018b0:	f7ff fedb 	bl	800166a <delay_us>
	// Need to clear twice for some reason
	LS032_Wipe(ls032);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f9a3 	bl	8001c00 <LS032_Wipe>
	LS032_Wipe(ls032);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f9a0 	bl	8001c00 <LS032_Wipe>
	delay_us(30);
 80018c0:	201e      	movs	r0, #30
 80018c2:	f7ff fed2 	bl	800166a <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69d8      	ldr	r0, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8c1b      	ldrh	r3, [r3, #32]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4619      	mov	r1, r3
 80018d2:	f001 f94d 	bl	8002b70 <HAL_GPIO_WritePin>
	delay_us(30);
 80018d6:	201e      	movs	r0, #30
 80018d8:	f7ff fec7 	bl	800166a <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8a1b      	ldrh	r3, [r3, #16]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f003 fcb6 	bl	8005258 <HAL_TIM_PWM_Start>
	delay_us(30);
 80018ec:	201e      	movs	r0, #30
 80018ee:	f7ff febc 	bl	800166a <delay_us>

	return SUCCESS;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <LS032_TX>:

uint8_t LS032_TX(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	7a9b      	ldrb	r3, [r3, #10]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <LS032_TX+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e034      	b.n	8001980 <LS032_TX+0x84>

	// Clear update queue
	ls032->update_queued = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6858      	ldr	r0, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	891b      	ldrh	r3, [r3, #8]
 8001928:	2201      	movs	r2, #1
 800192a:	4619      	mov	r1, r3
 800192c:	f001 f920 	bl	8002b70 <HAL_GPIO_WritePin>
	delay_us(3);
 8001930:	2003      	movs	r0, #3
 8001932:	f7ff fe9a 	bl	800166a <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	88fa      	ldrh	r2, [r7, #6]
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	f002 fcd7 	bl	80042f2 <HAL_SPI_Transmit>
 8001944:	4603      	mov	r3, r0
 8001946:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff fe8e 	bl	800166a <delay_us>
	if (ret) {
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <LS032_TX+0x72>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6858      	ldr	r0, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	891b      	ldrh	r3, [r3, #8]
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	f001 f906 	bl	8002b70 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	729a      	strb	r2, [r3, #10]
		return ret;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	e008      	b.n	8001980 <LS032_TX+0x84>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6858      	ldr	r0, [r3, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	891b      	ldrh	r3, [r3, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	4619      	mov	r1, r3
 800197a:	f001 f8f9 	bl	8002b70 <HAL_GPIO_WritePin>

	return SUCCESS;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	7a9b      	ldrb	r3, [r3, #10]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <LS032_TX_DMA+0x1a>
 800199e:	2301      	movs	r3, #1
 80019a0:	e02f      	b.n	8001a02 <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6858      	ldr	r0, [r3, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	891b      	ldrh	r3, [r3, #8]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	f001 f8da 	bl	8002b70 <HAL_GPIO_WritePin>
	delay_us(3);
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff fe54 	bl	800166a <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fe08 	bl	80045e0 <HAL_SPI_Transmit_DMA>
 80019d0:	4603      	mov	r3, r0
 80019d2:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff fe45 	bl	800166a <delay_us>
	if (ret) {
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00c      	beq.n	8001a00 <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6858      	ldr	r0, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	891b      	ldrh	r3, [r3, #8]
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	f001 f8bd 	bl	8002b70 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	729a      	strb	r2, [r3, #10]
		return ret;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	e000      	b.n	8001a02 <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <LS032_TX_DMA_CPLT>:

uint8_t LS032_TX_DMA_CPLT(LS032_HandleTypeDef *ls032) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	// Release the CS
	ls032->spi_state = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6858      	ldr	r0, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	891b      	ldrh	r3, [r3, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	f001 f8a4 	bl	8002b70 <HAL_GPIO_WritePin>

	return SUCCESS;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	72fb      	strb	r3, [r7, #11]
 8001a44:	460b      	mov	r3, r1
 8001a46:	813b      	strh	r3, [r7, #8]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	2b1f      	cmp	r3, #31
 8001a50:	d901      	bls.n	8001a56 <LS032_TextReg_SetPos+0x24>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e01c      	b.n	8001a90 <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 8001a56:	893b      	ldrh	r3, [r7, #8]
 8001a58:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001a5c:	d301      	bcc.n	8001a62 <LS032_TextReg_SetPos+0x30>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e016      	b.n	8001a90 <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b29      	cmp	r3, #41	@ 0x29
 8001a66:	d901      	bls.n	8001a6c <LS032_TextReg_SetPos+0x3a>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e011      	b.n	8001a90 <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	893a      	ldrh	r2, [r7, #8]
 8001a78:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	2b1f      	cmp	r3, #31
 8001ab0:	d901      	bls.n	8001ab6 <LS032_TextReg_SetSize+0x1a>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 8001ab6:	78bb      	ldrb	r3, [r7, #2]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d901      	bls.n	8001ac0 <LS032_TextReg_SetSize+0x24>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e00a      	b.n	8001ad6 <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	78ba      	ldrb	r2, [r7, #2]
 8001acc:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LS032_TextReg_SetMode>:

uint8_t LS032_TextReg_SetMode(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t mode) {
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
 8001aee:	4613      	mov	r3, r2
 8001af0:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	2b1f      	cmp	r3, #31
 8001af6:	d901      	bls.n	8001afc <LS032_TextReg_SetMode+0x1a>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00a      	b.n	8001b12 <LS032_TextReg_SetMode+0x30>

	ls032->registers[reg].mode = mode;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	78ba      	ldrb	r2, [r7, #2]
 8001b08:	71da      	strb	r2, [r3, #7]

	ls032->update_queued = 1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LS032_TextReg_SetString>:

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	72fb      	strb	r3, [r7, #11]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2b1f      	cmp	r3, #31
 8001b34:	d901      	bls.n	8001b3a <LS032_TextReg_SetString+0x1c>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e020      	b.n	8001b7c <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	7aba      	ldrb	r2, [r7, #10]
 8001b46:	725a      	strb	r2, [r3, #9]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	22ff      	movs	r2, #255	@ 0xff
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fee2 	bl	8006922 <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	7aba      	ldrb	r2, [r7, #10]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 ff04 	bl	800697c <memcpy>

	ls032->update_queued = 1;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LS032_UpdateManual>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (LS032_DrawScene(ls032)) return ERROR;
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f93a 	bl	8001e06 <LS032_DrawScene>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <LS032_UpdateManual+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e008      	b.n	8001bae <LS032_UpdateManual+0x2a>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff feee 	bl	8001988 <LS032_TX_DMA>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LS032_UpdateAsync>:

uint8_t LS032_UpdateAsync(LS032_HandleTypeDef *ls032) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	// Increment flash counter even if nothing gets drawn
	LS032_UpdateFlash(ls032);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f897 	bl	8001cf2 <LS032_UpdateFlash>

	if (ls032->update_queued == 0) return ERROR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7adb      	ldrb	r3, [r3, #11]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <LS032_UpdateAsync+0x1a>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e013      	b.n	8001bf8 <LS032_UpdateAsync+0x42>

	LS032_Clear(ls032);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f827 	bl	8001c24 <LS032_Clear>
	if (LS032_DrawScene(ls032)) return ERROR;
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f915 	bl	8001e06 <LS032_DrawScene>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <LS032_UpdateAsync+0x30>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e008      	b.n	8001bf8 <LS032_UpdateAsync+0x42>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fec9 	bl	8001988 <LS032_TX_DMA>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LS032_Wipe>:

uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 8001c08:	2320      	movs	r3, #32
 8001c0a:	81bb      	strh	r3, [r7, #12]
	return LS032_TX(ls032, clear_cmd, 2);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2202      	movs	r2, #2
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fe71 	bl	80018fc <LS032_TX>
 8001c1a:	4603      	mov	r3, r0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LS032_Clear>:

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	81fb      	strh	r3, [r7, #14]
 8001c30:	e00f      	b.n	8001c52 <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	212c      	movs	r1, #44	@ 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	3302      	adds	r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	222a      	movs	r2, #42	@ 0x2a
 8001c44:	21ff      	movs	r1, #255	@ 0xff
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fe6b 	bl	8006922 <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001c4c:	89fb      	ldrh	r3, [r7, #14]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	81fb      	strh	r3, [r7, #14]
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001c58:	d3eb      	bcc.n	8001c32 <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <LS032_ResetRegisters>:
	}

	return SUCCESS;
}

uint8_t LS032_ResetRegisters(LS032_HandleTypeDef *ls032) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e037      	b.n	8001ce2 <LS032_ResetRegisters+0x7e>
		ls032->registers[reg].pos_x = 0;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	2200      	movs	r2, #0
 8001c9a:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].flash_state = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	721a      	strb	r2, [r3, #8]
		ls032->registers[reg].len = 0;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	725a      	strb	r2, [r3, #9]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	22ff      	movs	r2, #255	@ 0xff
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fe23 	bl	8006922 <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b1f      	cmp	r3, #31
 8001ce6:	d9c4      	bls.n	8001c72 <LS032_ResetRegisters+0xe>
	}
	return SUCCESS;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <LS032_UpdateFlash>:

uint8_t LS032_UpdateFlash(LS032_HandleTypeDef *ls032) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	ls032->flash_counter++;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e030      	b.n	8001d72 <LS032_UpdateFlash+0x80>
		if (ls032->registers[reg].mode == 0) continue;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	79db      	ldrb	r3, [r3, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d024      	beq.n	8001d6a <LS032_UpdateFlash+0x78>
		uint8_t new_flash = ((ls032->flash_counter) >> (ls032->registers[reg].mode - 1)) & 0b1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d26:	4619      	mov	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	79db      	ldrb	r3, [r3, #7]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	fa41 f303 	asr.w	r3, r1, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	73bb      	strb	r3, [r7, #14]
		if (new_flash != ls032->registers[reg].flash_state) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	7a1b      	ldrb	r3, [r3, #8]
 8001d4e:	7bba      	ldrb	r2, [r7, #14]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d00b      	beq.n	8001d6c <LS032_UpdateFlash+0x7a>
			ls032->registers[reg].flash_state = new_flash;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	7bba      	ldrb	r2, [r7, #14]
 8001d60:	721a      	strb	r2, [r3, #8]
			ls032->update_queued = 1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	72da      	strb	r2, [r3, #11]
 8001d68:	e000      	b.n	8001d6c <LS032_UpdateFlash+0x7a>
		if (ls032->registers[reg].mode == 0) continue;
 8001d6a:	bf00      	nop
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	d9cb      	bls.n	8001d10 <LS032_UpdateFlash+0x1e>
		}
	}

	return SUCCESS;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LS032_DrawRegister>:

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001d86:	b5b0      	push	{r4, r5, r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2b1f      	cmp	r3, #31
 8001d96:	d901      	bls.n	8001d9c <LS032_DrawRegister+0x16>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e030      	b.n	8001dfe <LS032_DrawRegister+0x78>
	if (ls032->registers[reg].flash_state) return SUCCESS;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	7a1b      	ldrb	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <LS032_DrawRegister+0x2a>
 8001dac:	2300      	movs	r3, #0
 8001dae:	e026      	b.n	8001dfe <LS032_DrawRegister+0x78>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001dba:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001dc6:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001dd2:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001dde:	7a5b      	ldrb	r3, [r3, #9]
			ls032->registers[reg].str);
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 8001dea:	68d2      	ldr	r2, [r2, #12]
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	462b      	mov	r3, r5
 8001df2:	4622      	mov	r2, r4
 8001df4:	4601      	mov	r1, r0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8d4 	bl	8001fa4 <LS032_DrawString>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdb0      	pop	{r4, r5, r7, pc}

08001e06 <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e00c      	b.n	8001e2e <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffb4 	bl	8001d86 <LS032_DrawRegister>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <LS032_DrawScene+0x22>
			return ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e006      	b.n	8001e36 <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b1f      	cmp	r3, #31
 8001e32:	d9ef      	bls.n	8001e14 <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff feeb 	bl	8001c24 <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001e4e:	2312      	movs	r3, #18
 8001e50:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001e52:	230a      	movs	r3, #10
 8001e54:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	e01c      	b.n	8001e96 <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e60:	89f9      	ldrh	r1, [r7, #14]
 8001e62:	89bb      	ldrh	r3, [r7, #12]
 8001e64:	440b      	add	r3, r1
 8001e66:	212c      	movs	r1, #44	@ 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	897b      	ldrh	r3, [r7, #10]
 8001e70:	440b      	add	r3, r1
 8001e72:	3302      	adds	r3, #2
 8001e74:	18d0      	adds	r0, r2, r3
 8001e76:	89fa      	ldrh	r2, [r7, #14]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00da      	lsls	r2, r3, #3
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <LS032_DrawLogo+0x68>)
 8001e86:	4413      	add	r3, r2
 8001e88:	2215      	movs	r2, #21
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f004 fd76 	bl	800697c <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	3301      	adds	r3, #1
 8001e94:	81fb      	strh	r3, [r7, #14]
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e9c:	d3de      	bcc.n	8001e5c <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	080b2a48 	.word	0x080b2a48

08001eac <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	817b      	strh	r3, [r7, #10]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	813b      	strh	r3, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 8001ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d101      	bne.n	8001ed2 <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e05d      	b.n	8001f8e <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4a30      	ldr	r2, [pc, #192]	@ (8001f98 <LS032_DrawChar+0xec>)
 8001ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 8001ee6:	8a7b      	ldrh	r3, [r7, #18]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04e      	b.n	8001f8e <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f9c <LS032_DrawChar+0xf0>)
 8001ef4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ef8:	8a7b      	ldrh	r3, [r7, #18]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a27      	ldr	r2, [pc, #156]	@ (8001fa0 <LS032_DrawChar+0xf4>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001f0c:	f107 0210 	add.w	r2, r7, #16
 8001f10:	8939      	ldrh	r1, [r7, #8]
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc72 	bl	80017fe <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	da04      	bge.n	8001f30 <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f1c3 0318 	rsb	r3, r3, #24
 8001f2e:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001f30:	893b      	ldrh	r3, [r7, #8]
 8001f32:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001f36:	7dbb      	ldrb	r3, [r7, #22]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	da04      	bge.n	8001f46 <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001f3c:	893b      	ldrh	r3, [r7, #8]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001f44:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	757b      	strb	r3, [r7, #21]
 8001f4a:	e01b      	b.n	8001f84 <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	8a3a      	ldrh	r2, [r7, #16]
 8001f52:	189c      	adds	r4, r3, r2
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <LS032_DrawChar+0xf0>)
 8001f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f5c:	8a7b      	ldrh	r3, [r7, #18]
 8001f5e:	7d79      	ldrb	r1, [r7, #21]
 8001f60:	7db8      	ldrb	r0, [r7, #22]
 8001f62:	fb00 f101 	mul.w	r1, r0, r1
 8001f66:	440b      	add	r3, r1
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	7dba      	ldrb	r2, [r7, #22]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4620      	mov	r0, r4
 8001f72:	f004 fd03 	bl	800697c <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001f76:	8a3b      	ldrh	r3, [r7, #16]
 8001f78:	332c      	adds	r3, #44	@ 0x2c
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001f7e:	7d7b      	ldrb	r3, [r7, #21]
 8001f80:	3301      	adds	r3, #1
 8001f82:	757b      	strb	r3, [r7, #21]
 8001f84:	7d7a      	ldrb	r2, [r7, #21]
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3df      	bcc.n	8001f4c <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000028 	.word	0x20000028
 8001f9c:	20000068 	.word	0x20000068
 8001fa0:	080b2a38 	.word	0x080b2a38

08001fa4 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	817b      	strh	r3, [r7, #10]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	813b      	strh	r3, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
 8001fc2:	e025      	b.n	8002010 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	79f8      	ldrb	r0, [r7, #7]
 8001fce:	893a      	ldrh	r2, [r7, #8]
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff ff68 	bl	8001eac <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4a11      	ldr	r2, [pc, #68]	@ (8002024 <LS032_DrawString+0x80>)
 8001fe0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fe8:	440b      	add	r3, r1
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <LS032_DrawString+0x84>)
 8001ff8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ffc:	8abb      	ldrh	r3, [r7, #20]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	897b      	ldrh	r3, [r7, #10]
 8002006:	4413      	add	r3, r2
 8002008:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	3301      	adds	r3, #1
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	7dfa      	ldrb	r2, [r7, #23]
 8002012:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3d4      	bcc.n	8001fc4 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000028 	.word	0x20000028
 8002028:	20000068 	.word	0x20000068

0800202c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002036:	2003      	movs	r0, #3
 8002038:	f000 f960 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203c:	200f      	movs	r0, #15
 800203e:	f000 f80d 	bl	800205c <HAL_InitTick>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	e001      	b.n	8002052 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204e:	f7fe ff23 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002052:	79fb      	ldrb	r3, [r7, #7]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <HAL_InitTick+0x6c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_InitTick+0x70>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <HAL_InitTick+0x6c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f96d 	bl	8002366 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d809      	bhi.n	80020ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 f937 	bl	8002312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_InitTick+0x74>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e007      	b.n	80020bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e004      	b.n	80020bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e001      	b.n	80020bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200000ac 	.word	0x200000ac
 80020cc:	20000024 	.word	0x20000024
 80020d0:	200000a8 	.word	0x200000a8

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200000ac 	.word	0x200000ac
 80020f8:	20008440 	.word	0x20008440

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	@ (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20008440 	.word	0x20008440

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200000ac 	.word	0x200000ac

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	@ (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	@ (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	@ (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff3e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff8e 	bl	8002250 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff31 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e098      	b.n	80024c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <HAL_DMA_Init+0x150>)
 800239a:	429a      	cmp	r2, r3
 800239c:	d80f      	bhi.n	80023be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <HAL_DMA_Init+0x154>)
 80023a6:	4413      	add	r3, r2
 80023a8:	4a4b      	ldr	r2, [pc, #300]	@ (80024d8 <HAL_DMA_Init+0x158>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	009a      	lsls	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a48      	ldr	r2, [pc, #288]	@ (80024dc <HAL_DMA_Init+0x15c>)
 80023ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80023bc:	e00e      	b.n	80023dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_DMA_Init+0x160>)
 80023c6:	4413      	add	r3, r2
 80023c8:	4a43      	ldr	r2, [pc, #268]	@ (80024d8 <HAL_DMA_Init+0x158>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_DMA_Init+0x164>)
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80023f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002436:	d039      	beq.n	80024ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a27      	ldr	r2, [pc, #156]	@ (80024dc <HAL_DMA_Init+0x15c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11a      	bne.n	8002478 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002442:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <HAL_DMA_Init+0x168>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f003 031c 	and.w	r3, r3, #28
 800244e:	210f      	movs	r1, #15
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4924      	ldr	r1, [pc, #144]	@ (80024e8 <HAL_DMA_Init+0x168>)
 8002458:	4013      	ands	r3, r2
 800245a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_DMA_Init+0x168>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002468:	f003 031c 	and.w	r3, r3, #28
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	491d      	ldr	r1, [pc, #116]	@ (80024e8 <HAL_DMA_Init+0x168>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	e019      	b.n	80024ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <HAL_DMA_Init+0x16c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	f003 031c 	and.w	r3, r3, #28
 8002484:	210f      	movs	r1, #15
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	4917      	ldr	r1, [pc, #92]	@ (80024ec <HAL_DMA_Init+0x16c>)
 800248e:	4013      	ands	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_DMA_Init+0x16c>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f003 031c 	and.w	r3, r3, #28
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	4911      	ldr	r1, [pc, #68]	@ (80024ec <HAL_DMA_Init+0x16c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40020407 	.word	0x40020407
 80024d4:	bffdfff8 	.word	0xbffdfff8
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020000 	.word	0x40020000
 80024e0:	bffdfbf8 	.word	0xbffdfbf8
 80024e4:	40020400 	.word	0x40020400
 80024e8:	400200a8 	.word	0x400200a8
 80024ec:	400204a8 	.word	0x400204a8

080024f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Start_IT+0x20>
 800250c:	2302      	movs	r3, #2
 800250e:	e04b      	b.n	80025a8 <HAL_DMA_Start_IT+0xb8>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d13a      	bne.n	800259a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f91e 	bl	800278a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 020e 	orr.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00f      	b.n	8002588 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 020a 	orr.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e005      	b.n	80025a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d008      	beq.n	80025da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2204      	movs	r2, #4
 80025cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 020e 	bic.w	r2, r2, #14
 80025e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 021c 	and.w	r2, r3, #28
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f003 031c 	and.w	r3, r3, #28
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d026      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d021      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002684:	f003 021c 	and.w	r2, r3, #28
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	2104      	movs	r1, #4
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	2b00      	cmp	r3, #0
 800269a:	d071      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026a4:	e06c      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f003 031c 	and.w	r3, r3, #28
 80026ae:	2202      	movs	r2, #2
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02e      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d029      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020a 	bic.w	r2, r2, #10
 80026e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f003 021c 	and.w	r2, r3, #28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2102      	movs	r1, #2
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d038      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002716:	e033      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271c:	f003 031c 	and.w	r3, r3, #28
 8002720:	2208      	movs	r2, #8
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02a      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d025      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 020e 	bic.w	r2, r2, #14
 8002744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f003 021c 	and.w	r2, r3, #28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002780:	bf00      	nop
 8002782:	bf00      	nop
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	f003 021c 	and.w	r2, r3, #28
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d108      	bne.n	80027ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027cc:	e007      	b.n	80027de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	60da      	str	r2, [r3, #12]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	e17f      	b.n	8002afc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8171 	beq.w	8002af6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x40>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d118      	bne.n	80028cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	6939      	ldr	r1, [r7, #16]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80ac 	beq.w	8002af6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <HAL_GPIO_Init+0x330>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_GPIO_Init+0x330>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029aa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <HAL_GPIO_Init+0x330>)
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <HAL_GPIO_Init+0x334>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x242>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b24 <HAL_GPIO_Init+0x338>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_GPIO_Init+0x33c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_GPIO_Init+0x340>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b30 <HAL_GPIO_Init+0x344>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	@ (8002b34 <HAL_GPIO_Init+0x348>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b38 <HAL_GPIO_Init+0x34c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x22a>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e00c      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00a      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a40:	4937      	ldr	r1, [pc, #220]	@ (8002b20 <HAL_GPIO_Init+0x334>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a72:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a78:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a9c:	4a27      	ldr	r2, [pc, #156]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af0:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <HAL_GPIO_Init+0x350>)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f47f ae78 	bne.w	80027fc <HAL_GPIO_Init+0x10>
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	48001000 	.word	0x48001000
 8002b34:	48001400 	.word	0x48001400
 8002b38:	48001800 	.word	0x48001800
 8002b3c:	40010400 	.word	0x40010400

08002b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd ffc4 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000

08002bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bfa:	d130      	bne.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c08:	d038      	beq.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0a:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c12:	4a1e      	ldr	r2, [pc, #120]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2232      	movs	r2, #50	@ 0x32
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	e002      	b.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c44:	d102      	bne.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f2      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c58:	d110      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e00f      	b.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d007      	beq.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c74:	4a05      	ldr	r2, [pc, #20]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	20000024 	.word	0x20000024
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e3ca      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b97      	ldr	r3, [pc, #604]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb4:	4b94      	ldr	r3, [pc, #592]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80e4 	beq.w	8002e94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4a>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	f040 808b 	bne.w	8002df0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 8087 	bne.w	8002df0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce2:	4b89      	ldr	r3, [pc, #548]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x62>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e3a2      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	4b82      	ldr	r3, [pc, #520]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_RCC_OscConfig+0x7c>
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d12:	e005      	b.n	8002d20 <HAL_RCC_OscConfig+0x88>
 8002d14:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d223      	bcs.n	8002d6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fd53 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e383      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d38:	4b73      	ldr	r3, [pc, #460]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a72      	ldr	r2, [pc, #456]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	f043 0308 	orr.w	r3, r3, #8
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b70      	ldr	r3, [pc, #448]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	496d      	ldr	r1, [pc, #436]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d56:	4b6c      	ldr	r3, [pc, #432]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	4968      	ldr	r1, [pc, #416]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
 8002d6a:	e025      	b.n	8002db8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	4b66      	ldr	r3, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4960      	ldr	r1, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	495b      	ldr	r1, [pc, #364]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd13 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e343      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db8:	f000 fc4a 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b52      	ldr	r3, [pc, #328]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	4950      	ldr	r1, [pc, #320]	@ (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8002f10 <HAL_RCC_OscConfig+0x278>)
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002f14 <HAL_RCC_OscConfig+0x27c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f93d 	bl	800205c <HAL_InitTick>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d052      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	e327      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d032      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e04:	f7ff f97a 	bl	80020fc <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e0c:	f7ff f976 	bl	80020fc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e310      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b34      	ldr	r3, [pc, #208]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4931      	ldr	r1, [pc, #196]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e48:	4b2f      	ldr	r3, [pc, #188]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	492c      	ldr	r1, [pc, #176]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
 8002e5c:	e01a      	b.n	8002e94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a29      	ldr	r2, [pc, #164]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6a:	f7ff f947 	bl	80020fc <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e72:	f7ff f943 	bl	80020fc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e2dd      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e84:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x1da>
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d074      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x21a>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d10e      	bne.n	8002eca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d064      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d160      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e2ba      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x24a>
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e026      	b.n	8002f30 <HAL_RCC_OscConfig+0x298>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eea:	d115      	bne.n	8002f18 <HAL_RCC_OscConfig+0x280>
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a02      	ldr	r2, [pc, #8]	@ (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e014      	b.n	8002f30 <HAL_RCC_OscConfig+0x298>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	080069b0 	.word	0x080069b0
 8002f10:	20000024 	.word	0x20000024
 8002f14:	200000a8 	.word	0x200000a8
 8002f18:	4ba0      	ldr	r3, [pc, #640]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b9d      	ldr	r3, [pc, #628]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9c      	ldr	r2, [pc, #624]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7ff f8e0 	bl	80020fc <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff f8dc 	bl	80020fc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e276      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	4b92      	ldr	r3, [pc, #584]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2a8>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff f8cc 	bl	80020fc <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff f8c8 	bl	80020fc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e262      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7a:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2d0>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d060      	beq.n	8003058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x310>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d116      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x328>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e23f      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b76      	ldr	r3, [pc, #472]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	4973      	ldr	r1, [pc, #460]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	e040      	b.n	8003058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d023      	beq.n	8003026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	4b6f      	ldr	r3, [pc, #444]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7ff f887 	bl	80020fc <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7ff f883 	bl	80020fc <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e21d      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b65      	ldr	r3, [pc, #404]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b62      	ldr	r3, [pc, #392]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	495f      	ldr	r1, [pc, #380]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	e018      	b.n	8003058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b5d      	ldr	r3, [pc, #372]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5c      	ldr	r2, [pc, #368]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7ff f863 	bl	80020fc <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7ff f85f 	bl	80020fc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1f9      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	4b53      	ldr	r3, [pc, #332]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03c      	beq.n	80030de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306c:	4b4b      	ldr	r3, [pc, #300]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	4a4a      	ldr	r2, [pc, #296]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7ff f83e 	bl	80020fc <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7ff f83a 	bl	80020fc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1d4      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003096:	4b41      	ldr	r3, [pc, #260]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x3ec>
 80030a4:	e01b      	b.n	80030de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	4b3d      	ldr	r3, [pc, #244]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ac:	4a3b      	ldr	r2, [pc, #236]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7ff f821 	bl	80020fc <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030be:	f7ff f81d 	bl	80020fc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1b7      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	4b32      	ldr	r3, [pc, #200]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a6 	beq.w	8003238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f0:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	4b27      	ldr	r3, [pc, #156]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003106:	6593      	str	r3, [r2, #88]	@ 0x58
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003114:	2301      	movs	r3, #1
 8003116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003118:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <HAL_RCC_OscConfig+0x508>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d118      	bne.n	8003156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003124:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <HAL_RCC_OscConfig+0x508>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003130:	f7fe ffe4 	bl	80020fc <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fe ffe0 	bl	80020fc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e17a      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <HAL_RCC_OscConfig+0x508>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d8>
 800315e:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800316e:	e029      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d115      	bne.n	80031a4 <HAL_RCC_OscConfig+0x50c>
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	4a07      	ldr	r2, [pc, #28]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_RCC_OscConfig+0x504>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	40007000 	.word	0x40007000
 80031a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	4a9b      	ldr	r2, [pc, #620]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031b4:	4b98      	ldr	r3, [pc, #608]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	4a97      	ldr	r2, [pc, #604]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80031bc:	f023 0304 	bic.w	r3, r3, #4
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d016      	beq.n	80031fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe ff96 	bl	80020fc <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe ff92 	bl	80020fc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e12a      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ed      	beq.n	80031d4 <HAL_RCC_OscConfig+0x53c>
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fe ff7f 	bl	80020fc <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fe ff7b 	bl	80020fc <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e113      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003218:	4b7f      	ldr	r3, [pc, #508]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ed      	bne.n	8003202 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4b7a      	ldr	r3, [pc, #488]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	4a79      	ldr	r2, [pc, #484]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80fe 	beq.w	800343e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	2b02      	cmp	r3, #2
 8003248:	f040 80d0 	bne.w	80033ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800324c:	4b72      	ldr	r3, [pc, #456]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d130      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	3b01      	subs	r3, #1
 800326c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d127      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d11f      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800328c:	2a07      	cmp	r2, #7
 800328e:	bf14      	ite	ne
 8003290:	2201      	movne	r2, #1
 8003292:	2200      	moveq	r2, #0
 8003294:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003296:	4293      	cmp	r3, r2
 8003298:	d113      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d06e      	beq.n	80033a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d069      	beq.n	800339c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032c8:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032d4:	4b50      	ldr	r3, [pc, #320]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0ad      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f0:	f7fe ff04 	bl	80020fc <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe ff00 	bl	80020fc <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e09a      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	4b43      	ldr	r3, [pc, #268]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003316:	4b40      	ldr	r3, [pc, #256]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b40      	ldr	r3, [pc, #256]	@ (800341c <HAL_RCC_OscConfig+0x784>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003326:	3a01      	subs	r2, #1
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003330:	0212      	lsls	r2, r2, #8
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003338:	0852      	lsrs	r2, r2, #1
 800333a:	3a01      	subs	r2, #1
 800333c:	0552      	lsls	r2, r2, #21
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003344:	0852      	lsrs	r2, r2, #1
 8003346:	3a01      	subs	r2, #1
 8003348:	0652      	lsls	r2, r2, #25
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003350:	0912      	lsrs	r2, r2, #4
 8003352:	0452      	lsls	r2, r2, #17
 8003354:	430a      	orrs	r2, r1
 8003356:	4930      	ldr	r1, [pc, #192]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 8003358:	4313      	orrs	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800335c:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003368:	4b2b      	ldr	r3, [pc, #172]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a2a      	ldr	r2, [pc, #168]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003374:	f7fe fec2 	bl	80020fc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe febe 	bl	80020fc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e058      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800339a:	e050      	b.n	800343e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04f      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d148      	bne.n	800343e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b8:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c4:	f7fe fe9a 	bl	80020fc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fe96 	bl	80020fc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e030      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x734>
 80033ea:	e028      	b.n	800343e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d023      	beq.n	800343a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a08      	ldr	r2, [pc, #32]	@ (8003418 <HAL_RCC_OscConfig+0x780>)
 80033f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fe7d 	bl	80020fc <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	e00c      	b.n	8003420 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fe79 	bl	80020fc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d905      	bls.n	8003420 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
 8003418:	40021000 	.word	0x40021000
 800341c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x7b0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ec      	bne.n	8003406 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCC_OscConfig+0x7b0>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4905      	ldr	r1, [pc, #20]	@ (8003448 <HAL_RCC_OscConfig+0x7b0>)
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_OscConfig+0x7b4>)
 8003434:	4013      	ands	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
 8003438:	e001      	b.n	800343e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	feeefffc 	.word	0xfeeefffc

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0e7      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b75      	ldr	r3, [pc, #468]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b72      	ldr	r3, [pc, #456]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	4970      	ldr	r1, [pc, #448]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b6e      	ldr	r3, [pc, #440]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0cf      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d908      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b63      	ldr	r3, [pc, #396]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4960      	ldr	r1, [pc, #384]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d04c      	beq.n	8003568 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d121      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0a6      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	4b54      	ldr	r3, [pc, #336]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d115      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e09a      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003506:	4b4e      	ldr	r3, [pc, #312]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08e      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e086      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4943      	ldr	r1, [pc, #268]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fe fde0 	bl	80020fc <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fddc 	bl	80020fc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e06e      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b3a      	ldr	r3, [pc, #232]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	429a      	cmp	r2, r3
 8003582:	d208      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b2e      	ldr	r3, [pc, #184]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	492b      	ldr	r1, [pc, #172]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003596:	4b29      	ldr	r3, [pc, #164]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d210      	bcs.n	80035c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 0207 	bic.w	r2, r3, #7
 80035ac:	4923      	ldr	r1, [pc, #140]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	4b21      	ldr	r3, [pc, #132]	@ (800363c <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e036      	b.n	8003634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4918      	ldr	r1, [pc, #96]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f0:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4910      	ldr	r1, [pc, #64]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003604:	f000 f824 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	490b      	ldr	r1, [pc, #44]	@ (8003644 <HAL_RCC_ClockConfig+0x1f4>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003624:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_ClockConfig+0x1fc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fd17 	bl	800205c <HAL_InitTick>
 800362e:	4603      	mov	r3, r0
 8003630:	72fb      	strb	r3, [r7, #11]

  return status;
 8003632:	7afb      	ldrb	r3, [r7, #11]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	080069b0 	.word	0x080069b0
 8003648:	20000024 	.word	0x20000024
 800364c:	200000a8 	.word	0x200000a8

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	@ 0x24
 8003654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d11e      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003684:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003690:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e005      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ac:	4a2b      	ldr	r2, [pc, #172]	@ (800375c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e004      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d4:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d134      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036de:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0xac>
 80036f4:	e005      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	e005      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036fc:	4b18      	ldr	r3, [pc, #96]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x110>)
 80036fe:	617b      	str	r3, [r7, #20]
      break;
 8003700:	e002      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003708:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	3301      	adds	r3, #1
 8003714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	fb03 f202 	mul.w	r2, r3, r2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	0e5b      	lsrs	r3, r3, #25
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	3301      	adds	r3, #1
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003748:	69bb      	ldr	r3, [r7, #24]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	@ 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	080069c8 	.word	0x080069c8
 8003760:	00f42400 	.word	0x00f42400

08003764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000024 	.word	0x20000024

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	@ (80037a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	080069c0 	.word	0x080069c0

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037ac:	f7ff ffda 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0adb      	lsrs	r3, r3, #11
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4904      	ldr	r1, [pc, #16]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	080069c0 	.word	0x080069c0

080037d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e0:	4b2a      	ldr	r3, [pc, #168]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037ec:	f7ff f9f0 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 80037f0:	6178      	str	r0, [r7, #20]
 80037f2:	e014      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b25      	ldr	r3, [pc, #148]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a24      	ldr	r2, [pc, #144]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b22      	ldr	r3, [pc, #136]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800380c:	f7ff f9e0 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 8003810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003824:	d10b      	bne.n	800383e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b80      	cmp	r3, #128	@ 0x80
 800382a:	d919      	bls.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003830:	d902      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003832:	2302      	movs	r3, #2
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e013      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003838:	2301      	movs	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	e010      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b80      	cmp	r3, #128	@ 0x80
 8003842:	d902      	bls.n	800384a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003844:	2303      	movs	r3, #3
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e00a      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b80      	cmp	r3, #128	@ 0x80
 800384e:	d102      	bne.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003850:	2302      	movs	r3, #2
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e004      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b70      	cmp	r3, #112	@ 0x70
 800385a:	d101      	bne.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800385c:	2301      	movs	r3, #1
 800385e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4909      	ldr	r1, [pc, #36]	@ (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003870:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	40022000 	.word	0x40022000

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800389c:	2300      	movs	r3, #0
 800389e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d041      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038b8:	d02a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038be:	d824      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038ca:	d81e      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d4:	d010      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038d6:	e018      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038d8:	4b86      	ldr	r3, [pc, #536]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a85      	ldr	r2, [pc, #532]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa8b 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f6:	e00c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3320      	adds	r3, #32
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fb76 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	74fb      	strb	r3, [r7, #19]
      break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003918:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003926:	4973      	ldr	r1, [pc, #460]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d041      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003944:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003948:	d02a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800394a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800394e:	d824      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800395a:	d81e      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003964:	d010      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003966:	e018      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003968:	4b62      	ldr	r3, [pc, #392]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003972:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003974:	e015      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fa43 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003986:	e00c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3320      	adds	r3, #32
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fb2e 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	74fb      	strb	r3, [r7, #19]
      break;
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a8:	4b52      	ldr	r3, [pc, #328]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b6:	494f      	ldr	r1, [pc, #316]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039be:	e001      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a0 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ec:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	4a40      	ldr	r2, [pc, #256]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f8:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a08:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a14:	f7fe fb72 	bl	80020fc <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fe fb6e 	bl	80020fc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a2e:	e005      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a30:	4b31      	ldr	r3, [pc, #196]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d15c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a42:	4b2c      	ldr	r3, [pc, #176]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01f      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d019      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a60:	4b24      	ldr	r3, [pc, #144]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a6c:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	4a20      	ldr	r2, [pc, #128]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a8c:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fb2d 	bl	80020fc <HAL_GetTick>
 8003aa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa4:	e00b      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fb29 	bl	80020fc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d902      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	74fb      	strb	r3, [r7, #19]
            break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abe:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ec      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ae2:	4904      	ldr	r1, [pc, #16]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b00:	7c7b      	ldrb	r3, [r7, #17]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4ba1      	ldr	r3, [pc, #644]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4aa0      	ldr	r2, [pc, #640]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b1e:	4b9b      	ldr	r3, [pc, #620]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	f023 0203 	bic.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	4997      	ldr	r1, [pc, #604]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b40:	4b92      	ldr	r3, [pc, #584]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	f023 020c 	bic.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4e:	498f      	ldr	r1, [pc, #572]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b62:	4b8a      	ldr	r3, [pc, #552]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4986      	ldr	r1, [pc, #536]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b84:	4b81      	ldr	r3, [pc, #516]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	497e      	ldr	r1, [pc, #504]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ba6:	4b79      	ldr	r3, [pc, #484]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	4975      	ldr	r1, [pc, #468]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc8:	4b70      	ldr	r3, [pc, #448]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	496d      	ldr	r1, [pc, #436]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bea:	4b68      	ldr	r3, [pc, #416]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf8:	4964      	ldr	r1, [pc, #400]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1a:	495c      	ldr	r1, [pc, #368]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2e:	4b57      	ldr	r3, [pc, #348]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3c:	4953      	ldr	r1, [pc, #332]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c50:	4b4e      	ldr	r3, [pc, #312]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5e:	494b      	ldr	r1, [pc, #300]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c72:	4b46      	ldr	r3, [pc, #280]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	4942      	ldr	r1, [pc, #264]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c94:	4b3d      	ldr	r3, [pc, #244]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca2:	493a      	ldr	r1, [pc, #232]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b35      	ldr	r3, [pc, #212]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a34      	ldr	r2, [pc, #208]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f898 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	4922      	ldr	r1, [pc, #136]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d12:	4b1e      	ldr	r3, [pc, #120]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d1c:	60d3      	str	r3, [r2, #12]
 8003d1e:	e011      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f869 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d50:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5e:	490b      	ldr	r1, [pc, #44]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d6e:	d10f      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f846 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	74bb      	strb	r3, [r7, #18]
 8003d8a:	e013      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003d8c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f925 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dce:	490d      	ldr	r1, [pc, #52]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003df8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000

08003e08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e16:	4b75      	ldr	r3, [pc, #468]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d018      	beq.n	8003e54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e22:	4b72      	ldr	r3, [pc, #456]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0203 	and.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10d      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
       ||
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
       ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d047      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e044      	b.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d018      	beq.n	8003e8e <RCCEx_PLLSAI1_Config+0x86>
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d825      	bhi.n	8003eac <RCCEx_PLLSAI1_Config+0xa4>
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d002      	beq.n	8003e6a <RCCEx_PLLSAI1_Config+0x62>
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d009      	beq.n	8003e7c <RCCEx_PLLSAI1_Config+0x74>
 8003e68:	e020      	b.n	8003eac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e6a:	4b60      	ldr	r3, [pc, #384]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11d      	bne.n	8003eb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7a:	e01a      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d116      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8c:	e013      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e8e:	4b57      	ldr	r3, [pc, #348]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e9a:	4b54      	ldr	r3, [pc, #336]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eaa:	e006      	b.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e004      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	4944      	ldr	r1, [pc, #272]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d17d      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ee4:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fe f904 	bl	80020fc <HAL_GetTick>
 8003ef4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef6:	e009      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef8:	f7fe f900 	bl	80020fc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	73fb      	strb	r3, [r7, #15]
        break;
 8003f0a:	e005      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f0c:	4b37      	ldr	r3, [pc, #220]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ef      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d160      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	0211      	lsls	r1, r2, #8
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	0912      	lsrs	r2, r2, #4
 8003f3c:	0452      	lsls	r2, r2, #17
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	492a      	ldr	r1, [pc, #168]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]
 8003f46:	e027      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d112      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f4e:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	0211      	lsls	r1, r2, #8
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6912      	ldr	r2, [r2, #16]
 8003f64:	0852      	lsrs	r2, r2, #1
 8003f66:	3a01      	subs	r2, #1
 8003f68:	0552      	lsls	r2, r2, #21
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	491f      	ldr	r1, [pc, #124]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	610b      	str	r3, [r1, #16]
 8003f72:	e011      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	0852      	lsrs	r2, r2, #1
 8003f8c:	3a01      	subs	r2, #1
 8003f8e:	0652      	lsls	r2, r2, #25
 8003f90:	430a      	orrs	r2, r1
 8003f92:	4916      	ldr	r1, [pc, #88]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f98:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fe f8aa 	bl	80020fc <HAL_GetTick>
 8003fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003faa:	e009      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fac:	f7fe f8a6 	bl	80020fc <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fbe:	e005      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4904      	ldr	r1, [pc, #16]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000

08003ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800400a:	4b67      	ldr	r3, [pc, #412]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d10d      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
       ||
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
       ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d047      	beq.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	e044      	b.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d018      	beq.n	8004076 <RCCEx_PLLSAI2_Config+0x86>
 8004044:	2b03      	cmp	r3, #3
 8004046:	d825      	bhi.n	8004094 <RCCEx_PLLSAI2_Config+0xa4>
 8004048:	2b01      	cmp	r3, #1
 800404a:	d002      	beq.n	8004052 <RCCEx_PLLSAI2_Config+0x62>
 800404c:	2b02      	cmp	r3, #2
 800404e:	d009      	beq.n	8004064 <RCCEx_PLLSAI2_Config+0x74>
 8004050:	e020      	b.n	8004094 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004052:	4b55      	ldr	r3, [pc, #340]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11d      	bne.n	800409a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004062:	e01a      	b.n	800409a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004064:	4b50      	ldr	r3, [pc, #320]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d116      	bne.n	800409e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004074:	e013      	b.n	800409e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004076:	4b4c      	ldr	r3, [pc, #304]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004082:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004092:	e006      	b.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      break;
 8004098:	e004      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040aa:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	430b      	orrs	r3, r1
 80040c0:	4939      	ldr	r1, [pc, #228]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d167      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040cc:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a35      	ldr	r2, [pc, #212]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fe f810 	bl	80020fc <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e0:	f7fe f80c 	bl	80020fc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
        break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040f4:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ef      	bne.n	80040e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d14a      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d111      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800410c:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6892      	ldr	r2, [r2, #8]
 800411c:	0211      	lsls	r1, r2, #8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68d2      	ldr	r2, [r2, #12]
 8004122:	0912      	lsrs	r2, r2, #4
 8004124:	0452      	lsls	r2, r2, #17
 8004126:	430a      	orrs	r2, r1
 8004128:	491f      	ldr	r1, [pc, #124]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	614b      	str	r3, [r1, #20]
 800412e:	e011      	b.n	8004154 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004130:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004138:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6892      	ldr	r2, [r2, #8]
 8004140:	0211      	lsls	r1, r2, #8
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6912      	ldr	r2, [r2, #16]
 8004146:	0852      	lsrs	r2, r2, #1
 8004148:	3a01      	subs	r2, #1
 800414a:	0652      	lsls	r2, r2, #25
 800414c:	430a      	orrs	r2, r1
 800414e:	4916      	ldr	r1, [pc, #88]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd ffcc 	bl	80020fc <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004168:	f7fd ffc8 	bl	80020fc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
          break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ef      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4904      	ldr	r1, [pc, #16]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	4313      	orrs	r3, r2
 800419a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e095      	b.n	80042ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ce:	d009      	beq.n	80041e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
 80041d6:	e005      	b.n	80041e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fd4c 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800421a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004224:	d902      	bls.n	800422c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e002      	b.n	8004232 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800422c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004230:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800423a:	d007      	beq.n	800424c <HAL_SPI_Init+0xa0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004244:	d002      	beq.n	800424c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	ea42 0103 	orr.w	r1, r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0204 	and.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b088      	sub	sp, #32
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004302:	f7fd fefb 	bl	80020fc <HAL_GetTick>
 8004306:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
 800431a:	e15c      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Transmit+0x36>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e154      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_SPI_Transmit+0x48>
 8004336:	2302      	movs	r3, #2
 8004338:	e14d      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2203      	movs	r2, #3
 8004346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	d10f      	bne.n	80043ae <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d007      	beq.n	80043cc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043d4:	d952      	bls.n	800447c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_SPI_Transmit+0xf2>
 80043de:	8b7b      	ldrh	r3, [r7, #26]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d145      	bne.n	8004470 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	1c9a      	adds	r2, r3, #2
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004408:	e032      	b.n	8004470 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d112      	bne.n	800443e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	881a      	ldrh	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	1c9a      	adds	r2, r3, #2
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800443c:	e018      	b.n	8004470 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800443e:	f7fd fe5d 	bl	80020fc <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d803      	bhi.n	8004456 <HAL_SPI_Transmit+0x164>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d102      	bne.n	800445c <HAL_SPI_Transmit+0x16a>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0b2      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1c7      	bne.n	800440a <HAL_SPI_Transmit+0x118>
 800447a:	e083      	b.n	8004584 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_Transmit+0x198>
 8004484:	8b7b      	ldrh	r3, [r7, #26]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d177      	bne.n	800457a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d912      	bls.n	80044ba <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b02      	subs	r3, #2
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044b8:	e05f      	b.n	800457a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044e0:	e04b      	b.n	800457a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d12b      	bne.n	8004548 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d912      	bls.n	8004520 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	1c9a      	adds	r2, r3, #2
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b02      	subs	r3, #2
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800451e:	e02c      	b.n	800457a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004546:	e018      	b.n	800457a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004548:	f7fd fdd8 	bl	80020fc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d803      	bhi.n	8004560 <HAL_SPI_Transmit+0x26e>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <HAL_SPI_Transmit+0x274>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e02d      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ae      	bne.n	80044e2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	6839      	ldr	r1, [r7, #0]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fdc7 	bl	800511c <SPI_EndRxTxTransaction>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0d4      	b.n	80047a8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Transmit_DMA+0x2a>
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0cc      	b.n	80047a8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Transmit_DMA+0x3c>
 8004618:	2302      	movs	r3, #2
 800461a:	e0c5      	b.n	80047a8 <HAL_SPI_Transmit_DMA+0x1c8>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2203      	movs	r2, #3
 8004628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466e:	d10f      	bne.n	8004690 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	4a46      	ldr	r2, [pc, #280]	@ (80047b0 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469c:	4a45      	ldr	r2, [pc, #276]	@ (80047b4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800469e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	4a44      	ldr	r2, [pc, #272]	@ (80047b8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80046a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046be:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046c8:	d82d      	bhi.n	8004726 <HAL_SPI_Transmit_DMA+0x146>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d4:	d127      	bne.n	8004726 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004702:	e010      	b.n	8004726 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004712:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	3301      	adds	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	4619      	mov	r1, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800473e:	f7fd fed7 	bl	80024f0 <HAL_DMA_Start_IT>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e023      	b.n	80047a8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d007      	beq.n	800477e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0220 	orr.w	r2, r2, #32
 8004794:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0202 	orr.w	r2, r2, #2
 80047a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	08004d9d 	.word	0x08004d9d
 80047b4:	08004bbf 	.word	0x08004bbf
 80047b8:	08004df1 	.word	0x08004df1

080047bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047d0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d00c      	beq.n	80047f8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_TransmitReceive_DMA+0x38>
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d001      	beq.n	80047f8 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	e158      	b.n	8004aaa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_SPI_TransmitReceive_DMA+0x4e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e14d      	b.n	8004aaa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_SPI_TransmitReceive_DMA+0x60>
 8004818:	2302      	movs	r3, #2
 800481a:	e146      	b.n	8004aaa <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b04      	cmp	r3, #4
 800482e:	d003      	beq.n	8004838 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2205      	movs	r2, #5
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	887a      	ldrh	r2, [r7, #2]
 800484e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	887a      	ldrh	r2, [r7, #2]
 800485a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004880:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800488a:	d908      	bls.n	800489e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	e06f      	b.n	800497e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048ac:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b8:	d126      	bne.n	8004908 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048d4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048e4:	e010      	b.n	8004908 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048f4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d134      	bne.n	800497e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004922:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800492a:	b29b      	uxth	r3, r3
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d111      	bne.n	8004958 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004942:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800494a:	b29b      	uxth	r3, r3
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004956:	e012      	b.n	800497e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004966:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800496e:	b29b      	uxth	r3, r3
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	3301      	adds	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b04      	cmp	r3, #4
 8004988:	d108      	bne.n	800499c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	4a49      	ldr	r2, [pc, #292]	@ (8004ab4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004996:	4a48      	ldr	r2, [pc, #288]	@ (8004ab8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8004998:	62da      	str	r2, [r3, #44]	@ 0x2c
 800499a:	e007      	b.n	80049ac <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	4a46      	ldr	r2, [pc, #280]	@ (8004abc <HAL_SPI_TransmitReceive_DMA+0x300>)
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	4a45      	ldr	r2, [pc, #276]	@ (8004ac0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80049aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b0:	4a44      	ldr	r2, [pc, #272]	@ (8004ac4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80049b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	4619      	mov	r1, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80049d6:	f7fd fd8b 	bl	80024f0 <HAL_DMA_Start_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e4:	f043 0210 	orr.w	r2, r3, #16
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e058      	b.n	8004aaa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	2200      	movs	r2, #0
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	2200      	movs	r2, #0
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	4619      	mov	r1, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a40:	f7fd fd56 	bl	80024f0 <HAL_DMA_Start_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e023      	b.n	8004aaa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0220 	orr.w	r2, r2, #32
 8004a96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0202 	orr.w	r2, r2, #2
 8004aa6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08004db9 	.word	0x08004db9
 8004ab8:	08004c65 	.word	0x08004c65
 8004abc:	08004dd5 	.word	0x08004dd5
 8004ac0:	08004d0d 	.word	0x08004d0d
 8004ac4:	08004df1 	.word	0x08004df1

08004ac8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00f      	beq.n	8004afc <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fd65 	bl	80025b0 <HAL_DMA_Abort>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af0:	f043 0210 	orr.w	r2, r3, #16
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd fd51 	bl	80025b0 <HAL_DMA_Abort>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	f043 0210 	orr.w	r2, r3, #16
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0203 	bic.w	r2, r2, #3
 8004b32:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bcc:	f7fd fa96 	bl	80020fc <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d03b      	beq.n	8004c58 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0220 	bic.w	r2, r2, #32
 8004bee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0202 	bic.w	r2, r2, #2
 8004bfe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	6978      	ldr	r0, [r7, #20]
 8004c06:	f000 fa89 	bl	800511c <SPI_EndRxTxTransaction>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c50:	6978      	ldr	r0, [r7, #20]
 8004c52:	f7ff ffaa 	bl	8004baa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c56:	e002      	b.n	8004c5e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c58:	6978      	ldr	r0, [r7, #20]
 8004c5a:	f7fb ff93 	bl	8000b84 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c72:	f7fd fa43 	bl	80020fc <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d03c      	beq.n	8004d00 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0220 	bic.w	r2, r2, #32
 8004c94:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <SPI_DMAReceiveCplt+0x56>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ca6:	d108      	bne.n	8004cba <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0203 	bic.w	r2, r2, #3
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	e007      	b.n	8004cca <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	2164      	movs	r1, #100	@ 0x64
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f9cc 	bl	800506c <SPI_EndRxTransaction>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff ff56 	bl	8004baa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004cfe:	e002      	b.n	8004d06 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff ff20 	bl	8004b46 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d1a:	f7fd f9ef 	bl	80020fc <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d030      	beq.n	8004d90 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0220 	bic.w	r2, r2, #32
 8004d3c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	2164      	movs	r1, #100	@ 0x64
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f9ea 	bl	800511c <SPI_EndRxTxTransaction>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0203 	bic.w	r2, r2, #3
 8004d68:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff0e 	bl	8004baa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d8e:	e002      	b.n	8004d96 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fee2 	bl	8004b5a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fedf 	bl	8004b6e <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fedb 	bl	8004b82 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fed7 	bl	8004b96 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0203 	bic.w	r2, r2, #3
 8004e0c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e12:	f043 0210 	orr.w	r2, r3, #16
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff fec1 	bl	8004baa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e40:	f7fd f95c 	bl	80020fc <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e50:	f7fd f954 	bl	80020fc <HAL_GetTick>
 8004e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e56:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	015b      	lsls	r3, r3, #5
 8004e5c:	0d1b      	lsrs	r3, r3, #20
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e66:	e054      	b.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d050      	beq.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e70:	f7fd f944 	bl	80020fc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d902      	bls.n	8004e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d13d      	bne.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9e:	d111      	bne.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea8:	d004      	beq.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb2:	d107      	bne.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ecc:	d10f      	bne.n	8004eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e017      	b.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d19b      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000024 	.word	0x20000024

08004f40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	@ 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f52:	f7fd f8d3 	bl	80020fc <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	4413      	add	r3, r2
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f62:	f7fd f8cb 	bl	80020fc <HAL_GetTick>
 8004f66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f70:	4b3d      	ldr	r3, [pc, #244]	@ (8005068 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00da      	lsls	r2, r3, #3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	0d1b      	lsrs	r3, r3, #20
 8004f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f88:	e060      	b.n	800504c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f90:	d107      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d050      	beq.n	800504c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004faa:	f7fd f8a7 	bl	80020fc <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d902      	bls.n	8004fc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d13d      	bne.n	800503c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd8:	d111      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe2:	d004      	beq.n	8004fee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d107      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005006:	d10f      	bne.n	8005028 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e010      	b.n	800505e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	3b01      	subs	r3, #1
 800504a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d196      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	@ 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000024 	.word	0x20000024

0800506c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005080:	d111      	bne.n	80050a6 <SPI_EndRxTransaction+0x3a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508a:	d004      	beq.n	8005096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d107      	bne.n	80050a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff febd 	bl	8004e30 <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e023      	b.n	8005114 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050d4:	d11d      	bne.n	8005112 <SPI_EndRxTransaction+0xa6>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050de:	d004      	beq.n	80050ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e8:	d113      	bne.n	8005112 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff ff22 	bl	8004f40 <SPI_WaitFifoStateUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e000      	b.n	8005114 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff ff03 	bl	8004f40 <SPI_WaitFifoStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e027      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fe68 	bl	8004e30 <SPI_WaitFlagStateUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516a:	f043 0220 	orr.w	r2, r3, #32
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e014      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fedc 	bl	8004f40 <SPI_WaitFifoStateUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e049      	b.n	800524e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fc f814 	bl	80011fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 fa50 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_TIM_PWM_Start+0x24>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e03c      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d109      	bne.n	8005296 <HAL_TIM_PWM_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e02f      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x58>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e022      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x72>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e015      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x8c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e09c      	b.n	8005438 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xb6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	e023      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xc6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	e01b      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	e013      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0xe6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800533c:	e00b      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0xf6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	e003      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd10 	bl	8005d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a35      	ldr	r2, [pc, #212]	@ (8005440 <HAL_TIM_PWM_Start+0x1e8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIM_PWM_Start+0x13e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <HAL_TIM_PWM_Start+0x1ec>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIM_PWM_Start+0x13e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a32      	ldr	r2, [pc, #200]	@ (8005448 <HAL_TIM_PWM_Start+0x1f0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIM_PWM_Start+0x13e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a31      	ldr	r2, [pc, #196]	@ (800544c <HAL_TIM_PWM_Start+0x1f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIM_PWM_Start+0x13e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2f      	ldr	r2, [pc, #188]	@ (8005450 <HAL_TIM_PWM_Start+0x1f8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_TIM_PWM_Start+0x142>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_TIM_PWM_Start+0x144>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a22      	ldr	r2, [pc, #136]	@ (8005440 <HAL_TIM_PWM_Start+0x1e8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c2:	d018      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a22      	ldr	r2, [pc, #136]	@ (8005454 <HAL_TIM_PWM_Start+0x1fc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a21      	ldr	r2, [pc, #132]	@ (8005458 <HAL_TIM_PWM_Start+0x200>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	@ (800545c <HAL_TIM_PWM_Start+0x204>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <HAL_TIM_PWM_Start+0x1ec>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x19e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <HAL_TIM_PWM_Start+0x1f0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d115      	bne.n	8005422 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	4b18      	ldr	r3, [pc, #96]	@ (8005460 <HAL_TIM_PWM_Start+0x208>)
 80053fe:	4013      	ands	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b06      	cmp	r3, #6
 8005406:	d015      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1dc>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540e:	d011      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	e008      	b.n	8005434 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0201 	orr.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e000      	b.n	8005436 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	00010007 	.word	0x00010007

08005464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547e:	2302      	movs	r3, #2
 8005480:	e0ff      	b.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b14      	cmp	r3, #20
 800548e:	f200 80f0 	bhi.w	8005672 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005673 	.word	0x08005673
 80054a0:	08005673 	.word	0x08005673
 80054a4:	08005673 	.word	0x08005673
 80054a8:	0800552d 	.word	0x0800552d
 80054ac:	08005673 	.word	0x08005673
 80054b0:	08005673 	.word	0x08005673
 80054b4:	08005673 	.word	0x08005673
 80054b8:	0800556f 	.word	0x0800556f
 80054bc:	08005673 	.word	0x08005673
 80054c0:	08005673 	.word	0x08005673
 80054c4:	08005673 	.word	0x08005673
 80054c8:	080055af 	.word	0x080055af
 80054cc:	08005673 	.word	0x08005673
 80054d0:	08005673 	.word	0x08005673
 80054d4:	08005673 	.word	0x08005673
 80054d8:	080055f1 	.word	0x080055f1
 80054dc:	08005673 	.word	0x08005673
 80054e0:	08005673 	.word	0x08005673
 80054e4:	08005673 	.word	0x08005673
 80054e8:	08005631 	.word	0x08005631
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f970 	bl	80057d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e0a5      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f9e0 	bl	80058f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e084      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fa49 	bl	8005a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e064      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fab1 	bl	8005b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e043      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fafa 	bl	8005bf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800562e:	e023      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fb3e 	bl	8005cb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005670:	e002      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
      break;
 8005676:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a46      	ldr	r2, [pc, #280]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a43      	ldr	r2, [pc, #268]	@ (80057bc <TIM_Base_SetConfig+0x130>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a42      	ldr	r2, [pc, #264]	@ (80057c0 <TIM_Base_SetConfig+0x134>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a41      	ldr	r2, [pc, #260]	@ (80057c4 <TIM_Base_SetConfig+0x138>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a40      	ldr	r2, [pc, #256]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a35      	ldr	r2, [pc, #212]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a32      	ldr	r2, [pc, #200]	@ (80057bc <TIM_Base_SetConfig+0x130>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a31      	ldr	r2, [pc, #196]	@ (80057c0 <TIM_Base_SetConfig+0x134>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a30      	ldr	r2, [pc, #192]	@ (80057c4 <TIM_Base_SetConfig+0x138>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2f      	ldr	r2, [pc, #188]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2e      	ldr	r2, [pc, #184]	@ (80057cc <TIM_Base_SetConfig+0x140>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2d      	ldr	r2, [pc, #180]	@ (80057d0 <TIM_Base_SetConfig+0x144>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2c      	ldr	r2, [pc, #176]	@ (80057d4 <TIM_Base_SetConfig+0x148>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	@ (80057b8 <TIM_Base_SetConfig+0x12c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00f      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <TIM_Base_SetConfig+0x13c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00b      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a17      	ldr	r2, [pc, #92]	@ (80057cc <TIM_Base_SetConfig+0x140>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d007      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_Base_SetConfig+0x144>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <TIM_Base_SetConfig+0x148>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]
  }
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800

080057d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f023 0201 	bic.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 0302 	bic.w	r3, r3, #2
 8005824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a2c      	ldr	r2, [pc, #176]	@ (80058e4 <TIM_OC1_SetConfig+0x10c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00f      	beq.n	8005858 <TIM_OC1_SetConfig+0x80>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2b      	ldr	r2, [pc, #172]	@ (80058e8 <TIM_OC1_SetConfig+0x110>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_OC1_SetConfig+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a2a      	ldr	r2, [pc, #168]	@ (80058ec <TIM_OC1_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_OC1_SetConfig+0x80>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a29      	ldr	r2, [pc, #164]	@ (80058f0 <TIM_OC1_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_OC1_SetConfig+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a28      	ldr	r2, [pc, #160]	@ (80058f4 <TIM_OC1_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d10c      	bne.n	8005872 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 0308 	bic.w	r3, r3, #8
 800585e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1b      	ldr	r2, [pc, #108]	@ (80058e4 <TIM_OC1_SetConfig+0x10c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_OC1_SetConfig+0xc2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <TIM_OC1_SetConfig+0x110>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_OC1_SetConfig+0xc2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <TIM_OC1_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC1_SetConfig+0xc2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <TIM_OC1_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC1_SetConfig+0xc2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <TIM_OC1_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40012c00 	.word	0x40012c00
 80058e8:	40013400 	.word	0x40013400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f023 0210 	bic.w	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0320 	bic.w	r3, r3, #32
 8005946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a28      	ldr	r2, [pc, #160]	@ (80059f8 <TIM_OC2_SetConfig+0x100>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC2_SetConfig+0x6c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a27      	ldr	r2, [pc, #156]	@ (80059fc <TIM_OC2_SetConfig+0x104>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10d      	bne.n	8005980 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800597e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <TIM_OC2_SetConfig+0x100>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_OC2_SetConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <TIM_OC2_SetConfig+0x104>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_OC2_SetConfig+0xb0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <TIM_OC2_SetConfig+0x108>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_OC2_SetConfig+0xb0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a04 <TIM_OC2_SetConfig+0x10c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC2_SetConfig+0xb0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a19      	ldr	r2, [pc, #100]	@ (8005a08 <TIM_OC2_SetConfig+0x110>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d113      	bne.n	80059d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a27      	ldr	r2, [pc, #156]	@ (8005b08 <TIM_OC3_SetConfig+0xfc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_OC3_SetConfig+0x6a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a26      	ldr	r2, [pc, #152]	@ (8005b0c <TIM_OC3_SetConfig+0x100>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d10d      	bne.n	8005a92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <TIM_OC3_SetConfig+0xfc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00f      	beq.n	8005aba <TIM_OC3_SetConfig+0xae>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b0c <TIM_OC3_SetConfig+0x100>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_OC3_SetConfig+0xae>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b10 <TIM_OC3_SetConfig+0x104>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <TIM_OC3_SetConfig+0xae>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a19      	ldr	r2, [pc, #100]	@ (8005b14 <TIM_OC3_SetConfig+0x108>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC3_SetConfig+0xae>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <TIM_OC3_SetConfig+0x10c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <TIM_OC4_SetConfig+0xc0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x84>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <TIM_OC4_SetConfig+0xc4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x84>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a16      	ldr	r2, [pc, #88]	@ (8005be4 <TIM_OC4_SetConfig+0xc8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x84>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a15      	ldr	r2, [pc, #84]	@ (8005be8 <TIM_OC4_SetConfig+0xcc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x84>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a14      	ldr	r2, [pc, #80]	@ (8005bec <TIM_OC4_SetConfig+0xd0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d109      	bne.n	8005bb4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <TIM_OC5_SetConfig+0xb4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_OC5_SetConfig+0x7a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ca8 <TIM_OC5_SetConfig+0xb8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_OC5_SetConfig+0x7a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a15      	ldr	r2, [pc, #84]	@ (8005cac <TIM_OC5_SetConfig+0xbc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_OC5_SetConfig+0x7a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <TIM_OC5_SetConfig+0xc0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_OC5_SetConfig+0x7a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a13      	ldr	r2, [pc, #76]	@ (8005cb4 <TIM_OC5_SetConfig+0xc4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d109      	bne.n	8005c7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	051b      	lsls	r3, r3, #20
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <TIM_OC6_SetConfig+0xb8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00f      	beq.n	8005d34 <TIM_OC6_SetConfig+0x7c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <TIM_OC6_SetConfig+0xbc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00b      	beq.n	8005d34 <TIM_OC6_SetConfig+0x7c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a16      	ldr	r2, [pc, #88]	@ (8005d78 <TIM_OC6_SetConfig+0xc0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d007      	beq.n	8005d34 <TIM_OC6_SetConfig+0x7c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a15      	ldr	r2, [pc, #84]	@ (8005d7c <TIM_OC6_SetConfig+0xc4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_OC6_SetConfig+0x7c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a14      	ldr	r2, [pc, #80]	@ (8005d80 <TIM_OC6_SetConfig+0xc8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d109      	bne.n	8005d48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40013400 	.word	0x40013400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800

08005d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2201      	movs	r2, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e068      	b.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2d      	ldr	r2, [pc, #180]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5a:	d018      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a14      	ldr	r2, [pc, #80]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40013400 	.word	0x40013400
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000

08005ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e040      	b.n	8005f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb fa72 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	@ 0x24
 8005f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fae0 	bl	80064ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f825 	bl	8005f7c <UART_SetConfig>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e01b      	b.n	8005f74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb5f 	bl	8006630 <UART_CheckIdleState>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b08a      	sub	sp, #40	@ 0x28
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4ba4      	ldr	r3, [pc, #656]	@ (800623c <UART_SetConfig+0x2c0>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a99      	ldr	r2, [pc, #612]	@ (8006240 <UART_SetConfig+0x2c4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a90      	ldr	r2, [pc, #576]	@ (8006244 <UART_SetConfig+0x2c8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d126      	bne.n	8006054 <UART_SetConfig+0xd8>
 8006006:	4b90      	ldr	r3, [pc, #576]	@ (8006248 <UART_SetConfig+0x2cc>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b03      	cmp	r3, #3
 8006012:	d81b      	bhi.n	800604c <UART_SetConfig+0xd0>
 8006014:	a201      	add	r2, pc, #4	@ (adr r2, 800601c <UART_SetConfig+0xa0>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800603d 	.word	0x0800603d
 8006024:	08006035 	.word	0x08006035
 8006028:	08006045 	.word	0x08006045
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006032:	e116      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006034:	2302      	movs	r3, #2
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603a:	e112      	b.n	8006262 <UART_SetConfig+0x2e6>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006042:	e10e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604a:	e10a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006052:	e106      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a7c      	ldr	r2, [pc, #496]	@ (800624c <UART_SetConfig+0x2d0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d138      	bne.n	80060d0 <UART_SetConfig+0x154>
 800605e:	4b7a      	ldr	r3, [pc, #488]	@ (8006248 <UART_SetConfig+0x2cc>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d82d      	bhi.n	80060c8 <UART_SetConfig+0x14c>
 800606c:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <UART_SetConfig+0xf8>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080060b9 	.word	0x080060b9
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060c9 	.word	0x080060c9
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ae:	e0d8      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060b0:	2302      	movs	r3, #2
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b6:	e0d4      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060be:	e0d0      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c6:	e0cc      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ce:	e0c8      	b.n	8006262 <UART_SetConfig+0x2e6>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006250 <UART_SetConfig+0x2d4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d125      	bne.n	8006126 <UART_SetConfig+0x1aa>
 80060da:	4b5b      	ldr	r3, [pc, #364]	@ (8006248 <UART_SetConfig+0x2cc>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060e4:	2b30      	cmp	r3, #48	@ 0x30
 80060e6:	d016      	beq.n	8006116 <UART_SetConfig+0x19a>
 80060e8:	2b30      	cmp	r3, #48	@ 0x30
 80060ea:	d818      	bhi.n	800611e <UART_SetConfig+0x1a2>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d00a      	beq.n	8006106 <UART_SetConfig+0x18a>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d814      	bhi.n	800611e <UART_SetConfig+0x1a2>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <UART_SetConfig+0x182>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d008      	beq.n	800610e <UART_SetConfig+0x192>
 80060fc:	e00f      	b.n	800611e <UART_SetConfig+0x1a2>
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006104:	e0ad      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006106:	2302      	movs	r3, #2
 8006108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610c:	e0a9      	b.n	8006262 <UART_SetConfig+0x2e6>
 800610e:	2304      	movs	r3, #4
 8006110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006114:	e0a5      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006116:	2308      	movs	r3, #8
 8006118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611c:	e0a1      	b.n	8006262 <UART_SetConfig+0x2e6>
 800611e:	2310      	movs	r3, #16
 8006120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006124:	e09d      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a4a      	ldr	r2, [pc, #296]	@ (8006254 <UART_SetConfig+0x2d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d125      	bne.n	800617c <UART_SetConfig+0x200>
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <UART_SetConfig+0x2cc>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006136:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800613a:	2bc0      	cmp	r3, #192	@ 0xc0
 800613c:	d016      	beq.n	800616c <UART_SetConfig+0x1f0>
 800613e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006140:	d818      	bhi.n	8006174 <UART_SetConfig+0x1f8>
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d00a      	beq.n	800615c <UART_SetConfig+0x1e0>
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d814      	bhi.n	8006174 <UART_SetConfig+0x1f8>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <UART_SetConfig+0x1d8>
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d008      	beq.n	8006164 <UART_SetConfig+0x1e8>
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x1f8>
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615a:	e082      	b.n	8006262 <UART_SetConfig+0x2e6>
 800615c:	2302      	movs	r3, #2
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006162:	e07e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e07a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006172:	e076      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617a:	e072      	b.n	8006262 <UART_SetConfig+0x2e6>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a35      	ldr	r2, [pc, #212]	@ (8006258 <UART_SetConfig+0x2dc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d12a      	bne.n	80061dc <UART_SetConfig+0x260>
 8006186:	4b30      	ldr	r3, [pc, #192]	@ (8006248 <UART_SetConfig+0x2cc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006194:	d01a      	beq.n	80061cc <UART_SetConfig+0x250>
 8006196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619a:	d81b      	bhi.n	80061d4 <UART_SetConfig+0x258>
 800619c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a0:	d00c      	beq.n	80061bc <UART_SetConfig+0x240>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a6:	d815      	bhi.n	80061d4 <UART_SetConfig+0x258>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <UART_SetConfig+0x238>
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b0:	d008      	beq.n	80061c4 <UART_SetConfig+0x248>
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x258>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ba:	e052      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061bc:	2302      	movs	r3, #2
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e04e      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e04a      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e046      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e042      	b.n	8006262 <UART_SetConfig+0x2e6>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a17      	ldr	r2, [pc, #92]	@ (8006240 <UART_SetConfig+0x2c4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d13a      	bne.n	800625c <UART_SetConfig+0x2e0>
 80061e6:	4b18      	ldr	r3, [pc, #96]	@ (8006248 <UART_SetConfig+0x2cc>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061f4:	d01a      	beq.n	800622c <UART_SetConfig+0x2b0>
 80061f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061fa:	d81b      	bhi.n	8006234 <UART_SetConfig+0x2b8>
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006200:	d00c      	beq.n	800621c <UART_SetConfig+0x2a0>
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006206:	d815      	bhi.n	8006234 <UART_SetConfig+0x2b8>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <UART_SetConfig+0x298>
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006210:	d008      	beq.n	8006224 <UART_SetConfig+0x2a8>
 8006212:	e00f      	b.n	8006234 <UART_SetConfig+0x2b8>
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800621a:	e022      	b.n	8006262 <UART_SetConfig+0x2e6>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006222:	e01e      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622a:	e01a      	b.n	8006262 <UART_SetConfig+0x2e6>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006232:	e016      	b.n	8006262 <UART_SetConfig+0x2e6>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623a:	e012      	b.n	8006262 <UART_SetConfig+0x2e6>
 800623c:	efff69f3 	.word	0xefff69f3
 8006240:	40008000 	.word	0x40008000
 8006244:	40013800 	.word	0x40013800
 8006248:	40021000 	.word	0x40021000
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a9f      	ldr	r2, [pc, #636]	@ (80064e4 <UART_SetConfig+0x568>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d17a      	bne.n	8006362 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800626c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006270:	2b08      	cmp	r3, #8
 8006272:	d824      	bhi.n	80062be <UART_SetConfig+0x342>
 8006274:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x300>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062af 	.word	0x080062af
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062bf 	.word	0x080062bf
 800629c:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fd fa6c 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e010      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b8f      	ldr	r3, [pc, #572]	@ (80064e8 <UART_SetConfig+0x56c>)
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e00d      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd f9cf 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80062b2:	61f8      	str	r0, [r7, #28]
        break;
 80062b4:	e009      	b.n	80062ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e005      	b.n	80062ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80fb 	beq.w	80064c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d305      	bcc.n	80062ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d903      	bls.n	80062f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062f4:	e0e8      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2200      	movs	r2, #0
 80062fa:	461c      	mov	r4, r3
 80062fc:	4615      	mov	r5, r2
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	022b      	lsls	r3, r5, #8
 8006308:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800630c:	0222      	lsls	r2, r4, #8
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	6849      	ldr	r1, [r1, #4]
 8006312:	0849      	lsrs	r1, r1, #1
 8006314:	2000      	movs	r0, #0
 8006316:	4688      	mov	r8, r1
 8006318:	4681      	mov	r9, r0
 800631a:	eb12 0a08 	adds.w	sl, r2, r8
 800631e:	eb43 0b09 	adc.w	fp, r3, r9
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	f7f9 ff48 	bl	80001c8 <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4613      	mov	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006346:	d308      	bcc.n	800635a <UART_SetConfig+0x3de>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800634e:	d204      	bcs.n	800635a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	e0b6      	b.n	80064c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006360:	e0b2      	b.n	80064c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636a:	d15e      	bne.n	800642a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800636c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006370:	2b08      	cmp	r3, #8
 8006372:	d828      	bhi.n	80063c6 <UART_SetConfig+0x44a>
 8006374:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <UART_SetConfig+0x400>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a9 	.word	0x080063a9
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063c7 	.word	0x080063c7
 800638c:	080063b7 	.word	0x080063b7
 8006390:	080063c7 	.word	0x080063c7
 8006394:	080063c7 	.word	0x080063c7
 8006398:	080063c7 	.word	0x080063c7
 800639c:	080063bf 	.word	0x080063bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a0:	f7fd f9ec 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 80063a4:	61f8      	str	r0, [r7, #28]
        break;
 80063a6:	e014      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a8:	f7fd f9fe 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 80063ac:	61f8      	str	r0, [r7, #28]
        break;
 80063ae:	e010      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b0:	4b4d      	ldr	r3, [pc, #308]	@ (80064e8 <UART_SetConfig+0x56c>)
 80063b2:	61fb      	str	r3, [r7, #28]
        break;
 80063b4:	e00d      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b6:	f7fd f94b 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80063ba:	61f8      	str	r0, [r7, #28]
        break;
 80063bc:	e009      	b.n	80063d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c2:	61fb      	str	r3, [r7, #28]
        break;
 80063c4:	e005      	b.n	80063d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d077      	beq.n	80064c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005a      	lsls	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d916      	bls.n	8006422 <UART_SetConfig+0x4a6>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fa:	d212      	bcs.n	8006422 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f023 030f 	bic.w	r3, r3, #15
 8006404:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	b29a      	uxth	r2, r3
 8006412:	8afb      	ldrh	r3, [r7, #22]
 8006414:	4313      	orrs	r3, r2
 8006416:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	8afa      	ldrh	r2, [r7, #22]
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	e052      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006428:	e04e      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800642e:	2b08      	cmp	r3, #8
 8006430:	d827      	bhi.n	8006482 <UART_SetConfig+0x506>
 8006432:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <UART_SetConfig+0x4bc>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006465 	.word	0x08006465
 8006440:	0800646d 	.word	0x0800646d
 8006444:	08006483 	.word	0x08006483
 8006448:	08006473 	.word	0x08006473
 800644c:	08006483 	.word	0x08006483
 8006450:	08006483 	.word	0x08006483
 8006454:	08006483 	.word	0x08006483
 8006458:	0800647b 	.word	0x0800647b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd f98e 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8006460:	61f8      	str	r0, [r7, #28]
        break;
 8006462:	e014      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006464:	f7fd f9a0 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8006468:	61f8      	str	r0, [r7, #28]
        break;
 800646a:	e010      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800646c:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <UART_SetConfig+0x56c>)
 800646e:	61fb      	str	r3, [r7, #28]
        break;
 8006470:	e00d      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006472:	f7fd f8ed 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8006476:	61f8      	str	r0, [r7, #28]
        break;
 8006478:	e009      	b.n	800648e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647e:	61fb      	str	r3, [r7, #28]
        break;
 8006480:	e005      	b.n	800648e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800648c:	bf00      	nop
    }

    if (pclk != 0U)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d019      	beq.n	80064c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	085a      	lsrs	r2, r3, #1
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	441a      	add	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b0f      	cmp	r3, #15
 80064ac:	d909      	bls.n	80064c2 <UART_SetConfig+0x546>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b4:	d205      	bcs.n	80064c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
 80064c0:	e002      	b.n	80064c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	@ 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e2:	bf00      	nop
 80064e4:	40008000 	.word	0x40008000
 80064e8:	00f42400 	.word	0x00f42400

080064ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01a      	beq.n	8006602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ea:	d10a      	bne.n	8006602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b098      	sub	sp, #96	@ 0x60
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006640:	f7fb fd5c 	bl	80020fc <HAL_GetTick>
 8006644:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b08      	cmp	r3, #8
 8006652:	d12e      	bne.n	80066b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f88c 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d021      	beq.n	80066b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800667c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800668c:	647b      	str	r3, [r7, #68]	@ 0x44
 800668e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800669a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e062      	b.n	8006778 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d149      	bne.n	8006754 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c8:	2200      	movs	r2, #0
 80066ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f856 	bl	8006780 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d03c      	beq.n	8006754 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	623b      	str	r3, [r7, #32]
   return(result);
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e6      	bne.n	80066da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	60fb      	str	r3, [r7, #12]
   return(result);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800672c:	61fa      	str	r2, [r7, #28]
 800672e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	617b      	str	r3, [r7, #20]
   return(result);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e011      	b.n	8006778 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3758      	adds	r7, #88	@ 0x58
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	e04f      	b.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d04b      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fb fcaf 	bl	80020fc <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e04e      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d037      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b80      	cmp	r3, #128	@ 0x80
 80067c6:	d034      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b40      	cmp	r3, #64	@ 0x40
 80067cc:	d031      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d110      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2208      	movs	r2, #8
 80067e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f838 	bl	800685a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2208      	movs	r2, #8
 80067ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e029      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800680c:	d111      	bne.n	8006832 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f81e 	bl	800685a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e00f      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	429a      	cmp	r2, r3
 800684e:	d0a0      	beq.n	8006792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685a:	b480      	push	{r7}
 800685c:	b095      	sub	sp, #84	@ 0x54
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006880:	643b      	str	r3, [r7, #64]	@ 0x40
 8006882:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800688e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3308      	adds	r3, #8
 800689a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d118      	bne.n	8006902 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 0310 	bic.w	r3, r3, #16
 80068e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	613b      	str	r3, [r7, #16]
   return(result);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e6      	bne.n	80068d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006916:	bf00      	nop
 8006918:	3754      	adds	r7, #84	@ 0x54
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <memset>:
 8006922:	4402      	add	r2, r0
 8006924:	4603      	mov	r3, r0
 8006926:	4293      	cmp	r3, r2
 8006928:	d100      	bne.n	800692c <memset+0xa>
 800692a:	4770      	bx	lr
 800692c:	f803 1b01 	strb.w	r1, [r3], #1
 8006930:	e7f9      	b.n	8006926 <memset+0x4>
	...

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4d0d      	ldr	r5, [pc, #52]	@ (800696c <__libc_init_array+0x38>)
 8006938:	4c0d      	ldr	r4, [pc, #52]	@ (8006970 <__libc_init_array+0x3c>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	2600      	movs	r6, #0
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	4d0b      	ldr	r5, [pc, #44]	@ (8006974 <__libc_init_array+0x40>)
 8006946:	4c0c      	ldr	r4, [pc, #48]	@ (8006978 <__libc_init_array+0x44>)
 8006948:	f000 f826 	bl	8006998 <_init>
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	2600      	movs	r6, #0
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	4798      	blx	r3
 800695e:	3601      	adds	r6, #1
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	4798      	blx	r3
 8006968:	3601      	adds	r6, #1
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	080b5354 	.word	0x080b5354
 8006970:	080b5354 	.word	0x080b5354
 8006974:	080b5354 	.word	0x080b5354
 8006978:	080b5358 	.word	0x080b5358

0800697c <memcpy>:
 800697c:	440a      	add	r2, r1
 800697e:	4291      	cmp	r1, r2
 8006980:	f100 33ff 	add.w	r3, r0, #4294967295
 8006984:	d100      	bne.n	8006988 <memcpy+0xc>
 8006986:	4770      	bx	lr
 8006988:	b510      	push	{r4, lr}
 800698a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006992:	4291      	cmp	r1, r2
 8006994:	d1f9      	bne.n	800698a <memcpy+0xe>
 8006996:	bd10      	pop	{r4, pc}

08006998 <_init>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr

080069a4 <_fini>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	bf00      	nop
 80069a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069aa:	bc08      	pop	{r3}
 80069ac:	469e      	mov	lr, r3
 80069ae:	4770      	bx	lr
