
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029c24  080063c0  080063c0  000073c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ffe4  0802ffe4  00031080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ffe4  0802ffe4  00030fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ffec  0802ffec  00031080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ffec  0802ffec  00030fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802fff0  0802fff0  00030ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0802fff4  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000821c  20000080  08030074  00031080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000829c  08030074  0003129c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b3e  00000000  00000000  000310b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5e  00000000  00000000  00044bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00047950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de7  00000000  00000000  00048b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254f7  00000000  00000000  00049917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d82  00000000  00000000  0006ee0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4209  00000000  00000000  00085b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  00169ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0016ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063a8 	.word	0x080063a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080063a8 	.word	0x080063a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_DMA_Init+0x38>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	4a0b      	ldr	r2, [pc, #44]	@ (80005e4 <MX_DMA_Init+0x38>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_DMA_Init+0x38>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2039      	movs	r0, #57	@ 0x39
 80005d0:	f001 fc21 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80005d4:	2039      	movs	r0, #57	@ 0x39
 80005d6:	f001 fc3a 	bl	8001e4e <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b53      	ldr	r3, [pc, #332]	@ (800074c <MX_GPIO_Init+0x164>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a52      	ldr	r2, [pc, #328]	@ (800074c <MX_GPIO_Init+0x164>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b50      	ldr	r3, [pc, #320]	@ (800074c <MX_GPIO_Init+0x164>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b4d      	ldr	r3, [pc, #308]	@ (800074c <MX_GPIO_Init+0x164>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a4c      	ldr	r2, [pc, #304]	@ (800074c <MX_GPIO_Init+0x164>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b4a      	ldr	r3, [pc, #296]	@ (800074c <MX_GPIO_Init+0x164>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b47      	ldr	r3, [pc, #284]	@ (800074c <MX_GPIO_Init+0x164>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a46      	ldr	r2, [pc, #280]	@ (800074c <MX_GPIO_Init+0x164>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b44      	ldr	r3, [pc, #272]	@ (800074c <MX_GPIO_Init+0x164>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b41      	ldr	r3, [pc, #260]	@ (800074c <MX_GPIO_Init+0x164>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a40      	ldr	r2, [pc, #256]	@ (800074c <MX_GPIO_Init+0x164>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <MX_GPIO_Init+0x164>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <MX_GPIO_Init+0x164>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a3a      	ldr	r2, [pc, #232]	@ (800074c <MX_GPIO_Init+0x164>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b38      	ldr	r3, [pc, #224]	@ (800074c <MX_GPIO_Init+0x164>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	4835      	ldr	r0, [pc, #212]	@ (8000750 <MX_GPIO_Init+0x168>)
 800067c:	f001 ffa4 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 8000680:	2200      	movs	r2, #0
 8000682:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000686:	4833      	ldr	r0, [pc, #204]	@ (8000754 <MX_GPIO_Init+0x16c>)
 8000688:	f001 ff9e 	bl	80025c8 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2104      	movs	r1, #4
 8000690:	4831      	ldr	r0, [pc, #196]	@ (8000758 <MX_GPIO_Init+0x170>)
 8000692:	f001 ff99 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	482e      	ldr	r0, [pc, #184]	@ (8000754 <MX_GPIO_Init+0x16c>)
 800069c:	f001 ff94 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006a0:	2310      	movs	r3, #16
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4827      	ldr	r0, [pc, #156]	@ (8000750 <MX_GPIO_Init+0x168>)
 80006b4:	f001 fdde 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4820      	ldr	r0, [pc, #128]	@ (8000750 <MX_GPIO_Init+0x168>)
 80006d0:	f001 fdd0 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	481b      	ldr	r0, [pc, #108]	@ (8000754 <MX_GPIO_Init+0x16c>)
 80006e8:	f001 fdc4 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80006ec:	f640 4316 	movw	r3, #3094	@ 0xc16
 80006f0:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4813      	ldr	r0, [pc, #76]	@ (8000754 <MX_GPIO_Init+0x16c>)
 8000706:	f001 fdb5 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800070a:	2304      	movs	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000716:	2303      	movs	r3, #3
 8000718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_GPIO_Init+0x170>)
 8000722:	f001 fda7 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_GPIO_Init+0x16c>)
 800073e:	f001 fd99 	bl	8002274 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	@ 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	48000400 	.word	0x48000400
 8000758:	48000c00 	.word	0x48000c00

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4896      	ldr	r0, [pc, #600]	@ (80009c4 <main+0x268>)
 800076a:	f001 ff2d 	bl	80025c8 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f001 f9df 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f947 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f7ff ff37 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800077a:	f7ff ff17 	bl	80005ac <MX_DMA_Init>
  MX_SPI1_Init();
 800077e:	f000 f9ad 	bl	8000adc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000782:	f000 f9e5 	bl	8000b50 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000786:	f000 fb69 	bl	8000e5c <MX_TIM2_Init>
  MX_TIM4_Init();
 800078a:	f000 fc29 	bl	8000fe0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800078e:	f000 fd55 	bl	800123c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000792:	f000 fbbf 	bl	8000f14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 0;
 8000796:	4b8c      	ldr	r3, [pc, #560]	@ (80009c8 <main+0x26c>)
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800079c:	2100      	movs	r1, #0
 800079e:	488b      	ldr	r0, [pc, #556]	@ (80009cc <main+0x270>)
 80007a0:	f003 fdfc 	bl	800439c <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 000;
 80007a4:	4b88      	ldr	r3, [pc, #544]	@ (80009c8 <main+0x26c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007aa:	2108      	movs	r1, #8
 80007ac:	4887      	ldr	r0, [pc, #540]	@ (80009cc <main+0x270>)
 80007ae:	f003 fdf5 	bl	800439c <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80007b2:	4b87      	ldr	r3, [pc, #540]	@ (80009d0 <main+0x274>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007b8:	2104      	movs	r1, #4
 80007ba:	4886      	ldr	r0, [pc, #536]	@ (80009d4 <main+0x278>)
 80007bc:	f003 fdee 	bl	800439c <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80007c0:	4b83      	ldr	r3, [pc, #524]	@ (80009d0 <main+0x274>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007c6:	2108      	movs	r1, #8
 80007c8:	4882      	ldr	r0, [pc, #520]	@ (80009d4 <main+0x278>)
 80007ca:	f003 fde7 	bl	800439c <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80007ce:	4b82      	ldr	r3, [pc, #520]	@ (80009d8 <main+0x27c>)
 80007d0:	4a82      	ldr	r2, [pc, #520]	@ (80009dc <main+0x280>)
 80007d2:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80007d4:	4b80      	ldr	r3, [pc, #512]	@ (80009d8 <main+0x27c>)
 80007d6:	4a82      	ldr	r2, [pc, #520]	@ (80009e0 <main+0x284>)
 80007d8:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 80007da:	4b7f      	ldr	r3, [pc, #508]	@ (80009d8 <main+0x27c>)
 80007dc:	2204      	movs	r2, #4
 80007de:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	@ (80009d8 <main+0x27c>)
 80007e2:	4a80      	ldr	r2, [pc, #512]	@ (80009e4 <main+0x288>)
 80007e4:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80007e6:	4b7c      	ldr	r3, [pc, #496]	@ (80009d8 <main+0x27c>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 80007ec:	4b7a      	ldr	r3, [pc, #488]	@ (80009d8 <main+0x27c>)
 80007ee:	4a75      	ldr	r2, [pc, #468]	@ (80009c4 <main+0x268>)
 80007f0:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 80007f2:	4b79      	ldr	r3, [pc, #484]	@ (80009d8 <main+0x27c>)
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 80007f8:	4b77      	ldr	r3, [pc, #476]	@ (80009d8 <main+0x27c>)
 80007fa:	4a72      	ldr	r2, [pc, #456]	@ (80009c4 <main+0x268>)
 80007fc:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 80007fe:	4b76      	ldr	r3, [pc, #472]	@ (80009d8 <main+0x27c>)
 8000800:	2210      	movs	r2, #16
 8000802:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 8000804:	4b74      	ldr	r3, [pc, #464]	@ (80009d8 <main+0x27c>)
 8000806:	4a78      	ldr	r2, [pc, #480]	@ (80009e8 <main+0x28c>)
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 800080a:	4b78      	ldr	r3, [pc, #480]	@ (80009ec <main+0x290>)
 800080c:	881a      	ldrh	r2, [r3, #0]
 800080e:	4b72      	ldr	r3, [pc, #456]	@ (80009d8 <main+0x27c>)
 8000810:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 8000812:	4b71      	ldr	r3, [pc, #452]	@ (80009d8 <main+0x27c>)
 8000814:	4a76      	ldr	r2, [pc, #472]	@ (80009f0 <main+0x294>)
 8000816:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
 800081e:	e012      	b.n	8000846 <main+0xea>
		ls032.registers[i].str = ls032_registers_text[i];
 8000820:	f897 2307 	ldrb.w	r2, [r7, #775]	@ 0x307
 8000824:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <main+0x27c>)
 8000826:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000828:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	4419      	add	r1, r3
 8000830:	4613      	mov	r3, r2
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	4a6f      	ldr	r2, [pc, #444]	@ (80009f4 <main+0x298>)
 8000838:	4413      	add	r3, r2
 800083a:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 800083c:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 8000840:	3301      	adds	r3, #1
 8000842:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
 8000846:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 800084a:	2b1f      	cmp	r3, #31
 800084c:	d9e8      	bls.n	8000820 <main+0xc4>

	if (LS032_Init(&ls032)) {
 800084e:	4862      	ldr	r0, [pc, #392]	@ (80009d8 <main+0x27c>)
 8000850:	f000 fe9b 	bl	800158a <LS032_Init>
		// TODO: Error Handle
	}

	LS032_DrawLogo(&ls032);
 8000854:	4860      	ldr	r0, [pc, #384]	@ (80009d8 <main+0x27c>)
 8000856:	f001 f875 	bl	8001944 <LS032_DrawLogo>
	//LS032_Update(&ls032);

	uint8_t tmp_num = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
	char speed_letters[255];
	char speed_bars_1[255];
	char speed_bars_2[255];
	char *speed_units = "KM/H";
 8000860:	4b65      	ldr	r3, [pc, #404]	@ (80009f8 <main+0x29c>)
 8000862:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

	memset(speed_bars_1, '/', 255);
 8000866:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800086a:	22ff      	movs	r2, #255	@ 0xff
 800086c:	212f      	movs	r1, #47	@ 0x2f
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f91c 	bl	8005aac <memset>
	memset(speed_bars_2, '\\', 255);
 8000874:	463b      	mov	r3, r7
 8000876:	22ff      	movs	r2, #255	@ 0xff
 8000878:	215c      	movs	r1, #92	@ 0x5c
 800087a:	4618      	mov	r0, r3
 800087c:	f005 f916 	bl	8005aac <memset>

	LS032_TextReg_SetPos(&ls032, 0x02, 380, 26);
 8000880:	231a      	movs	r3, #26
 8000882:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8000886:	2102      	movs	r1, #2
 8000888:	4853      	ldr	r0, [pc, #332]	@ (80009d8 <main+0x27c>)
 800088a:	f000 ff3f 	bl	800170c <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x02, 3);
 800088e:	2203      	movs	r2, #3
 8000890:	2102      	movs	r1, #2
 8000892:	4851      	ldr	r0, [pc, #324]	@ (80009d8 <main+0x27c>)
 8000894:	f000 ff6f 	bl	8001776 <LS032_TextReg_SetSize>

	LS032_TextReg_SetString(&ls032, 0x03, strlen(speed_units), speed_units);
 8000898:	f8d7 0300 	ldr.w	r0, [r7, #768]	@ 0x300
 800089c:	f7ff fc98 	bl	80001d0 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80008a8:	2103      	movs	r1, #3
 80008aa:	484b      	ldr	r0, [pc, #300]	@ (80009d8 <main+0x27c>)
 80008ac:	f000 ff86 	bl	80017bc <LS032_TextReg_SetString>
	LS032_TextReg_SetPos(&ls032, 0x03, 420, 24);
 80008b0:	2318      	movs	r3, #24
 80008b2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80008b6:	2103      	movs	r1, #3
 80008b8:	4847      	ldr	r0, [pc, #284]	@ (80009d8 <main+0x27c>)
 80008ba:	f000 ff27 	bl	800170c <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x03, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	2103      	movs	r1, #3
 80008c2:	4845      	ldr	r0, [pc, #276]	@ (80009d8 <main+0x27c>)
 80008c4:	f000 ff57 	bl	8001776 <LS032_TextReg_SetSize>

	LS032_TextReg_SetPos(&ls032, 0x00, 0, 30);
 80008c8:	231e      	movs	r3, #30
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	4842      	ldr	r0, [pc, #264]	@ (80009d8 <main+0x27c>)
 80008d0:	f000 ff1c 	bl	800170c <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x00, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2100      	movs	r1, #0
 80008d8:	483f      	ldr	r0, [pc, #252]	@ (80009d8 <main+0x27c>)
 80008da:	f000 ff4c 	bl	8001776 <LS032_TextReg_SetSize>
	LS032_TextReg_SetPos(&ls032, 0x01, 0, 34);
 80008de:	2322      	movs	r3, #34	@ 0x22
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	483c      	ldr	r0, [pc, #240]	@ (80009d8 <main+0x27c>)
 80008e6:	f000 ff11 	bl	800170c <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x01, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	483a      	ldr	r0, [pc, #232]	@ (80009d8 <main+0x27c>)
 80008f0:	f000 ff41 	bl	8001776 <LS032_TextReg_SetSize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(speed_letters, "%d", tmp_num);
 80008f4:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 80008f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80008fc:	493f      	ldr	r1, [pc, #252]	@ (80009fc <main+0x2a0>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 f8b2 	bl	8005a68 <siprintf>

	  LS032_Clear(&ls032);
 8000904:	4834      	ldr	r0, [pc, #208]	@ (80009d8 <main+0x27c>)
 8000906:	f000 ffab 	bl	8001860 <LS032_Clear>

	  LS032_TextReg_SetString(&ls032, 0x02, strlen(speed_letters), speed_letters);
 800090a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fc5e 	bl	80001d0 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b2da      	uxtb	r2, r3
 8000918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800091c:	2102      	movs	r1, #2
 800091e:	482e      	ldr	r0, [pc, #184]	@ (80009d8 <main+0x27c>)
 8000920:	f000 ff4c 	bl	80017bc <LS032_TextReg_SetString>

	  LS032_TextReg_SetPos(&ls032, 0x00, (tmp_num % 5)*4, 30);
 8000924:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 8000928:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <main+0x2a4>)
 800092a:	fba3 1302 	umull	r1, r3, r3, r2
 800092e:	0899      	lsrs	r1, r3, #2
 8000930:	460b      	mov	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	b29a      	uxth	r2, r3
 800093e:	231e      	movs	r3, #30
 8000940:	2100      	movs	r1, #0
 8000942:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <main+0x27c>)
 8000944:	f000 fee2 	bl	800170c <LS032_TextReg_SetPos>
	  LS032_TextReg_SetPos(&ls032, 0x01, (tmp_num % 5)*4, 34);
 8000948:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <main+0x2a4>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	0899      	lsrs	r1, r3, #2
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	b29a      	uxth	r2, r3
 8000962:	2322      	movs	r3, #34	@ 0x22
 8000964:	2101      	movs	r1, #1
 8000966:	481c      	ldr	r0, [pc, #112]	@ (80009d8 <main+0x27c>)
 8000968:	f000 fed0 	bl	800170c <LS032_TextReg_SetPos>
	  LS032_TextReg_SetString(&ls032, 0x00, tmp_num/5, speed_bars_1);
 800096c:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 8000970:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <main+0x2a4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	b2da      	uxtb	r2, r3
 800097a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800097e:	2100      	movs	r1, #0
 8000980:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <main+0x27c>)
 8000982:	f000 ff1b 	bl	80017bc <LS032_TextReg_SetString>
	  LS032_TextReg_SetString(&ls032, 0x01, tmp_num/5, speed_bars_2);
 8000986:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 800098a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <main+0x2a4>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	463b      	mov	r3, r7
 8000996:	2101      	movs	r1, #1
 8000998:	480f      	ldr	r0, [pc, #60]	@ (80009d8 <main+0x27c>)
 800099a:	f000 ff0f 	bl	80017bc <LS032_TextReg_SetString>


	  LS032_UpdateAuto(&ls032);
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <main+0x27c>)
 80009a0:	f000 ff3f 	bl	8001822 <LS032_UpdateAuto>

	  tmp_num += 1;
 80009a4:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80009a8:	3301      	adds	r3, #1
 80009aa:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
	  if (tmp_num > 99)
 80009ae:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80009b2:	2b63      	cmp	r3, #99	@ 0x63
 80009b4:	d902      	bls.n	80009bc <main+0x260>
		  tmp_num = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306

	  HAL_Delay(30);
 80009bc:	201e      	movs	r0, #30
 80009be:	f001 f92b 	bl	8001c18 <HAL_Delay>
  {
 80009c2:	e797      	b.n	80008f4 <main+0x198>
 80009c4:	48000400 	.word	0x48000400
 80009c8:	40000800 	.word	0x40000800
 80009cc:	2000807c 	.word	0x2000807c
 80009d0:	40000400 	.word	0x40000400
 80009d4:	20008030 	.word	0x20008030
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	20007f34 	.word	0x20007f34
 80009e0:	48000c00 	.word	0x48000c00
 80009e4:	20007fe4 	.word	0x20007fe4
 80009e8:	200000cc 	.word	0x200000cc
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20005cf0 	.word	0x20005cf0
 80009f4:	20005ef0 	.word	0x20005ef0
 80009f8:	080063c0 	.word	0x080063c0
 80009fc:	080063c8 	.word	0x080063c8
 8000a00:	cccccccd 	.word	0xcccccccd

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b096      	sub	sp, #88	@ 0x58
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2244      	movs	r2, #68	@ 0x44
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 f84a 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a2a:	f001 fdf3 	bl	8002614 <HAL_PWREx_ControlVoltageScaling>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a34:	f000 f84c 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	2303      	movs	r3, #3
 8000a48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a52:	2307      	movs	r3, #7
 8000a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fe2c 	bl	80026c0 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f82f 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2303      	movs	r3, #3
 8000a78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2103      	movs	r1, #3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f9f4 	bl	8002e78 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a96:	f000 f81b 	bl	8000ad0 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3758      	adds	r7, #88	@ 0x58
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	ls032.spi_state = 0;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_SPI_TxCpltCallback+0x28>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_SPI_TxCpltCallback+0x28>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <HAL_SPI_TxCpltCallback+0x28>)
 8000ab8:	8911      	ldrh	r1, [r2, #8]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fd83 	bl	80025c8 <HAL_GPIO_WritePin>
	//LS032_TX_DMA_CPLT(&ls032);
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <MX_SPI1_Init+0x70>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000af4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_SPI1_Init+0x6c>)
 8000b34:	f003 f84e 	bl	8003bd4 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000b3e:	f7ff ffc7 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20007ed0 	.word	0x20007ed0
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <MX_SPI3_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b68:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b6c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000bac:	2208      	movs	r2, #8
 8000bae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_SPI3_Init+0x74>)
 8000bb2:	f003 f80f 	bl	8003bd4 <HAL_SPI_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f7ff ff88 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20007f34 	.word	0x20007f34
 8000bc8:	40003c00 	.word	0x40003c00

08000bcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	@ 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a43      	ldr	r2, [pc, #268]	@ (8000cf8 <HAL_SPI_MspInit+0x12c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d129      	bne.n	8000c42 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bee:	4b43      	ldr	r3, [pc, #268]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	4a42      	ldr	r2, [pc, #264]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c12:	4b3a      	ldr	r3, [pc, #232]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23e0      	movs	r3, #224	@ 0xe0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 fb1a 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c40:	e056      	b.n	8000cf0 <HAL_SPI_MspInit+0x124>
  else if(spiHandle->Instance==SPI3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <HAL_SPI_MspInit+0x134>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d151      	bne.n	8000cf0 <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c50:	4a2a      	ldr	r2, [pc, #168]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c58:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	4a24      	ldr	r2, [pc, #144]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <HAL_SPI_MspInit+0x130>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	481a      	ldr	r0, [pc, #104]	@ (8000d04 <HAL_SPI_MspInit+0x138>)
 8000c9a:	f001 faeb 	bl	8002274 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d0c <HAL_SPI_MspInit+0x140>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cd6:	f001 f8d5 	bl	8001e84 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_SPI_MspInit+0x118>
      Error_Handler();
 8000ce0:	f7ff fef6 	bl	8000ad0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000ce8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cea:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_SPI_MspInit+0x13c>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	@ 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40003c00 	.word	0x40003c00
 8000d04:	48000800 	.word	0x48000800
 8000d08:	20007f98 	.word	0x20007f98
 8000d0c:	4002041c 	.word	0x4002041c

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 ff13 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <DMA2_Channel2_IRQHandler+0x10>)
 8000dbe:	f001 f979 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20007f98 	.word	0x20007f98

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f004 fe5e 	bl	8005abc <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20018000 	.word	0x20018000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20007fe0 	.word	0x20007fe0
 8000e34:	200082a0 	.word	0x200082a0

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000e8a:	2230      	movs	r2, #48	@ 0x30
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <MX_TIM2_Init+0xb0>)
 8000e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ea6:	4818      	ldr	r0, [pc, #96]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000ea8:	f003 fa20 	bl	80042ec <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f7ff fe0d 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000ec6:	f004 f825 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ed0:	f7ff fdfe 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	@ 0x60
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_TIM2_Init+0xb4>)
 8000eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000eec:	f003 fb5c 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ef6:	f7ff fdeb 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <MX_TIM2_Init+0xac>)
 8000efc:	f000 f91c 	bl	8001138 <HAL_TIM_MspPostInit>

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20007fe4 	.word	0x20007fe4
 8000f0c:	0061a7ff 	.word	0x0061a7ff
 8000f10:	0030d400 	.word	0x0030d400

08000f14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f3a:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <MX_TIM3_Init+0xc8>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f5e:	481e      	ldr	r0, [pc, #120]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f60:	f003 f9c4 	bl	80042ec <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f6a:	f7ff fdb1 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000f7e:	f003 ffc9 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f88:	f7ff fda2 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	@ 0x60
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000f90:	2332      	movs	r3, #50	@ 0x32
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000fa4:	f003 fb00 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fae:	f7ff fd8f 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000fba:	f003 faf5 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fc4:	f7ff fd84 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <MX_TIM3_Init+0xc4>)
 8000fca:	f000 f8b5 	bl	8001138 <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20008030 	.word	0x20008030
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_TIM4_Init+0xc8>)
 8001008:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001016:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001018:	f242 720f 	movw	r2, #9999	@ 0x270f
 800101c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 800102c:	f003 f95e 	bl	80042ec <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001036:	f7ff fd4b 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 800104a:	f003 ff63 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001054:	f7ff fd3c 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001058:	2360      	movs	r3, #96	@ 0x60
 800105a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001070:	f003 fa9a 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800107a:	f7ff fd29 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001086:	f003 fa8f 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001090:	f7ff fd1e 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM4_Init+0xc4>)
 8001096:	f000 f84f 	bl	8001138 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000807c 	.word	0x2000807c
 80010a8:	40000800 	.word	0x40000800

080010ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010bc:	d10c      	bne.n	80010d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010d6:	e022      	b.n	800111e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <HAL_TIM_PWM_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10c      	bne.n	80010fc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
}
 80010fa:	e010      	b.n	800111e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <HAL_TIM_PWM_MspInit+0x88>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10b      	bne.n	800111e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6593      	str	r3, [r2, #88]	@ 0x58
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_TIM_PWM_MspInit+0x80>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40000400 	.word	0x40000400
 8001134:	40000800 	.word	0x40000800

08001138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001158:	d11c      	bne.n	8001194 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a32      	ldr	r2, [pc, #200]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8001172:	2308      	movs	r3, #8
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4827      	ldr	r0, [pc, #156]	@ (800122c <HAL_TIM_MspPostInit+0xf4>)
 800118e:	f001 f871 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001192:	e044      	b.n	800121e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a25      	ldr	r2, [pc, #148]	@ (8001230 <HAL_TIM_MspPostInit+0xf8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d11d      	bne.n	80011da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 80011b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011c8:	2302      	movs	r3, #2
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4818      	ldr	r0, [pc, #96]	@ (8001234 <HAL_TIM_MspPostInit+0xfc>)
 80011d4:	f001 f84e 	bl	8002274 <HAL_GPIO_Init>
}
 80011d8:	e021      	b.n	800121e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a16      	ldr	r2, [pc, #88]	@ (8001238 <HAL_TIM_MspPostInit+0x100>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d11c      	bne.n	800121e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_TIM_MspPostInit+0xf0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 80011fc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800120e:	2302      	movs	r3, #2
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <HAL_TIM_MspPostInit+0xf4>)
 800121a:	f001 f82b 	bl	8002274 <HAL_GPIO_Init>
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	@ 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400
 8001230:	40000400 	.word	0x40000400
 8001234:	48000800 	.word	0x48000800
 8001238:	40000800 	.word	0x40000800

0800123c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <MX_USART2_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART2_UART_Init+0x58>)
 8001280:	f003 fed0 	bl	8005024 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f7ff fc21 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200080c8 	.word	0x200080c8
 8001298:	40004400 	.word	0x40004400

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0aa      	sub	sp, #168	@ 0xa8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2284      	movs	r2, #132	@ 0x84
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fbf5 	bl	8005aac <memset>
  if(uartHandle->Instance==USART2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a21      	ldr	r2, [pc, #132]	@ (800134c <HAL_UART_MspInit+0xb0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d13b      	bne.n	8001344 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 ffef 	bl	80032bc <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e4:	f7ff fbf4 	bl	8000ad0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_UART_MspInit+0xb4>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001318:	230c      	movs	r3, #12
 800131a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f000 ff98 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	37a8      	adds	r7, #168	@ 0xa8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004400 	.word	0x40004400
 8001350:	40021000 	.word	0x40021000

08001354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800138c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff fd6e 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	@ (80013a0 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f004 fba1 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001386:	f7ff f9e9 	bl	800075c <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800138c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001398:	0802fff4 	.word	0x0802fff4
  ldr r2, =_sbss
 800139c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80013a0:	2000829c 	.word	0x2000829c

080013a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_2_IRQHandler>

080013a6 <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e003      	b.n	80013bc <delay_us+0x16>
		asm("NOP");
 80013b4:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3f6      	bcc.n	80013b4 <delay_us+0xe>
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]

	//gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
	gate_addr++;			// gate is 1 indexed
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	3301      	adds	r3, #1
 80013e4:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2da      	uxtb	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25a      	sxtb	r2, r3
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	105b      	asrs	r3, r3, #1
 8001414:	b25b      	sxtb	r3, r3
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b25b      	sxtb	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b25b      	sxtb	r3, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25a      	sxtb	r2, r3
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	015b      	lsls	r3, r3, #5
 8001434:	b25b      	sxtb	r3, r3
 8001436:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800143a:	b25b      	sxtb	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b25a      	sxtb	r2, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	b25b      	sxtb	r3, r3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b25a      	sxtb	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b25a      	sxtb	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b25a      	sxtb	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b25a      	sxtb	r2, r3
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	105b      	asrs	r3, r3, #1
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25a      	sxtb	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	10db      	asrs	r3, r3, #3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	115b      	asrs	r3, r3, #5
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	11db      	asrs	r3, r3, #7
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b25a      	sxtb	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b25a      	sxtb	r2, r3
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	125b      	asrs	r3, r3, #9
 8001518:	b25b      	sxtb	r3, r3
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	b25b      	sxtb	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b25a      	sxtb	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	603a      	str	r2, [r7, #0]
 8001542:	80fb      	strh	r3, [r7, #6]
 8001544:	460b      	mov	r3, r1
 8001546:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800154e:	d301      	bcc.n	8001554 <get_idx_from_pos+0x1c>
 8001550:	2301      	movs	r3, #1
 8001552:	e014      	b.n	800157e <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	2b29      	cmp	r3, #41	@ 0x29
 8001558:	d901      	bls.n	800155e <get_idx_from_pos+0x26>
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	461a      	mov	r2, r3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	441a      	add	r2, r3
 8001566:	0052      	lsls	r2, r2, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	b29a      	uxth	r2, r3
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	3302      	adds	r3, #2
 8001576:	b29a      	uxth	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159a:	461a      	mov	r2, r3
 800159c:	2100      	movs	r1, #0
 800159e:	f004 fa85 	bl	8005aac <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	81fb      	strh	r3, [r7, #14]
 80015a6:	e00e      	b.n	80015c6 <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	89fa      	ldrh	r2, [r7, #14]
 80015ae:	212c      	movs	r1, #44	@ 0x2c
 80015b0:	fb01 f202 	mul.w	r2, r1, r2
 80015b4:	441a      	add	r2, r3
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff0a 	bl	80013d4 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80015cc:	d3ec      	bcc.n	80015a8 <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	737b      	strb	r3, [r7, #13]
 80015d2:	e030      	b.n	8001636 <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	2200      	movs	r2, #0
 80015e0:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	2200      	movs	r2, #0
 80015ee:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f4:	7b7b      	ldrb	r3, [r7, #13]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001602:	7b7b      	ldrb	r3, [r7, #13]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	2200      	movs	r2, #0
 800160a:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	22ff      	movs	r2, #255	@ 0xff
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f004 fa3e 	bl	8005aac <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	3301      	adds	r3, #1
 8001634:	737b      	strb	r3, [r7, #13]
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	2b1f      	cmp	r3, #31
 800163a:	d9cb      	bls.n	80015d4 <LS032_Init+0x4a>
	}

	// Flag SPI as Idle
	ls032->spi_state = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	72da      	strb	r2, [r3, #11]

	delay_us(30);
 8001648:	201e      	movs	r0, #30
 800164a:	f7ff feac 	bl	80013a6 <delay_us>
	// Need to clear twice for some reason
	//LS032_Wipe(ls032);
	//LS032_Wipe(ls032);
	delay_us(30);
 800164e:	201e      	movs	r0, #30
 8001650:	f7ff fea9 	bl	80013a6 <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69d8      	ldr	r0, [r3, #28]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	8c1b      	ldrh	r3, [r3, #32]
 800165c:	2201      	movs	r2, #1
 800165e:	4619      	mov	r1, r3
 8001660:	f000 ffb2 	bl	80025c8 <HAL_GPIO_WritePin>
	delay_us(30);
 8001664:	201e      	movs	r0, #30
 8001666:	f7ff fe9e 	bl	80013a6 <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	8a1b      	ldrh	r3, [r3, #16]
 8001672:	4619      	mov	r1, r3
 8001674:	4610      	mov	r0, r2
 8001676:	f002 fe91 	bl	800439c <HAL_TIM_PWM_Start>
	delay_us(30);
 800167a:	201e      	movs	r0, #30
 800167c:	f7ff fe93 	bl	80013a6 <delay_us>
	return SUCCESS;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	4613      	mov	r3, r2
 8001696:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7a9b      	ldrb	r3, [r3, #10]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <LS032_TX_DMA+0x1a>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e02f      	b.n	8001704 <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6858      	ldr	r0, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	891b      	ldrh	r3, [r3, #8]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4619      	mov	r1, r3
 80016ba:	f000 ff85 	bl	80025c8 <HAL_GPIO_WritePin>
	delay_us(3);
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff fe71 	bl	80013a6 <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fb25 	bl	8003d1c <HAL_SPI_Transmit_DMA>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fe62 	bl	80013a6 <delay_us>
	if (ret) {
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6858      	ldr	r0, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	891b      	ldrh	r3, [r3, #8]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f000 ff68 	bl	80025c8 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	729a      	strb	r2, [r3, #10]
		return ret;
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	e000      	b.n	8001704 <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <LS032_TextReg_SetPos>:
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);

	return SUCCESS;
}

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	72fb      	strb	r3, [r7, #11]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	2b1f      	cmp	r3, #31
 800172a:	d901      	bls.n	8001730 <LS032_TextReg_SetPos+0x24>
 800172c:	2301      	movs	r3, #1
 800172e:	e01c      	b.n	800176a <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 8001730:	893b      	ldrh	r3, [r7, #8]
 8001732:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001736:	d301      	bcc.n	800173c <LS032_TextReg_SetPos+0x30>
 8001738:	2301      	movs	r3, #1
 800173a:	e016      	b.n	800176a <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	2b29      	cmp	r3, #41	@ 0x29
 8001740:	d901      	bls.n	8001746 <LS032_TextReg_SetPos+0x3a>
 8001742:	2301      	movs	r3, #1
 8001744:	e011      	b.n	800176a <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	893a      	ldrh	r2, [r7, #8]
 8001752:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4413      	add	r3, r2
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
 8001782:	4613      	mov	r3, r2
 8001784:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	2b1f      	cmp	r3, #31
 800178a:	d901      	bls.n	8001790 <LS032_TextReg_SetSize+0x1a>
 800178c:	2301      	movs	r3, #1
 800178e:	e00f      	b.n	80017b0 <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d901      	bls.n	800179a <LS032_TextReg_SetSize+0x24>
 8001796:	2301      	movs	r3, #1
 8001798:	e00a      	b.n	80017b0 <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	78ba      	ldrb	r2, [r7, #2]
 80017a6:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LS032_TextReg_SetString>:

	ls032->update_queued = 1;
	return SUCCESS;
}

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	72fb      	strb	r3, [r7, #11]
 80017ca:	4613      	mov	r3, r2
 80017cc:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	2b1f      	cmp	r3, #31
 80017d2:	d901      	bls.n	80017d8 <LS032_TextReg_SetString+0x1c>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e020      	b.n	800181a <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	7aba      	ldrb	r2, [r7, #10]
 80017e4:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	22ff      	movs	r2, #255	@ 0xff
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f958 	bl	8005aac <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	7aba      	ldrb	r2, [r7, #10]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 f981 	bl	8005b14 <memcpy>

	ls032->update_queued = 1;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <LS032_UpdateAuto>:
uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
	if (LS032_DrawScene(ls032)) return ERROR;
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
}

uint8_t LS032_UpdateAuto(LS032_HandleTypeDef *ls032) {
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	if (ls032->update_queued == 0) return ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7adb      	ldrb	r3, [r3, #11]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <LS032_UpdateAuto+0x14>
 8001832:	2301      	movs	r3, #1
 8001834:	e010      	b.n	8001858 <LS032_UpdateAuto+0x36>
	if (LS032_DrawScene(ls032)) return ERROR;
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f868 	bl	800190c <LS032_DrawScene>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <LS032_UpdateAuto+0x24>
 8001842:	2301      	movs	r3, #1
 8001844:	e008      	b.n	8001858 <LS032_UpdateAuto+0x36>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184e:	461a      	mov	r2, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff1a 	bl	800168a <LS032_TX_DMA>
 8001856:	4603      	mov	r3, r0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <LS032_Clear>:
uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
	uint8_t clear_cmd[2] = {0x20, 0x00};
	return LS032_TX_DMA(ls032, clear_cmd, 2);
}

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001868:	2300      	movs	r3, #0
 800186a:	81fb      	strh	r3, [r7, #14]
 800186c:	e00f      	b.n	800188e <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	212c      	movs	r1, #44	@ 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	3302      	adds	r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	222a      	movs	r2, #42	@ 0x2a
 8001880:	21ff      	movs	r1, #255	@ 0xff
 8001882:	4618      	mov	r0, r3
 8001884:	f004 f912 	bl	8005aac <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	3301      	adds	r3, #1
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001894:	d3eb      	bcc.n	800186e <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2b1f      	cmp	r3, #31
 80018b0:	d901      	bls.n	80018b6 <LS032_DrawRegister+0x16>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e026      	b.n	8001904 <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80018c0:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80018cc:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80018d8:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80018e4:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 80018f0:	68d2      	ldr	r2, [r2, #12]
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	462b      	mov	r3, r5
 80018f8:	4622      	mov	r2, r4
 80018fa:	4601      	mov	r1, r0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f8d3 	bl	8001aa8 <LS032_DrawString>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}

0800190c <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e00c      	b.n	8001934 <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffbe 	bl	80018a0 <LS032_DrawRegister>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <LS032_DrawScene+0x22>
			return ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e006      	b.n	800193c <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3301      	adds	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b1f      	cmp	r3, #31
 8001938:	d9ef      	bls.n	800191a <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff87 	bl	8001860 <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001952:	2312      	movs	r3, #18
 8001954:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001956:	230a      	movs	r3, #10
 8001958:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	e01c      	b.n	800199a <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001964:	89f9      	ldrh	r1, [r7, #14]
 8001966:	89bb      	ldrh	r3, [r7, #12]
 8001968:	440b      	add	r3, r1
 800196a:	212c      	movs	r1, #44	@ 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4619      	mov	r1, r3
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	440b      	add	r3, r1
 8001976:	3302      	adds	r3, #2
 8001978:	18d0      	adds	r0, r2, r3
 800197a:	89fa      	ldrh	r2, [r7, #14]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	00da      	lsls	r2, r3, #3
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	461a      	mov	r2, r3
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <LS032_DrawLogo+0x68>)
 800198a:	4413      	add	r3, r2
 800198c:	2215      	movs	r2, #21
 800198e:	4619      	mov	r1, r3
 8001990:	f004 f8c0 	bl	8005b14 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	3301      	adds	r3, #1
 8001998:	81fb      	strh	r3, [r7, #14]
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019a0:	d3de      	bcc.n	8001960 <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	0802d6ac 	.word	0x0802d6ac

080019b0 <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	4608      	mov	r0, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4603      	mov	r3, r0
 80019c0:	817b      	strh	r3, [r7, #10]
 80019c2:	460b      	mov	r3, r1
 80019c4:	813b      	strh	r3, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 80019ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d101      	bne.n	80019d6 <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e05d      	b.n	8001a92 <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4a30      	ldr	r2, [pc, #192]	@ (8001a9c <LS032_DrawChar+0xec>)
 80019da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 80019ea:	8a7b      	ldrh	r3, [r7, #18]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04e      	b.n	8001a92 <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa0 <LS032_DrawChar+0xf0>)
 80019f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019fc:	8a7b      	ldrh	r3, [r7, #18]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4a27      	ldr	r2, [pc, #156]	@ (8001aa4 <LS032_DrawChar+0xf4>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001a10:	f107 0210 	add.w	r2, r7, #16
 8001a14:	8939      	ldrh	r1, [r7, #8]
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fd8d 	bl	8001538 <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da04      	bge.n	8001a34 <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f1c3 0318 	rsb	r3, r3, #24
 8001a32:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001a34:	893b      	ldrh	r3, [r7, #8]
 8001a36:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001a3a:	7dbb      	ldrb	r3, [r7, #22]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	da04      	bge.n	8001a4a <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001a48:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	757b      	strb	r3, [r7, #21]
 8001a4e:	e01b      	b.n	8001a88 <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	8a3a      	ldrh	r2, [r7, #16]
 8001a56:	189c      	adds	r4, r3, r2
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <LS032_DrawChar+0xf0>)
 8001a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a60:	8a7b      	ldrh	r3, [r7, #18]
 8001a62:	7d79      	ldrb	r1, [r7, #21]
 8001a64:	7db8      	ldrb	r0, [r7, #22]
 8001a66:	fb00 f101 	mul.w	r1, r0, r1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	7dba      	ldrb	r2, [r7, #22]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4620      	mov	r0, r4
 8001a76:	f004 f84d 	bl	8005b14 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001a7a:	8a3b      	ldrh	r3, [r7, #16]
 8001a7c:	332c      	adds	r3, #44	@ 0x2c
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001a82:	7d7b      	ldrb	r3, [r7, #21]
 8001a84:	3301      	adds	r3, #1
 8001a86:	757b      	strb	r3, [r7, #21]
 8001a88:	7d7a      	ldrb	r2, [r7, #21]
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3df      	bcc.n	8001a50 <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000018 	.word	0x20000018
 8001aa4:	0802d6a8 	.word	0x0802d6a8

08001aa8 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
 8001ac6:	e025      	b.n	8001b14 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	79f8      	ldrb	r0, [r7, #7]
 8001ad2:	893a      	ldrh	r2, [r7, #8]
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4603      	mov	r3, r0
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff ff68 	bl	80019b0 <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <LS032_DrawString+0x80>)
 8001ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001aec:	440b      	add	r3, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <LS032_DrawString+0x84>)
 8001afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b00:	8abb      	ldrh	r3, [r7, #20]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	897b      	ldrh	r3, [r7, #10]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	3301      	adds	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
 8001b14:	7dfa      	ldrb	r2, [r7, #23]
 8001b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3d4      	bcc.n	8001ac8 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000018 	.word	0x20000018

08001b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f000 f960 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b40:	200f      	movs	r0, #15
 8001b42:	f000 f80d 	bl	8001b60 <HAL_InitTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	e001      	b.n	8001b56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b52:	f7ff f8dd 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <HAL_InitTick+0x6c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_InitTick+0x70>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_InitTick+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f96d 	bl	8001e6a <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d809      	bhi.n	8001bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f937 	bl	8001e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_InitTick+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e007      	b.n	8001bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e004      	b.n	8001bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e001      	b.n	8001bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000002c 	.word	0x2000002c
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	20000028 	.word	0x20000028

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000002c 	.word	0x2000002c
 8001bfc:	20008150 	.word	0x20008150

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20008150 	.word	0x20008150

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000002c 	.word	0x2000002c

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	@ (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e098      	b.n	8001fc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd4 <HAL_DMA_Init+0x150>)
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d80f      	bhi.n	8001ec2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd8 <HAL_DMA_Init+0x154>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a4b      	ldr	r2, [pc, #300]	@ (8001fdc <HAL_DMA_Init+0x158>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_DMA_Init+0x15c>)
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ec0:	e00e      	b.n	8001ee0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b46      	ldr	r3, [pc, #280]	@ (8001fe4 <HAL_DMA_Init+0x160>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a43      	ldr	r2, [pc, #268]	@ (8001fdc <HAL_DMA_Init+0x158>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	009a      	lsls	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a42      	ldr	r2, [pc, #264]	@ (8001fe8 <HAL_DMA_Init+0x164>)
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f3a:	d039      	beq.n	8001fb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <HAL_DMA_Init+0x15c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11a      	bne.n	8001f7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f46:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <HAL_DMA_Init+0x168>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f003 031c 	and.w	r3, r3, #28
 8001f52:	210f      	movs	r1, #15
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4924      	ldr	r1, [pc, #144]	@ (8001fec <HAL_DMA_Init+0x168>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <HAL_DMA_Init+0x168>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	f003 031c 	and.w	r3, r3, #28
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	491d      	ldr	r1, [pc, #116]	@ (8001fec <HAL_DMA_Init+0x168>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
 8001f7a:	e019      	b.n	8001fb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <HAL_DMA_Init+0x16c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f003 031c 	and.w	r3, r3, #28
 8001f88:	210f      	movs	r1, #15
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4917      	ldr	r1, [pc, #92]	@ (8001ff0 <HAL_DMA_Init+0x16c>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_DMA_Init+0x16c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f003 031c 	and.w	r3, r3, #28
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	4911      	ldr	r1, [pc, #68]	@ (8001ff0 <HAL_DMA_Init+0x16c>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40020407 	.word	0x40020407
 8001fd8:	bffdfff8 	.word	0xbffdfff8
 8001fdc:	cccccccd 	.word	0xcccccccd
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	bffdfbf8 	.word	0xbffdfbf8
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	400200a8 	.word	0x400200a8
 8001ff0:	400204a8 	.word	0x400204a8

08001ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Start_IT+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e04b      	b.n	80020ac <HAL_DMA_Start_IT+0xb8>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d13a      	bne.n	800209e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f8e0 	bl	8002212 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 020e 	orr.w	r2, r2, #14
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00f      	b.n	800208c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 020a 	orr.w	r2, r2, #10
 800208a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e005      	b.n	80020aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d0:	f003 031c 	and.w	r3, r3, #28
 80020d4:	2204      	movs	r2, #4
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d026      	beq.n	800212e <HAL_DMA_IRQHandler+0x7a>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d021      	beq.n	800212e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	f003 021c 	and.w	r2, r3, #28
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	2104      	movs	r1, #4
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	2b00      	cmp	r3, #0
 8002122:	d071      	beq.n	8002208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800212c:	e06c      	b.n	8002208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f003 031c 	and.w	r3, r3, #28
 8002136:	2202      	movs	r2, #2
 8002138:	409a      	lsls	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d02e      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xec>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d029      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 020a 	bic.w	r2, r2, #10
 8002168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f003 021c 	and.w	r2, r3, #28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	2102      	movs	r1, #2
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d038      	beq.n	8002208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800219e:	e033      	b.n	8002208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	f003 031c 	and.w	r3, r3, #28
 80021a8:	2208      	movs	r2, #8
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02a      	beq.n	800220a <HAL_DMA_IRQHandler+0x156>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d025      	beq.n	800220a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020e 	bic.w	r2, r2, #14
 80021cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f003 021c 	and.w	r2, r3, #28
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002208:	bf00      	nop
 800220a:	bf00      	nop
}
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	f003 021c 	and.w	r2, r3, #28
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d108      	bne.n	8002256 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002254:	e007      	b.n	8002266 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	60da      	str	r2, [r3, #12]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e17f      	b.n	8002584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8171 	beq.w	800257e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_GPIO_Init+0x40>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d118      	bne.n	8002354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ac 	beq.w	800257e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b5f      	ldr	r3, [pc, #380]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	4a5e      	ldr	r2, [pc, #376]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6613      	str	r3, [r2, #96]	@ 0x60
 8002432:	4b5c      	ldr	r3, [pc, #368]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243e:	4a5a      	ldr	r2, [pc, #360]	@ (80025a8 <HAL_GPIO_Init+0x334>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x242>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	@ (80025ac <HAL_GPIO_Init+0x338>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	@ (80025b0 <HAL_GPIO_Init+0x33c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	@ (80025b4 <HAL_GPIO_Init+0x340>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	@ (80025b8 <HAL_GPIO_Init+0x344>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	@ (80025bc <HAL_GPIO_Init+0x348>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_GPIO_Init+0x34c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x22a>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c8:	4937      	ldr	r1, [pc, #220]	@ (80025a8 <HAL_GPIO_Init+0x334>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae78 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	48000c00 	.word	0x48000c00
 80025b8:	48001000 	.word	0x48001000
 80025bc:	48001400 	.word	0x48001400
 80025c0:	48001800 	.word	0x48001800
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <HAL_PWREx_GetVoltageRange+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002622:	d130      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800262c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002630:	d038      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800263a:	4a1e      	ldr	r2, [pc, #120]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2232      	movs	r2, #50	@ 0x32
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	e002      	b.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800266c:	d102      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002680:	d110      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e00f      	b.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d007      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269c:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40007000 	.word	0x40007000
 80026b8:	20000004 	.word	0x20000004
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e3ca      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b94      	ldr	r3, [pc, #592]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80e4 	beq.w	80028bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_RCC_OscConfig+0x4a>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	f040 808b 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8087 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270a:	4b89      	ldr	r3, [pc, #548]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e3a2      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_RCC_OscConfig+0x7c>
 8002732:	4b7f      	ldr	r3, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800273a:	e005      	b.n	8002748 <HAL_RCC_OscConfig+0x88>
 800273c:	4b7c      	ldr	r3, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002748:	4293      	cmp	r3, r2
 800274a:	d223      	bcs.n	8002794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd53 	bl	80031fc <RCC_SetFlashLatencyFromMSIRange>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e383      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a72      	ldr	r2, [pc, #456]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	496d      	ldr	r1, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277e:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4968      	ldr	r1, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e025      	b.n	80027e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002794:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4960      	ldr	r1, [pc, #384]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	495b      	ldr	r1, [pc, #364]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fd13 	bl	80031fc <RCC_SetFlashLatencyFromMSIRange>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e343      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 fc4a 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b52      	ldr	r3, [pc, #328]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	4950      	ldr	r1, [pc, #320]	@ (8002934 <HAL_RCC_OscConfig+0x274>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002938 <HAL_RCC_OscConfig+0x278>)
 80027fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002800:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_RCC_OscConfig+0x27c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f9ab 	bl	8001b60 <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d052      	beq.n	80028ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	e327      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d032      	beq.n	8002886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002820:	4b43      	ldr	r3, [pc, #268]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800282c:	f7ff f9e8 	bl	8001c00 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002834:	f7ff f9e4 	bl	8001c00 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e310      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b34      	ldr	r3, [pc, #208]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4931      	ldr	r1, [pc, #196]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	492c      	ldr	r1, [pc, #176]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e01a      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002886:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a29      	ldr	r2, [pc, #164]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002892:	f7ff f9b5 	bl	8001c00 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7ff f9b1 	bl	8001c00 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e2dd      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ac:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x1da>
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d074      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x21a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d10e      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d064      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d160      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e2ba      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x24a>
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e026      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002912:	d115      	bne.n	8002940 <HAL_RCC_OscConfig+0x280>
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a02      	ldr	r2, [pc, #8]	@ (8002930 <HAL_RCC_OscConfig+0x270>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	080063cc 	.word	0x080063cc
 8002938:	20000004 	.word	0x20000004
 800293c:	20000028 	.word	0x20000028
 8002940:	4ba0      	ldr	r3, [pc, #640]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a9f      	ldr	r2, [pc, #636]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a9c      	ldr	r2, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff f94e 	bl	8001c00 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff f94a 	bl	8001c00 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e276      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b92      	ldr	r3, [pc, #584]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x2a8>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7ff f93a 	bl	8001c00 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7ff f936 	bl	8001c00 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e262      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a2:	4b88      	ldr	r3, [pc, #544]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x2d0>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d060      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x310>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d116      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x328>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e23f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b76      	ldr	r3, [pc, #472]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4973      	ldr	r1, [pc, #460]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fc:	e040      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a06:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7ff f8f5 	bl	8001c00 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff f8f1 	bl	8001c00 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e21d      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b62      	ldr	r3, [pc, #392]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	495f      	ldr	r1, [pc, #380]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff f8d1 	bl	8001c00 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7ff f8cd 	bl	8001c00 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1f9      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01c      	beq.n	8002ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7ff f8ac 	bl	8001c00 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7ff f8a8 	bl	8001c00 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002abe:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCC_OscConfig+0x3ec>
 8002acc:	e01b      	b.n	8002b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7ff f88f 	bl	8001c00 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7ff f88b 	bl	8001c00 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1b7      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af8:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ef      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a6 	beq.w	8002c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b18:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10d      	bne.n	8002b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b27      	ldr	r3, [pc, #156]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b30:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d118      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b58:	f7ff f852 	bl	8001c00 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7ff f84e 	bl	8001c00 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e17a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4d8>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b96:	e029      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d115      	bne.n	8002bcc <HAL_RCC_OscConfig+0x50c>
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a03      	ldr	r2, [pc, #12]	@ (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bdc:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a97      	ldr	r2, [pc, #604]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff f804 	bl	8001c00 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7ff f800 	bl	8001c00 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e12a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	4b8b      	ldr	r3, [pc, #556]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ed      	beq.n	8002bfc <HAL_RCC_OscConfig+0x53c>
 8002c20:	e015      	b.n	8002c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe ffed 	bl	8001c00 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe ffe9 	bl	8001c00 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e113      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	4b7f      	ldr	r3, [pc, #508]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ed      	bne.n	8002c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b7a      	ldr	r3, [pc, #488]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	4a79      	ldr	r2, [pc, #484]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80fe 	beq.w	8002e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 80d0 	bne.w	8002e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c74:	4b72      	ldr	r3, [pc, #456]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d130      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d127      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11f      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cb4:	2a07      	cmp	r2, #7
 8002cb6:	bf14      	ite	ne
 8002cb8:	2201      	movne	r2, #1
 8002cba:	2200      	moveq	r2, #0
 8002cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d06e      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d069      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ad      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d18:	f7fe ff72 	bl	8001c00 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe ff6e 	bl	8001c00 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e09a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3e:	4b40      	ldr	r3, [pc, #256]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x784>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d58:	0212      	lsls	r2, r2, #8
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0652      	lsls	r2, r2, #25
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d78:	0912      	lsrs	r2, r2, #4
 8002d7a:	0452      	lsls	r2, r2, #17
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4930      	ldr	r1, [pc, #192]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d84:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d9c:	f7fe ff30 	bl	8001c00 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe ff2c 	bl	8001c00 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db6:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc2:	e050      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d148      	bne.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dec:	f7fe ff08 	bl	8001c00 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe ff04 	bl	8001c00 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e030      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x734>
 8002e12:	e028      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d023      	beq.n	8002e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a08      	ldr	r2, [pc, #32]	@ (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe feeb 	bl	8001c00 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fee7 	bl	8001c00 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d905      	bls.n	8002e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e013      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ec      	bne.n	8002e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	4905      	ldr	r1, [pc, #20]	@ (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x7b4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
 8002e60:	e001      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	feeefffc 	.word	0xfeeefffc

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0e7      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b75      	ldr	r3, [pc, #468]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b72      	ldr	r3, [pc, #456]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	4970      	ldr	r1, [pc, #448]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0cf      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d908      	bls.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b63      	ldr	r3, [pc, #396]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4960      	ldr	r1, [pc, #384]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04c      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d121      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a6      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f16:	4b54      	ldr	r3, [pc, #336]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09a      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e08e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e086      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4943      	ldr	r1, [pc, #268]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fe fe4e 	bl	8001c00 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fe fe4a 	bl	8001c00 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e06e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d208      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	492b      	ldr	r1, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbe:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d210      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4923      	ldr	r1, [pc, #140]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e036      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4918      	ldr	r1, [pc, #96]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003018:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4910      	ldr	r1, [pc, #64]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302c:	f000 f824 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	490b      	ldr	r1, [pc, #44]	@ (800306c <HAL_RCC_ClockConfig+0x1f4>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1f8>)
 800304a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1fc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fd85 	bl	8001b60 <HAL_InitTick>
 8003056:	4603      	mov	r3, r0
 8003058:	72fb      	strb	r3, [r7, #11]

  return status;
 800305a:	7afb      	ldrb	r3, [r7, #11]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	080063cc 	.word	0x080063cc
 8003070:	20000004 	.word	0x20000004
 8003074:	20000028 	.word	0x20000028

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11e      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b8:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e004      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d134      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xa6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xac>
 800311c:	e005      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0e5b      	lsrs	r3, r3, #25
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003170:	69bb      	ldr	r3, [r7, #24]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	@ 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	080063e4 	.word	0x080063e4
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a8:	f7ff fff0 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	080063dc 	.word	0x080063dc

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031d4:	f7ff ffda 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0adb      	lsrs	r3, r3, #11
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080063dc 	.word	0x080063dc

080031fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003208:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003214:	f7ff f9f0 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 8003218:	6178      	str	r0, [r7, #20]
 800321a:	e014      	b.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	4a24      	ldr	r2, [pc, #144]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003226:	6593      	str	r3, [r2, #88]	@ 0x58
 8003228:	4b22      	ldr	r3, [pc, #136]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003234:	f7ff f9e0 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 8003238:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b1e      	ldr	r3, [pc, #120]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323e:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003244:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324c:	d10b      	bne.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b80      	cmp	r3, #128	@ 0x80
 8003252:	d919      	bls.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2ba0      	cmp	r3, #160	@ 0xa0
 8003258:	d902      	bls.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800325a:	2302      	movs	r3, #2
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e013      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003260:	2301      	movs	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e010      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b80      	cmp	r3, #128	@ 0x80
 800326a:	d902      	bls.n	8003272 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800326c:	2303      	movs	r3, #3
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e00a      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b80      	cmp	r3, #128	@ 0x80
 8003276:	d102      	bne.n	800327e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003278:	2302      	movs	r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	e004      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b70      	cmp	r3, #112	@ 0x70
 8003282:	d101      	bne.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003284:	2301      	movs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 0207 	bic.w	r2, r3, #7
 8003290:	4909      	ldr	r1, [pc, #36]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003298:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d001      	beq.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40022000 	.word	0x40022000

080032bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c4:	2300      	movs	r3, #0
 80032c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c8:	2300      	movs	r3, #0
 80032ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d041      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032e0:	d02a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032e6:	d824      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032ec:	d008      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f2:	d81e      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032fc:	d010      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032fe:	e018      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003300:	4b86      	ldr	r3, [pc, #536]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a85      	ldr	r2, [pc, #532]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330c:	e015      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fa8b 	bl	8003830 <RCCEx_PLLSAI1_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331e:	e00c      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3320      	adds	r3, #32
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb76 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	74fb      	strb	r3, [r7, #19]
      break;
 8003336:	e000      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003340:	4b76      	ldr	r3, [pc, #472]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800334e:	4973      	ldr	r1, [pc, #460]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003356:	e001      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d041      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003370:	d02a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003372:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003376:	d824      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800337e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003382:	d81e      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800338c:	d010      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800338e:	e018      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003390:	4b62      	ldr	r3, [pc, #392]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a61      	ldr	r2, [pc, #388]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339c:	e015      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa43 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ae:	e00c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3320      	adds	r3, #32
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fb2e 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	74fb      	strb	r3, [r7, #19]
      break;
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d0:	4b52      	ldr	r3, [pc, #328]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033de:	494f      	ldr	r1, [pc, #316]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a0 	beq.w	800353a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b41      	ldr	r3, [pc, #260]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	4a40      	ldr	r2, [pc, #256]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003420:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342c:	2301      	movs	r3, #1
 800342e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003430:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3a      	ldr	r2, [pc, #232]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800343c:	f7fe fbe0 	bl	8001c00 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fe fbdc 	bl	8001c00 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	74fb      	strb	r3, [r7, #19]
        break;
 8003456:	e005      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003458:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ef      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d15c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800346a:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003474:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01f      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	d019      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003488:	4b24      	ldr	r3, [pc, #144]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003494:	4b21      	ldr	r3, [pc, #132]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349a:	4a20      	ldr	r2, [pc, #128]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a4:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b4:	4a19      	ldr	r2, [pc, #100]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fb9b 	bl	8001c00 <HAL_GetTick>
 80034ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034cc:	e00b      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fb97 	bl	8001c00 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d902      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	74fb      	strb	r3, [r7, #19]
            break;
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e6:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ec      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350a:	4904      	ldr	r1, [pc, #16]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003512:	e009      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
 8003518:	e006      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003528:	7c7b      	ldrb	r3, [r7, #17]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d105      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352e:	4ba1      	ldr	r3, [pc, #644]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	4aa0      	ldr	r2, [pc, #640]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003546:	4b9b      	ldr	r3, [pc, #620]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f023 0203 	bic.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	4997      	ldr	r1, [pc, #604]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003568:	4b92      	ldr	r3, [pc, #584]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f023 020c 	bic.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	498f      	ldr	r1, [pc, #572]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358a:	4b8a      	ldr	r3, [pc, #552]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	4986      	ldr	r1, [pc, #536]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ac:	4b81      	ldr	r3, [pc, #516]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	497e      	ldr	r1, [pc, #504]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ce:	4b79      	ldr	r3, [pc, #484]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035dc:	4975      	ldr	r1, [pc, #468]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f0:	4b70      	ldr	r3, [pc, #448]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	496d      	ldr	r1, [pc, #436]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003612:	4b68      	ldr	r3, [pc, #416]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	4964      	ldr	r1, [pc, #400]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003634:	4b5f      	ldr	r3, [pc, #380]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003642:	495c      	ldr	r1, [pc, #368]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003656:	4b57      	ldr	r3, [pc, #348]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003664:	4953      	ldr	r1, [pc, #332]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003678:	4b4e      	ldr	r3, [pc, #312]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003686:	494b      	ldr	r1, [pc, #300]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800369a:	4b46      	ldr	r3, [pc, #280]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	4942      	ldr	r1, [pc, #264]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d028      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036bc:	4b3d      	ldr	r3, [pc, #244]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ca:	493a      	ldr	r1, [pc, #232]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036da:	d106      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036dc:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a34      	ldr	r2, [pc, #208]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e6:	60d3      	str	r3, [r2, #12]
 80036e8:	e011      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f898 	bl	8003830 <RCCEx_PLLSAI1_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d028      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	4922      	ldr	r1, [pc, #136]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003738:	d106      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4a1d      	ldr	r2, [pc, #116]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003744:	60d3      	str	r3, [r2, #12]
 8003746:	e011      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003750:	d10c      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f869 	bl	8003830 <RCCEx_PLLSAI1_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d031      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003778:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	490b      	ldr	r1, [pc, #44]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003796:	d10f      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2102      	movs	r1, #2
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f846 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	74bb      	strb	r3, [r7, #18]
 80037b2:	e013      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 80037b4:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3320      	adds	r3, #32
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f925 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e8:	4b10      	ldr	r3, [pc, #64]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f6:	490d      	ldr	r1, [pc, #52]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003818:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003820:	7cbb      	ldrb	r3, [r7, #18]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b75      	ldr	r3, [pc, #468]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800384a:	4b72      	ldr	r3, [pc, #456]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003862:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI1_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b60      	ldr	r3, [pc, #384]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b54      	ldr	r3, [pc, #336]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4944      	ldr	r1, [pc, #272]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d17d      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800390c:	4b41      	ldr	r3, [pc, #260]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a40      	ldr	r2, [pc, #256]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe f972 	bl	8001c00 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fe f96e 	bl	8001c00 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003934:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d160      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	492a      	ldr	r1, [pc, #168]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	610b      	str	r3, [r1, #16]
 800396e:	e027      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d112      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003976:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800397e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	0211      	lsls	r1, r2, #8
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6912      	ldr	r2, [r2, #16]
 800398c:	0852      	lsrs	r2, r2, #1
 800398e:	3a01      	subs	r2, #1
 8003990:	0552      	lsls	r2, r2, #21
 8003992:	430a      	orrs	r2, r1
 8003994:	491f      	ldr	r1, [pc, #124]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	610b      	str	r3, [r1, #16]
 800399a:	e011      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6952      	ldr	r2, [r2, #20]
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4916      	ldr	r1, [pc, #88]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c0:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f918 	bl	8001c00 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fe f914 	bl	8001c00 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
          break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a26:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d018      	beq.n	8003a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a32:	4b67      	ldr	r3, [pc, #412]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0203 	and.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10d      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
       ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a4a:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d047      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e044      	b.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d018      	beq.n	8003a9e <RCCEx_PLLSAI2_Config+0x86>
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d825      	bhi.n	8003abc <RCCEx_PLLSAI2_Config+0xa4>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d002      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0x62>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d009      	beq.n	8003a8c <RCCEx_PLLSAI2_Config+0x74>
 8003a78:	e020      	b.n	8003abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7a:	4b55      	ldr	r3, [pc, #340]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e01a      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d116      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e013      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aba:	e006      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e004      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	4939      	ldr	r1, [pc, #228]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d167      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af4:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a35      	ldr	r2, [pc, #212]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fe f87e 	bl	8001c00 <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b06:	e009      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b08:	f7fe f87a 	bl	8001c00 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1a:	e005      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ef      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d14a      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d111      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b34:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	0211      	lsls	r1, r2, #8
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	0912      	lsrs	r2, r2, #4
 8003b4c:	0452      	lsls	r2, r2, #17
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	491f      	ldr	r1, [pc, #124]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	614b      	str	r3, [r1, #20]
 8003b56:	e011      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6912      	ldr	r2, [r2, #16]
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	430a      	orrs	r2, r1
 8003b76:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fe f83a 	bl	8001c00 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fe f836 	bl	8001c00 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4904      	ldr	r1, [pc, #16]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e095      	b.n	8003d12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc ffd0 	bl	8000bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c4c:	d902      	bls.n	8003c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e002      	b.n	8003c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c62:	d007      	beq.n	8003c74 <HAL_SPI_Init+0xa0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	ea42 0103 	orr.w	r1, r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	f003 0204 	and.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0d4      	b.n	8003ee4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_SPI_Transmit_DMA+0x2a>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0cc      	b.n	8003ee4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_SPI_Transmit_DMA+0x3c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0c5      	b.n	8003ee4 <HAL_SPI_Transmit_DMA+0x1c8>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2203      	movs	r2, #3
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003daa:	d10f      	bne.n	8003dcc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd0:	4a46      	ldr	r2, [pc, #280]	@ (8003eec <HAL_SPI_Transmit_DMA+0x1d0>)
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd8:	4a45      	ldr	r2, [pc, #276]	@ (8003ef0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de0:	4a44      	ldr	r2, [pc, #272]	@ (8003ef4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003de2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dfa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e04:	d82d      	bhi.n	8003e62 <HAL_SPI_Transmit_DMA+0x146>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e10:	d127      	bne.n	8003e62 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e2e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3e:	e010      	b.n	8003e62 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e7a:	f7fe f8bb 	bl	8001ff4 <HAL_DMA_Start_IT>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e023      	b.n	8003ee4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b40      	cmp	r3, #64	@ 0x40
 8003ea8:	d007      	beq.n	8003eba <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0220 	orr.w	r2, r2, #32
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0202 	orr.w	r2, r2, #2
 8003ee0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08003fc7 	.word	0x08003fc7
 8003ef0:	08003f21 	.word	0x08003f21
 8003ef4:	08003fe3 	.word	0x08003fe3

08003ef8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f2e:	f7fd fe67 	bl	8001c00 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d03b      	beq.n	8003fba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0220 	bic.w	r2, r2, #32
 8003f50:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0202 	bic.w	r2, r2, #2
 8003f60:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	2164      	movs	r1, #100	@ 0x64
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f000 f97a 	bl	8004260 <SPI_EndRxTxTransaction>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	f043 0220 	orr.w	r2, r3, #32
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff ffaa 	bl	8003f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fb8:	e002      	b.n	8003fc0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7fc fd72 	bl	8000aa4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff8f 	bl	8003ef8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0203 	bic.w	r2, r2, #3
 8003ffe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	f043 0210 	orr.w	r2, r3, #16
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff ff79 	bl	8003f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004034:	f7fd fde4 	bl	8001c00 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004044:	f7fd fddc 	bl	8001c00 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405a:	e054      	b.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d050      	beq.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004064:	f7fd fdcc 	bl	8001c00 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13d      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004092:	d111      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409c:	d004      	beq.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d107      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d10f      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e017      	b.n	8004126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3b01      	subs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d19b      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000004 	.word	0x20000004

08004134 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004146:	f7fd fd5b 	bl	8001c00 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4413      	add	r3, r2
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004156:	f7fd fd53 	bl	8001c00 <HAL_GetTick>
 800415a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004164:	4b3d      	ldr	r3, [pc, #244]	@ (800425c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00da      	lsls	r2, r3, #3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	0d1b      	lsrs	r3, r3, #20
 8004174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800417c:	e060      	b.n	8004240 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004184:	d107      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004194:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d050      	beq.n	8004240 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800419e:	f7fd fd2f 	bl	8001c00 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d902      	bls.n	80041b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13d      	bne.n	8004230 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041cc:	d111      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d6:	d004      	beq.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e0:	d107      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fa:	d10f      	bne.n	800421c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800421a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e010      	b.n	8004252 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3b01      	subs	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d196      	bne.n	800417e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3728      	adds	r7, #40	@ 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000004 	.word	0x20000004

08004260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ff5b 	bl	8004134 <SPI_WaitFifoStateUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e027      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	@ 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff fec0 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e014      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff ff34 	bl	8004134 <SPI_WaitFifoStateUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e000      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e049      	b.n	8004392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc feca 	bl	80010ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fa50 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start+0x24>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e03c      	b.n	800443a <HAL_TIM_PWM_Start+0x9e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d109      	bne.n	80043da <HAL_TIM_PWM_Start+0x3e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e02f      	b.n	800443a <HAL_TIM_PWM_Start+0x9e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x58>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x9e>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b0c      	cmp	r3, #12
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x72>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x9e>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b10      	cmp	r3, #16
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x8c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x9e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e09c      	b.n	800457c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0xb6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	e023      	b.n	800449a <HAL_TIM_PWM_Start+0xfe>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xc6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	e01b      	b.n	800449a <HAL_TIM_PWM_Start+0xfe>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xd6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004470:	e013      	b.n	800449a <HAL_TIM_PWM_Start+0xfe>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xe6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004480:	e00b      	b.n	800449a <HAL_TIM_PWM_Start+0xfe>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b10      	cmp	r3, #16
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_Start+0xf6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004490:	e003      	b.n	800449a <HAL_TIM_PWM_Start+0xfe>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2201      	movs	r2, #1
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fd10 	bl	8004ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a35      	ldr	r2, [pc, #212]	@ (8004584 <HAL_TIM_PWM_Start+0x1e8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_TIM_PWM_Start+0x13e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a34      	ldr	r2, [pc, #208]	@ (8004588 <HAL_TIM_PWM_Start+0x1ec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_TIM_PWM_Start+0x13e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a32      	ldr	r2, [pc, #200]	@ (800458c <HAL_TIM_PWM_Start+0x1f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_TIM_PWM_Start+0x13e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a31      	ldr	r2, [pc, #196]	@ (8004590 <HAL_TIM_PWM_Start+0x1f4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_TIM_PWM_Start+0x13e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004594 <HAL_TIM_PWM_Start+0x1f8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_TIM_PWM_Start+0x142>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_TIM_PWM_Start+0x144>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <HAL_TIM_PWM_Start+0x1e8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01d      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d018      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_TIM_PWM_Start+0x1fc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	@ (800459c <HAL_TIM_PWM_Start+0x200>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_TIM_PWM_Start+0x204>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <HAL_TIM_PWM_Start+0x1ec>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIM_PWM_Start+0x19e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a15      	ldr	r2, [pc, #84]	@ (800458c <HAL_TIM_PWM_Start+0x1f0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d115      	bne.n	8004566 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	4b18      	ldr	r3, [pc, #96]	@ (80045a4 <HAL_TIM_PWM_Start+0x208>)
 8004542:	4013      	ands	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b06      	cmp	r3, #6
 800454a:	d015      	beq.n	8004578 <HAL_TIM_PWM_Start+0x1dc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d011      	beq.n	8004578 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004564:	e008      	b.n	8004578 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e000      	b.n	800457a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	00010007 	.word	0x00010007

080045a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0ff      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b14      	cmp	r3, #20
 80045d2:	f200 80f0 	bhi.w	80047b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045d6:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004631 	.word	0x08004631
 80045e0:	080047b7 	.word	0x080047b7
 80045e4:	080047b7 	.word	0x080047b7
 80045e8:	080047b7 	.word	0x080047b7
 80045ec:	08004671 	.word	0x08004671
 80045f0:	080047b7 	.word	0x080047b7
 80045f4:	080047b7 	.word	0x080047b7
 80045f8:	080047b7 	.word	0x080047b7
 80045fc:	080046b3 	.word	0x080046b3
 8004600:	080047b7 	.word	0x080047b7
 8004604:	080047b7 	.word	0x080047b7
 8004608:	080047b7 	.word	0x080047b7
 800460c:	080046f3 	.word	0x080046f3
 8004610:	080047b7 	.word	0x080047b7
 8004614:	080047b7 	.word	0x080047b7
 8004618:	080047b7 	.word	0x080047b7
 800461c:	08004735 	.word	0x08004735
 8004620:	080047b7 	.word	0x080047b7
 8004624:	080047b7 	.word	0x080047b7
 8004628:	080047b7 	.word	0x080047b7
 800462c:	08004775 	.word	0x08004775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f970 	bl	800491c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0208 	orr.w	r2, r2, #8
 800464a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0204 	bic.w	r2, r2, #4
 800465a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	619a      	str	r2, [r3, #24]
      break;
 800466e:	e0a5      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f9e0 	bl	8004a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	619a      	str	r2, [r3, #24]
      break;
 80046b0:	e084      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fa49 	bl	8004b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0208 	orr.w	r2, r2, #8
 80046cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0204 	bic.w	r2, r2, #4
 80046dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
      break;
 80046f0:	e064      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fab1 	bl	8004c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800470c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
      break;
 8004732:	e043      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fafa 	bl	8004d34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004772:	e023      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb3e 	bl	8004dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800479e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047b4:	e002      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a46      	ldr	r2, [pc, #280]	@ (80048fc <TIM_Base_SetConfig+0x12c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a43      	ldr	r2, [pc, #268]	@ (8004900 <TIM_Base_SetConfig+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a42      	ldr	r2, [pc, #264]	@ (8004904 <TIM_Base_SetConfig+0x134>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a41      	ldr	r2, [pc, #260]	@ (8004908 <TIM_Base_SetConfig+0x138>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a40      	ldr	r2, [pc, #256]	@ (800490c <TIM_Base_SetConfig+0x13c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <TIM_Base_SetConfig+0x12c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a32      	ldr	r2, [pc, #200]	@ (8004900 <TIM_Base_SetConfig+0x130>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a31      	ldr	r2, [pc, #196]	@ (8004904 <TIM_Base_SetConfig+0x134>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <TIM_Base_SetConfig+0x138>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <TIM_Base_SetConfig+0x13c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <TIM_Base_SetConfig+0x140>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2d      	ldr	r2, [pc, #180]	@ (8004914 <TIM_Base_SetConfig+0x144>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	@ (8004918 <TIM_Base_SetConfig+0x148>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_Base_SetConfig+0x12c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <TIM_Base_SetConfig+0x13c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <TIM_Base_SetConfig+0x140>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <TIM_Base_SetConfig+0x144>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	@ (8004918 <TIM_Base_SetConfig+0x148>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d105      	bne.n	80048ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]
  }
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 0201 	bic.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0302 	bic.w	r3, r3, #2
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2c      	ldr	r2, [pc, #176]	@ (8004a28 <TIM_OC1_SetConfig+0x10c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00f      	beq.n	800499c <TIM_OC1_SetConfig+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a2c <TIM_OC1_SetConfig+0x110>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_OC1_SetConfig+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2a      	ldr	r2, [pc, #168]	@ (8004a30 <TIM_OC1_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_OC1_SetConfig+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a29      	ldr	r2, [pc, #164]	@ (8004a34 <TIM_OC1_SetConfig+0x118>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_OC1_SetConfig+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a28      	ldr	r2, [pc, #160]	@ (8004a38 <TIM_OC1_SetConfig+0x11c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0308 	bic.w	r3, r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 0304 	bic.w	r3, r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <TIM_OC1_SetConfig+0x10c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_OC1_SetConfig+0xc2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a2c <TIM_OC1_SetConfig+0x110>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_OC1_SetConfig+0xc2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <TIM_OC1_SetConfig+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_OC1_SetConfig+0xc2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <TIM_OC1_SetConfig+0x118>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC1_SetConfig+0xc2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <TIM_OC1_SetConfig+0x11c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40013400 	.word	0x40013400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40014400 	.word	0x40014400
 8004a38:	40014800 	.word	0x40014800

08004a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f023 0210 	bic.w	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a28      	ldr	r2, [pc, #160]	@ (8004b3c <TIM_OC2_SetConfig+0x100>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_OC2_SetConfig+0x6c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a27      	ldr	r2, [pc, #156]	@ (8004b40 <TIM_OC2_SetConfig+0x104>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10d      	bne.n	8004ac4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <TIM_OC2_SetConfig+0x100>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <TIM_OC2_SetConfig+0xb0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <TIM_OC2_SetConfig+0x104>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_OC2_SetConfig+0xb0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <TIM_OC2_SetConfig+0x108>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_OC2_SetConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	@ (8004b48 <TIM_OC2_SetConfig+0x10c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC2_SetConfig+0xb0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <TIM_OC2_SetConfig+0x110>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d113      	bne.n	8004b14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a27      	ldr	r2, [pc, #156]	@ (8004c4c <TIM_OC3_SetConfig+0xfc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC3_SetConfig+0x6a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a26      	ldr	r2, [pc, #152]	@ (8004c50 <TIM_OC3_SetConfig+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10d      	bne.n	8004bd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c4c <TIM_OC3_SetConfig+0xfc>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_OC3_SetConfig+0xae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c50 <TIM_OC3_SetConfig+0x100>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_OC3_SetConfig+0xae>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c54 <TIM_OC3_SetConfig+0x104>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_OC3_SetConfig+0xae>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <TIM_OC3_SetConfig+0x108>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0xae>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a18      	ldr	r2, [pc, #96]	@ (8004c5c <TIM_OC3_SetConfig+0x10c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d113      	bne.n	8004c26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	@ (8004d20 <TIM_OC4_SetConfig+0xc0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_OC4_SetConfig+0x84>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <TIM_OC4_SetConfig+0xc4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_OC4_SetConfig+0x84>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <TIM_OC4_SetConfig+0xc8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_OC4_SetConfig+0x84>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <TIM_OC4_SetConfig+0xcc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC4_SetConfig+0x84>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a14      	ldr	r2, [pc, #80]	@ (8004d30 <TIM_OC4_SetConfig+0xd0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d109      	bne.n	8004cf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	019b      	lsls	r3, r3, #6
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a17      	ldr	r2, [pc, #92]	@ (8004de8 <TIM_OC5_SetConfig+0xb4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_OC5_SetConfig+0x7a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <TIM_OC5_SetConfig+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_OC5_SetConfig+0x7a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <TIM_OC5_SetConfig+0xbc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_OC5_SetConfig+0x7a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a14      	ldr	r2, [pc, #80]	@ (8004df4 <TIM_OC5_SetConfig+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_OC5_SetConfig+0x7a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a13      	ldr	r2, [pc, #76]	@ (8004df8 <TIM_OC5_SetConfig+0xc4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d109      	bne.n	8004dc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	051b      	lsls	r3, r3, #20
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a18      	ldr	r2, [pc, #96]	@ (8004eb4 <TIM_OC6_SetConfig+0xb8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <TIM_OC6_SetConfig+0x7c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	@ (8004eb8 <TIM_OC6_SetConfig+0xbc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <TIM_OC6_SetConfig+0x7c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <TIM_OC6_SetConfig+0xc0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <TIM_OC6_SetConfig+0x7c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <TIM_OC6_SetConfig+0xc4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_OC6_SetConfig+0x7c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <TIM_OC6_SetConfig+0xc8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d109      	bne.n	8004e8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2201      	movs	r2, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	fa01 f303 	lsl.w	r3, r1, r3
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e068      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2e      	ldr	r2, [pc, #184]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40000400 	.word	0x40000400
 8005018:	40000800 	.word	0x40000800
 800501c:	40000c00 	.word	0x40000c00
 8005020:	40014000 	.word	0x40014000

08005024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e040      	b.n	80050b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc f928 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	@ 0x24
 8005050:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fae0 	bl	8005630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f825 	bl	80050c0 <UART_SetConfig>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e01b      	b.n	80050b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb5f 	bl	8005774 <UART_CheckIdleState>
 80050b6:	4603      	mov	r3, r0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c4:	b08a      	sub	sp, #40	@ 0x28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4ba4      	ldr	r3, [pc, #656]	@ (8005380 <UART_SetConfig+0x2c0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a99      	ldr	r2, [pc, #612]	@ (8005384 <UART_SetConfig+0x2c4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005128:	4313      	orrs	r3, r2
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a90      	ldr	r2, [pc, #576]	@ (8005388 <UART_SetConfig+0x2c8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d126      	bne.n	8005198 <UART_SetConfig+0xd8>
 800514a:	4b90      	ldr	r3, [pc, #576]	@ (800538c <UART_SetConfig+0x2cc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b03      	cmp	r3, #3
 8005156:	d81b      	bhi.n	8005190 <UART_SetConfig+0xd0>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0xa0>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005171 	.word	0x08005171
 8005164:	08005181 	.word	0x08005181
 8005168:	08005179 	.word	0x08005179
 800516c:	08005189 	.word	0x08005189
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005176:	e116      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517e:	e112      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e10e      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518e:	e10a      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005196:	e106      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a7c      	ldr	r2, [pc, #496]	@ (8005390 <UART_SetConfig+0x2d0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d138      	bne.n	8005214 <UART_SetConfig+0x154>
 80051a2:	4b7a      	ldr	r3, [pc, #488]	@ (800538c <UART_SetConfig+0x2cc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d82d      	bhi.n	800520c <UART_SetConfig+0x14c>
 80051b0:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <UART_SetConfig+0xf8>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	0800520d 	.word	0x0800520d
 80051c4:	0800520d 	.word	0x0800520d
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	0800520d 	.word	0x0800520d
 80051d0:	0800520d 	.word	0x0800520d
 80051d4:	0800520d 	.word	0x0800520d
 80051d8:	080051f5 	.word	0x080051f5
 80051dc:	0800520d 	.word	0x0800520d
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005205 	.word	0x08005205
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f2:	e0d8      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80051f4:	2302      	movs	r3, #2
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fa:	e0d4      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005202:	e0d0      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520a:	e0cc      	b.n	80053a6 <UART_SetConfig+0x2e6>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005212:	e0c8      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5e      	ldr	r2, [pc, #376]	@ (8005394 <UART_SetConfig+0x2d4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d125      	bne.n	800526a <UART_SetConfig+0x1aa>
 800521e:	4b5b      	ldr	r3, [pc, #364]	@ (800538c <UART_SetConfig+0x2cc>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005224:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005228:	2b30      	cmp	r3, #48	@ 0x30
 800522a:	d016      	beq.n	800525a <UART_SetConfig+0x19a>
 800522c:	2b30      	cmp	r3, #48	@ 0x30
 800522e:	d818      	bhi.n	8005262 <UART_SetConfig+0x1a2>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d00a      	beq.n	800524a <UART_SetConfig+0x18a>
 8005234:	2b20      	cmp	r3, #32
 8005236:	d814      	bhi.n	8005262 <UART_SetConfig+0x1a2>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <UART_SetConfig+0x182>
 800523c:	2b10      	cmp	r3, #16
 800523e:	d008      	beq.n	8005252 <UART_SetConfig+0x192>
 8005240:	e00f      	b.n	8005262 <UART_SetConfig+0x1a2>
 8005242:	2300      	movs	r3, #0
 8005244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005248:	e0ad      	b.n	80053a6 <UART_SetConfig+0x2e6>
 800524a:	2302      	movs	r3, #2
 800524c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005250:	e0a9      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005252:	2304      	movs	r3, #4
 8005254:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005258:	e0a5      	b.n	80053a6 <UART_SetConfig+0x2e6>
 800525a:	2308      	movs	r3, #8
 800525c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005260:	e0a1      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005262:	2310      	movs	r3, #16
 8005264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005268:	e09d      	b.n	80053a6 <UART_SetConfig+0x2e6>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4a      	ldr	r2, [pc, #296]	@ (8005398 <UART_SetConfig+0x2d8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d125      	bne.n	80052c0 <UART_SetConfig+0x200>
 8005274:	4b45      	ldr	r3, [pc, #276]	@ (800538c <UART_SetConfig+0x2cc>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800527e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005280:	d016      	beq.n	80052b0 <UART_SetConfig+0x1f0>
 8005282:	2bc0      	cmp	r3, #192	@ 0xc0
 8005284:	d818      	bhi.n	80052b8 <UART_SetConfig+0x1f8>
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d00a      	beq.n	80052a0 <UART_SetConfig+0x1e0>
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d814      	bhi.n	80052b8 <UART_SetConfig+0x1f8>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <UART_SetConfig+0x1d8>
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d008      	beq.n	80052a8 <UART_SetConfig+0x1e8>
 8005296:	e00f      	b.n	80052b8 <UART_SetConfig+0x1f8>
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529e:	e082      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80052a0:	2302      	movs	r3, #2
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a6:	e07e      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ae:	e07a      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b6:	e076      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052be:	e072      	b.n	80053a6 <UART_SetConfig+0x2e6>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a35      	ldr	r2, [pc, #212]	@ (800539c <UART_SetConfig+0x2dc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d12a      	bne.n	8005320 <UART_SetConfig+0x260>
 80052ca:	4b30      	ldr	r3, [pc, #192]	@ (800538c <UART_SetConfig+0x2cc>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052d8:	d01a      	beq.n	8005310 <UART_SetConfig+0x250>
 80052da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052de:	d81b      	bhi.n	8005318 <UART_SetConfig+0x258>
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e4:	d00c      	beq.n	8005300 <UART_SetConfig+0x240>
 80052e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ea:	d815      	bhi.n	8005318 <UART_SetConfig+0x258>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <UART_SetConfig+0x238>
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f4:	d008      	beq.n	8005308 <UART_SetConfig+0x248>
 80052f6:	e00f      	b.n	8005318 <UART_SetConfig+0x258>
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fe:	e052      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005300:	2302      	movs	r3, #2
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005306:	e04e      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530e:	e04a      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005316:	e046      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531e:	e042      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a17      	ldr	r2, [pc, #92]	@ (8005384 <UART_SetConfig+0x2c4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d13a      	bne.n	80053a0 <UART_SetConfig+0x2e0>
 800532a:	4b18      	ldr	r3, [pc, #96]	@ (800538c <UART_SetConfig+0x2cc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005338:	d01a      	beq.n	8005370 <UART_SetConfig+0x2b0>
 800533a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800533e:	d81b      	bhi.n	8005378 <UART_SetConfig+0x2b8>
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005344:	d00c      	beq.n	8005360 <UART_SetConfig+0x2a0>
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800534a:	d815      	bhi.n	8005378 <UART_SetConfig+0x2b8>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <UART_SetConfig+0x298>
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005354:	d008      	beq.n	8005368 <UART_SetConfig+0x2a8>
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x2b8>
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535e:	e022      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005360:	2302      	movs	r3, #2
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005366:	e01e      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536e:	e01a      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005376:	e016      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800537e:	e012      	b.n	80053a6 <UART_SetConfig+0x2e6>
 8005380:	efff69f3 	.word	0xefff69f3
 8005384:	40008000 	.word	0x40008000
 8005388:	40013800 	.word	0x40013800
 800538c:	40021000 	.word	0x40021000
 8005390:	40004400 	.word	0x40004400
 8005394:	40004800 	.word	0x40004800
 8005398:	40004c00 	.word	0x40004c00
 800539c:	40005000 	.word	0x40005000
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005628 <UART_SetConfig+0x568>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d17a      	bne.n	80054a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d824      	bhi.n	8005402 <UART_SetConfig+0x342>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <UART_SetConfig+0x300>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	08005403 	.word	0x08005403
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005403 	.word	0x08005403
 80053d0:	080053f3 	.word	0x080053f3
 80053d4:	08005403 	.word	0x08005403
 80053d8:	08005403 	.word	0x08005403
 80053dc:	08005403 	.word	0x08005403
 80053e0:	080053fb 	.word	0x080053fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e4:	f7fd fede 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80053e8:	61f8      	str	r0, [r7, #28]
        break;
 80053ea:	e010      	b.n	800540e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b8f      	ldr	r3, [pc, #572]	@ (800562c <UART_SetConfig+0x56c>)
 80053ee:	61fb      	str	r3, [r7, #28]
        break;
 80053f0:	e00d      	b.n	800540e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fd fe41 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80053f6:	61f8      	str	r0, [r7, #28]
        break;
 80053f8:	e009      	b.n	800540e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053fe:	61fb      	str	r3, [r7, #28]
        break;
 8005400:	e005      	b.n	800540e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800540c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80fb 	beq.w	800560c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4413      	add	r3, r2
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	429a      	cmp	r2, r3
 8005424:	d305      	bcc.n	8005432 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	429a      	cmp	r2, r3
 8005430:	d903      	bls.n	800543a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005438:	e0e8      	b.n	800560c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2200      	movs	r2, #0
 800543e:	461c      	mov	r4, r3
 8005440:	4615      	mov	r5, r2
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	022b      	lsls	r3, r5, #8
 800544c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005450:	0222      	lsls	r2, r4, #8
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	6849      	ldr	r1, [r1, #4]
 8005456:	0849      	lsrs	r1, r1, #1
 8005458:	2000      	movs	r0, #0
 800545a:	4688      	mov	r8, r1
 800545c:	4681      	mov	r9, r0
 800545e:	eb12 0a08 	adds.w	sl, r2, r8
 8005462:	eb43 0b09 	adc.w	fp, r3, r9
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005474:	4650      	mov	r0, sl
 8005476:	4659      	mov	r1, fp
 8005478:	f7fa ff02 	bl	8000280 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4613      	mov	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800548a:	d308      	bcc.n	800549e <UART_SetConfig+0x3de>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005492:	d204      	bcs.n	800549e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	e0b6      	b.n	800560c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054a4:	e0b2      	b.n	800560c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ae:	d15e      	bne.n	800556e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d828      	bhi.n	800550a <UART_SetConfig+0x44a>
 80054b8:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x400>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	0800550b 	.word	0x0800550b
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fd fe5e 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80054e8:	61f8      	str	r0, [r7, #28]
        break;
 80054ea:	e014      	b.n	8005516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7fd fe70 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80054f0:	61f8      	str	r0, [r7, #28]
        break;
 80054f2:	e010      	b.n	8005516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b4d      	ldr	r3, [pc, #308]	@ (800562c <UART_SetConfig+0x56c>)
 80054f6:	61fb      	str	r3, [r7, #28]
        break;
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fd fdbd 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80054fe:	61f8      	str	r0, [r7, #28]
        break;
 8005500:	e009      	b.n	8005516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005506:	61fb      	str	r3, [r7, #28]
        break;
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d077      	beq.n	800560c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005a      	lsls	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	441a      	add	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d916      	bls.n	8005566 <UART_SetConfig+0x4a6>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553e:	d212      	bcs.n	8005566 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f023 030f 	bic.w	r3, r3, #15
 8005548:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	b29a      	uxth	r2, r3
 8005556:	8afb      	ldrh	r3, [r7, #22]
 8005558:	4313      	orrs	r3, r2
 800555a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	8afa      	ldrh	r2, [r7, #22]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	e052      	b.n	800560c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800556c:	e04e      	b.n	800560c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800556e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005572:	2b08      	cmp	r3, #8
 8005574:	d827      	bhi.n	80055c6 <UART_SetConfig+0x506>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0x4bc>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055b1 	.word	0x080055b1
 8005588:	080055c7 	.word	0x080055c7
 800558c:	080055b7 	.word	0x080055b7
 8005590:	080055c7 	.word	0x080055c7
 8005594:	080055c7 	.word	0x080055c7
 8005598:	080055c7 	.word	0x080055c7
 800559c:	080055bf 	.word	0x080055bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7fd fe00 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80055a4:	61f8      	str	r0, [r7, #28]
        break;
 80055a6:	e014      	b.n	80055d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a8:	f7fd fe12 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80055ac:	61f8      	str	r0, [r7, #28]
        break;
 80055ae:	e010      	b.n	80055d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b0:	4b1e      	ldr	r3, [pc, #120]	@ (800562c <UART_SetConfig+0x56c>)
 80055b2:	61fb      	str	r3, [r7, #28]
        break;
 80055b4:	e00d      	b.n	80055d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b6:	f7fd fd5f 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80055ba:	61f8      	str	r0, [r7, #28]
        break;
 80055bc:	e009      	b.n	80055d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c2:	61fb      	str	r3, [r7, #28]
        break;
 80055c4:	e005      	b.n	80055d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055d0:	bf00      	nop
    }

    if (pclk != 0U)
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d019      	beq.n	800560c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	085a      	lsrs	r2, r3, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b0f      	cmp	r3, #15
 80055f0:	d909      	bls.n	8005606 <UART_SetConfig+0x546>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f8:	d205      	bcs.n	8005606 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	e002      	b.n	800560c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005618:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800561c:	4618      	mov	r0, r3
 800561e:	3728      	adds	r7, #40	@ 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005626:	bf00      	nop
 8005628:	40008000 	.word	0x40008000
 800562c:	00f42400 	.word	0x00f42400

08005630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01a      	beq.n	8005746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800572e:	d10a      	bne.n	8005746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b098      	sub	sp, #96	@ 0x60
 8005778:	af02      	add	r7, sp, #8
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005784:	f7fc fa3c 	bl	8001c00 <HAL_GetTick>
 8005788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b08      	cmp	r3, #8
 8005796:	d12e      	bne.n	80057f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f88c 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d021      	beq.n	80057f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e062      	b.n	80058bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d149      	bne.n	8005898 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f856 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03c      	beq.n	8005898 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	623b      	str	r3, [r7, #32]
   return(result);
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583c:	633b      	str	r3, [r7, #48]	@ 0x30
 800583e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3308      	adds	r3, #8
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005870:	61fa      	str	r2, [r7, #28]
 8005872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	617b      	str	r3, [r7, #20]
   return(result);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e011      	b.n	80058bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3758      	adds	r7, #88	@ 0x58
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	e04f      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d04b      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058de:	f7fc f98f 	bl	8001c00 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d302      	bcc.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e04e      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d037      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b80      	cmp	r3, #128	@ 0x80
 800590a:	d034      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b40      	cmp	r3, #64	@ 0x40
 8005910:	d031      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d110      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2208      	movs	r2, #8
 8005926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f838 	bl	800599e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2208      	movs	r2, #8
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e029      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005950:	d111      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800595a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f81e 	bl	800599e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00f      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69da      	ldr	r2, [r3, #28]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0a0      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b095      	sub	sp, #84	@ 0x54
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d118      	bne.n	8005a46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0310 	bic.w	r3, r3, #16
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a5a:	bf00      	nop
 8005a5c:	3754      	adds	r7, #84	@ 0x54
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <siprintf>:
 8005a68:	b40e      	push	{r1, r2, r3}
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	b09d      	sub	sp, #116	@ 0x74
 8005a6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a70:	9002      	str	r0, [sp, #8]
 8005a72:	9006      	str	r0, [sp, #24]
 8005a74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a78:	480a      	ldr	r0, [pc, #40]	@ (8005aa4 <siprintf+0x3c>)
 8005a7a:	9107      	str	r1, [sp, #28]
 8005a7c:	9104      	str	r1, [sp, #16]
 8005a7e:	490a      	ldr	r1, [pc, #40]	@ (8005aa8 <siprintf+0x40>)
 8005a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a84:	9105      	str	r1, [sp, #20]
 8005a86:	2400      	movs	r4, #0
 8005a88:	a902      	add	r1, sp, #8
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a90:	f000 f9a2 	bl	8005dd8 <_svfiprintf_r>
 8005a94:	9b02      	ldr	r3, [sp, #8]
 8005a96:	701c      	strb	r4, [r3, #0]
 8005a98:	b01d      	add	sp, #116	@ 0x74
 8005a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9e:	b003      	add	sp, #12
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000030 	.word	0x20000030
 8005aa8:	ffff0208 	.word	0xffff0208

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <__errno>:
 8005abc:	4b01      	ldr	r3, [pc, #4]	@ (8005ac4 <__errno+0x8>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000030 	.word	0x20000030

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	@ (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	@ (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 fc64 	bl	80063a8 <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	0802ffec 	.word	0x0802ffec
 8005b04:	0802ffec 	.word	0x0802ffec
 8005b08:	0802ffec 	.word	0x0802ffec
 8005b0c:	0802fff0 	.word	0x0802fff0

08005b10 <__retarget_lock_acquire_recursive>:
 8005b10:	4770      	bx	lr

08005b12 <__retarget_lock_release_recursive>:
 8005b12:	4770      	bx	lr

08005b14 <memcpy>:
 8005b14:	440a      	add	r2, r1
 8005b16:	4291      	cmp	r1, r2
 8005b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b1c:	d100      	bne.n	8005b20 <memcpy+0xc>
 8005b1e:	4770      	bx	lr
 8005b20:	b510      	push	{r4, lr}
 8005b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	d1f9      	bne.n	8005b22 <memcpy+0xe>
 8005b2e:	bd10      	pop	{r4, pc}

08005b30 <_free_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4605      	mov	r5, r0
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d041      	beq.n	8005bbc <_free_r+0x8c>
 8005b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3c:	1f0c      	subs	r4, r1, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfb8      	it	lt
 8005b42:	18e4      	addlt	r4, r4, r3
 8005b44:	f000 f8e0 	bl	8005d08 <__malloc_lock>
 8005b48:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <_free_r+0x90>)
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x2c>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	4628      	mov	r0, r5
 8005b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b58:	f000 b8dc 	b.w	8005d14 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x42>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	1821      	adds	r1, r4, r0
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x1e>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x4c>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x42>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1850      	adds	r0, r2, r1
 8005b80:	42a0      	cmp	r0, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x6c>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	4401      	add	r1, r0
 8005b88:	1850      	adds	r0, r2, r1
 8005b8a:	4283      	cmp	r3, r0
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x22>
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	4408      	add	r0, r1
 8005b98:	6010      	str	r0, [r2, #0]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x22>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x74>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x22>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf04      	itt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	bf04      	itt	eq
 8005bb4:	1809      	addeq	r1, r1, r0
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	6054      	str	r4, [r2, #4]
 8005bba:	e7ca      	b.n	8005b52 <_free_r+0x22>
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20008298 	.word	0x20008298

08005bc4 <sbrk_aligned>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8005c04 <sbrk_aligned+0x40>)
 8005bc8:	460c      	mov	r4, r1
 8005bca:	6831      	ldr	r1, [r6, #0]
 8005bcc:	4605      	mov	r5, r0
 8005bce:	b911      	cbnz	r1, 8005bd6 <sbrk_aligned+0x12>
 8005bd0:	f000 fba4 	bl	800631c <_sbrk_r>
 8005bd4:	6030      	str	r0, [r6, #0]
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 fb9f 	bl	800631c <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d103      	bne.n	8005bea <sbrk_aligned+0x26>
 8005be2:	f04f 34ff 	mov.w	r4, #4294967295
 8005be6:	4620      	mov	r0, r4
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	1cc4      	adds	r4, r0, #3
 8005bec:	f024 0403 	bic.w	r4, r4, #3
 8005bf0:	42a0      	cmp	r0, r4
 8005bf2:	d0f8      	beq.n	8005be6 <sbrk_aligned+0x22>
 8005bf4:	1a21      	subs	r1, r4, r0
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 fb90 	bl	800631c <_sbrk_r>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d1f2      	bne.n	8005be6 <sbrk_aligned+0x22>
 8005c00:	e7ef      	b.n	8005be2 <sbrk_aligned+0x1e>
 8005c02:	bf00      	nop
 8005c04:	20008294 	.word	0x20008294

08005c08 <_malloc_r>:
 8005c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0c:	1ccd      	adds	r5, r1, #3
 8005c0e:	f025 0503 	bic.w	r5, r5, #3
 8005c12:	3508      	adds	r5, #8
 8005c14:	2d0c      	cmp	r5, #12
 8005c16:	bf38      	it	cc
 8005c18:	250c      	movcc	r5, #12
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	db01      	blt.n	8005c24 <_malloc_r+0x1c>
 8005c20:	42a9      	cmp	r1, r5
 8005c22:	d904      	bls.n	8005c2e <_malloc_r+0x26>
 8005c24:	230c      	movs	r3, #12
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d04 <_malloc_r+0xfc>
 8005c32:	f000 f869 	bl	8005d08 <__malloc_lock>
 8005c36:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3a:	461c      	mov	r4, r3
 8005c3c:	bb44      	cbnz	r4, 8005c90 <_malloc_r+0x88>
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7ff ffbf 	bl	8005bc4 <sbrk_aligned>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	4604      	mov	r4, r0
 8005c4a:	d158      	bne.n	8005cfe <_malloc_r+0xf6>
 8005c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c50:	4627      	mov	r7, r4
 8005c52:	2f00      	cmp	r7, #0
 8005c54:	d143      	bne.n	8005cde <_malloc_r+0xd6>
 8005c56:	2c00      	cmp	r4, #0
 8005c58:	d04b      	beq.n	8005cf2 <_malloc_r+0xea>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	eb04 0903 	add.w	r9, r4, r3
 8005c64:	f000 fb5a 	bl	800631c <_sbrk_r>
 8005c68:	4581      	cmp	r9, r0
 8005c6a:	d142      	bne.n	8005cf2 <_malloc_r+0xea>
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	1a6d      	subs	r5, r5, r1
 8005c70:	4629      	mov	r1, r5
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7ff ffa6 	bl	8005bc4 <sbrk_aligned>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d03a      	beq.n	8005cf2 <_malloc_r+0xea>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	442b      	add	r3, r5
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	f8d8 3000 	ldr.w	r3, [r8]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	bb62      	cbnz	r2, 8005ce4 <_malloc_r+0xdc>
 8005c8a:	f8c8 7000 	str.w	r7, [r8]
 8005c8e:	e00f      	b.n	8005cb0 <_malloc_r+0xa8>
 8005c90:	6822      	ldr	r2, [r4, #0]
 8005c92:	1b52      	subs	r2, r2, r5
 8005c94:	d420      	bmi.n	8005cd8 <_malloc_r+0xd0>
 8005c96:	2a0b      	cmp	r2, #11
 8005c98:	d917      	bls.n	8005cca <_malloc_r+0xc2>
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	6025      	str	r5, [r4, #0]
 8005ca0:	bf18      	it	ne
 8005ca2:	6059      	strne	r1, [r3, #4]
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	bf08      	it	eq
 8005ca8:	f8c8 1000 	streq.w	r1, [r8]
 8005cac:	5162      	str	r2, [r4, r5]
 8005cae:	604b      	str	r3, [r1, #4]
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 f82f 	bl	8005d14 <__malloc_unlock>
 8005cb6:	f104 000b 	add.w	r0, r4, #11
 8005cba:	1d23      	adds	r3, r4, #4
 8005cbc:	f020 0007 	bic.w	r0, r0, #7
 8005cc0:	1ac2      	subs	r2, r0, r3
 8005cc2:	bf1c      	itt	ne
 8005cc4:	1a1b      	subne	r3, r3, r0
 8005cc6:	50a3      	strne	r3, [r4, r2]
 8005cc8:	e7af      	b.n	8005c2a <_malloc_r+0x22>
 8005cca:	6862      	ldr	r2, [r4, #4]
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	bf0c      	ite	eq
 8005cd0:	f8c8 2000 	streq.w	r2, [r8]
 8005cd4:	605a      	strne	r2, [r3, #4]
 8005cd6:	e7eb      	b.n	8005cb0 <_malloc_r+0xa8>
 8005cd8:	4623      	mov	r3, r4
 8005cda:	6864      	ldr	r4, [r4, #4]
 8005cdc:	e7ae      	b.n	8005c3c <_malloc_r+0x34>
 8005cde:	463c      	mov	r4, r7
 8005ce0:	687f      	ldr	r7, [r7, #4]
 8005ce2:	e7b6      	b.n	8005c52 <_malloc_r+0x4a>
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	d1fb      	bne.n	8005ce4 <_malloc_r+0xdc>
 8005cec:	2300      	movs	r3, #0
 8005cee:	6053      	str	r3, [r2, #4]
 8005cf0:	e7de      	b.n	8005cb0 <_malloc_r+0xa8>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 f80c 	bl	8005d14 <__malloc_unlock>
 8005cfc:	e794      	b.n	8005c28 <_malloc_r+0x20>
 8005cfe:	6005      	str	r5, [r0, #0]
 8005d00:	e7d6      	b.n	8005cb0 <_malloc_r+0xa8>
 8005d02:	bf00      	nop
 8005d04:	20008298 	.word	0x20008298

08005d08 <__malloc_lock>:
 8005d08:	4801      	ldr	r0, [pc, #4]	@ (8005d10 <__malloc_lock+0x8>)
 8005d0a:	f7ff bf01 	b.w	8005b10 <__retarget_lock_acquire_recursive>
 8005d0e:	bf00      	nop
 8005d10:	20008290 	.word	0x20008290

08005d14 <__malloc_unlock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__malloc_unlock+0x8>)
 8005d16:	f7ff befc 	b.w	8005b12 <__retarget_lock_release_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20008290 	.word	0x20008290

08005d20 <__ssputs_r>:
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	688e      	ldr	r6, [r1, #8]
 8005d26:	461f      	mov	r7, r3
 8005d28:	42be      	cmp	r6, r7
 8005d2a:	680b      	ldr	r3, [r1, #0]
 8005d2c:	4682      	mov	sl, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4690      	mov	r8, r2
 8005d32:	d82d      	bhi.n	8005d90 <__ssputs_r+0x70>
 8005d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d3c:	d026      	beq.n	8005d8c <__ssputs_r+0x6c>
 8005d3e:	6965      	ldr	r5, [r4, #20]
 8005d40:	6909      	ldr	r1, [r1, #16]
 8005d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d46:	eba3 0901 	sub.w	r9, r3, r1
 8005d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d4e:	1c7b      	adds	r3, r7, #1
 8005d50:	444b      	add	r3, r9
 8005d52:	106d      	asrs	r5, r5, #1
 8005d54:	429d      	cmp	r5, r3
 8005d56:	bf38      	it	cc
 8005d58:	461d      	movcc	r5, r3
 8005d5a:	0553      	lsls	r3, r2, #21
 8005d5c:	d527      	bpl.n	8005dae <__ssputs_r+0x8e>
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7ff ff52 	bl	8005c08 <_malloc_r>
 8005d64:	4606      	mov	r6, r0
 8005d66:	b360      	cbz	r0, 8005dc2 <__ssputs_r+0xa2>
 8005d68:	6921      	ldr	r1, [r4, #16]
 8005d6a:	464a      	mov	r2, r9
 8005d6c:	f7ff fed2 	bl	8005b14 <memcpy>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	6126      	str	r6, [r4, #16]
 8005d7e:	6165      	str	r5, [r4, #20]
 8005d80:	444e      	add	r6, r9
 8005d82:	eba5 0509 	sub.w	r5, r5, r9
 8005d86:	6026      	str	r6, [r4, #0]
 8005d88:	60a5      	str	r5, [r4, #8]
 8005d8a:	463e      	mov	r6, r7
 8005d8c:	42be      	cmp	r6, r7
 8005d8e:	d900      	bls.n	8005d92 <__ssputs_r+0x72>
 8005d90:	463e      	mov	r6, r7
 8005d92:	6820      	ldr	r0, [r4, #0]
 8005d94:	4632      	mov	r2, r6
 8005d96:	4641      	mov	r1, r8
 8005d98:	f000 faa6 	bl	80062e8 <memmove>
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	1b9b      	subs	r3, r3, r6
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	4433      	add	r3, r6
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2000      	movs	r0, #0
 8005daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dae:	462a      	mov	r2, r5
 8005db0:	f000 fac4 	bl	800633c <_realloc_r>
 8005db4:	4606      	mov	r6, r0
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d1e0      	bne.n	8005d7c <__ssputs_r+0x5c>
 8005dba:	6921      	ldr	r1, [r4, #16]
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	f7ff feb7 	bl	8005b30 <_free_r>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	f8ca 3000 	str.w	r3, [sl]
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e7e9      	b.n	8005daa <__ssputs_r+0x8a>
	...

08005dd8 <_svfiprintf_r>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	4698      	mov	r8, r3
 8005dde:	898b      	ldrh	r3, [r1, #12]
 8005de0:	061b      	lsls	r3, r3, #24
 8005de2:	b09d      	sub	sp, #116	@ 0x74
 8005de4:	4607      	mov	r7, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	d510      	bpl.n	8005e0e <_svfiprintf_r+0x36>
 8005dec:	690b      	ldr	r3, [r1, #16]
 8005dee:	b973      	cbnz	r3, 8005e0e <_svfiprintf_r+0x36>
 8005df0:	2140      	movs	r1, #64	@ 0x40
 8005df2:	f7ff ff09 	bl	8005c08 <_malloc_r>
 8005df6:	6028      	str	r0, [r5, #0]
 8005df8:	6128      	str	r0, [r5, #16]
 8005dfa:	b930      	cbnz	r0, 8005e0a <_svfiprintf_r+0x32>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b01d      	add	sp, #116	@ 0x74
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	2340      	movs	r3, #64	@ 0x40
 8005e0c:	616b      	str	r3, [r5, #20]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e12:	2320      	movs	r3, #32
 8005e14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e1c:	2330      	movs	r3, #48	@ 0x30
 8005e1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fbc <_svfiprintf_r+0x1e4>
 8005e22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e26:	f04f 0901 	mov.w	r9, #1
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	469a      	mov	sl, r3
 8005e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e32:	b10a      	cbz	r2, 8005e38 <_svfiprintf_r+0x60>
 8005e34:	2a25      	cmp	r2, #37	@ 0x25
 8005e36:	d1f9      	bne.n	8005e2c <_svfiprintf_r+0x54>
 8005e38:	ebba 0b04 	subs.w	fp, sl, r4
 8005e3c:	d00b      	beq.n	8005e56 <_svfiprintf_r+0x7e>
 8005e3e:	465b      	mov	r3, fp
 8005e40:	4622      	mov	r2, r4
 8005e42:	4629      	mov	r1, r5
 8005e44:	4638      	mov	r0, r7
 8005e46:	f7ff ff6b 	bl	8005d20 <__ssputs_r>
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f000 80a7 	beq.w	8005f9e <_svfiprintf_r+0x1c6>
 8005e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e52:	445a      	add	r2, fp
 8005e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e56:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 809f 	beq.w	8005f9e <_svfiprintf_r+0x1c6>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e6a:	f10a 0a01 	add.w	sl, sl, #1
 8005e6e:	9304      	str	r3, [sp, #16]
 8005e70:	9307      	str	r3, [sp, #28]
 8005e72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e78:	4654      	mov	r4, sl
 8005e7a:	2205      	movs	r2, #5
 8005e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e80:	484e      	ldr	r0, [pc, #312]	@ (8005fbc <_svfiprintf_r+0x1e4>)
 8005e82:	f7fa f9ad 	bl	80001e0 <memchr>
 8005e86:	9a04      	ldr	r2, [sp, #16]
 8005e88:	b9d8      	cbnz	r0, 8005ec2 <_svfiprintf_r+0xea>
 8005e8a:	06d0      	lsls	r0, r2, #27
 8005e8c:	bf44      	itt	mi
 8005e8e:	2320      	movmi	r3, #32
 8005e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e94:	0711      	lsls	r1, r2, #28
 8005e96:	bf44      	itt	mi
 8005e98:	232b      	movmi	r3, #43	@ 0x2b
 8005e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea4:	d015      	beq.n	8005ed2 <_svfiprintf_r+0xfa>
 8005ea6:	9a07      	ldr	r2, [sp, #28]
 8005ea8:	4654      	mov	r4, sl
 8005eaa:	2000      	movs	r0, #0
 8005eac:	f04f 0c0a 	mov.w	ip, #10
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eb6:	3b30      	subs	r3, #48	@ 0x30
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	d94b      	bls.n	8005f54 <_svfiprintf_r+0x17c>
 8005ebc:	b1b0      	cbz	r0, 8005eec <_svfiprintf_r+0x114>
 8005ebe:	9207      	str	r2, [sp, #28]
 8005ec0:	e014      	b.n	8005eec <_svfiprintf_r+0x114>
 8005ec2:	eba0 0308 	sub.w	r3, r0, r8
 8005ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	46a2      	mov	sl, r4
 8005ed0:	e7d2      	b.n	8005e78 <_svfiprintf_r+0xa0>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	1d19      	adds	r1, r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	9103      	str	r1, [sp, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfbb      	ittet	lt
 8005ede:	425b      	neglt	r3, r3
 8005ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ee4:	9307      	strge	r3, [sp, #28]
 8005ee6:	9307      	strlt	r3, [sp, #28]
 8005ee8:	bfb8      	it	lt
 8005eea:	9204      	strlt	r2, [sp, #16]
 8005eec:	7823      	ldrb	r3, [r4, #0]
 8005eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ef0:	d10a      	bne.n	8005f08 <_svfiprintf_r+0x130>
 8005ef2:	7863      	ldrb	r3, [r4, #1]
 8005ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef6:	d132      	bne.n	8005f5e <_svfiprintf_r+0x186>
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	9203      	str	r2, [sp, #12]
 8005f00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f04:	3402      	adds	r4, #2
 8005f06:	9305      	str	r3, [sp, #20]
 8005f08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fcc <_svfiprintf_r+0x1f4>
 8005f0c:	7821      	ldrb	r1, [r4, #0]
 8005f0e:	2203      	movs	r2, #3
 8005f10:	4650      	mov	r0, sl
 8005f12:	f7fa f965 	bl	80001e0 <memchr>
 8005f16:	b138      	cbz	r0, 8005f28 <_svfiprintf_r+0x150>
 8005f18:	9b04      	ldr	r3, [sp, #16]
 8005f1a:	eba0 000a 	sub.w	r0, r0, sl
 8005f1e:	2240      	movs	r2, #64	@ 0x40
 8005f20:	4082      	lsls	r2, r0
 8005f22:	4313      	orrs	r3, r2
 8005f24:	3401      	adds	r4, #1
 8005f26:	9304      	str	r3, [sp, #16]
 8005f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2c:	4824      	ldr	r0, [pc, #144]	@ (8005fc0 <_svfiprintf_r+0x1e8>)
 8005f2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f32:	2206      	movs	r2, #6
 8005f34:	f7fa f954 	bl	80001e0 <memchr>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d036      	beq.n	8005faa <_svfiprintf_r+0x1d2>
 8005f3c:	4b21      	ldr	r3, [pc, #132]	@ (8005fc4 <_svfiprintf_r+0x1ec>)
 8005f3e:	bb1b      	cbnz	r3, 8005f88 <_svfiprintf_r+0x1b0>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	3307      	adds	r3, #7
 8005f44:	f023 0307 	bic.w	r3, r3, #7
 8005f48:	3308      	adds	r3, #8
 8005f4a:	9303      	str	r3, [sp, #12]
 8005f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4e:	4433      	add	r3, r6
 8005f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f52:	e76a      	b.n	8005e2a <_svfiprintf_r+0x52>
 8005f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f58:	460c      	mov	r4, r1
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e7a8      	b.n	8005eb0 <_svfiprintf_r+0xd8>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	3401      	adds	r4, #1
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f04f 0c0a 	mov.w	ip, #10
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f70:	3a30      	subs	r2, #48	@ 0x30
 8005f72:	2a09      	cmp	r2, #9
 8005f74:	d903      	bls.n	8005f7e <_svfiprintf_r+0x1a6>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0c6      	beq.n	8005f08 <_svfiprintf_r+0x130>
 8005f7a:	9105      	str	r1, [sp, #20]
 8005f7c:	e7c4      	b.n	8005f08 <_svfiprintf_r+0x130>
 8005f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f82:	4604      	mov	r4, r0
 8005f84:	2301      	movs	r3, #1
 8005f86:	e7f0      	b.n	8005f6a <_svfiprintf_r+0x192>
 8005f88:	ab03      	add	r3, sp, #12
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <_svfiprintf_r+0x1f0>)
 8005f90:	a904      	add	r1, sp, #16
 8005f92:	4638      	mov	r0, r7
 8005f94:	f3af 8000 	nop.w
 8005f98:	1c42      	adds	r2, r0, #1
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	d1d6      	bne.n	8005f4c <_svfiprintf_r+0x174>
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	065b      	lsls	r3, r3, #25
 8005fa2:	f53f af2d 	bmi.w	8005e00 <_svfiprintf_r+0x28>
 8005fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fa8:	e72c      	b.n	8005e04 <_svfiprintf_r+0x2c>
 8005faa:	ab03      	add	r3, sp, #12
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <_svfiprintf_r+0x1f0>)
 8005fb2:	a904      	add	r1, sp, #16
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f000 f879 	bl	80060ac <_printf_i>
 8005fba:	e7ed      	b.n	8005f98 <_svfiprintf_r+0x1c0>
 8005fbc:	0802ffb0 	.word	0x0802ffb0
 8005fc0:	0802ffba 	.word	0x0802ffba
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	08005d21 	.word	0x08005d21
 8005fcc:	0802ffb6 	.word	0x0802ffb6

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	3b00      	subs	r3, #0
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800602c:	4641      	mov	r1, r8
 800602e:	4638      	mov	r0, r7
 8006030:	47c8      	blx	r9
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6922      	ldr	r2, [r4, #16]
 800603a:	f003 0306 	and.w	r3, r3, #6
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf02      	ittt	eq
 8006042:	68e5      	ldreq	r5, [r4, #12]
 8006044:	6833      	ldreq	r3, [r6, #0]
 8006046:	1aed      	subeq	r5, r5, r3
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4641      	mov	r1, r8
 800606c:	4638      	mov	r0, r7
 800606e:	47c8      	blx	r9
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	@ 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4641      	mov	r1, r8
 800609e:	4638      	mov	r0, r7
 80060a0:	47c8      	blx	r9
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b4:	2f78      	cmp	r7, #120	@ 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	@ 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d1 	beq.w	8006270 <_printf_i+0x1c4>
 80060ce:	2f58      	cmp	r7, #88	@ 0x58
 80060d0:	f000 80b8 	beq.w	8006244 <_printf_i+0x198>
 80060d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	@ (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006257 	.word	0x08006257
 800611c:	08006183 	.word	0x08006183
 8006120:	08006211 	.word	0x08006211
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	08006279 	.word	0x08006279
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006183 	.word	0x08006183
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	08006219 	.word	0x08006219
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6032      	str	r2, [r6, #0]
 800614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e09c      	b.n	8006292 <_printf_i+0x1e6>
 8006158:	6833      	ldr	r3, [r6, #0]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	1d19      	adds	r1, r3, #4
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	0606      	lsls	r6, r0, #24
 8006162:	d501      	bpl.n	8006168 <_printf_i+0xbc>
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	e003      	b.n	8006170 <_printf_i+0xc4>
 8006168:	0645      	lsls	r5, r0, #25
 800616a:	d5fb      	bpl.n	8006164 <_printf_i+0xb8>
 800616c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006170:	2d00      	cmp	r5, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0xd0>
 8006174:	232d      	movs	r3, #45	@ 0x2d
 8006176:	426d      	negs	r5, r5
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617c:	4858      	ldr	r0, [pc, #352]	@ (80062e0 <_printf_i+0x234>)
 800617e:	230a      	movs	r3, #10
 8006180:	e011      	b.n	80061a6 <_printf_i+0xfa>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	0608      	lsls	r0, r1, #24
 8006188:	f853 5b04 	ldr.w	r5, [r3], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0xe8>
 800618e:	0649      	lsls	r1, r1, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	2f6f      	cmp	r7, #111	@ 0x6f
 8006196:	4852      	ldr	r0, [pc, #328]	@ (80062e0 <_printf_i+0x234>)
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	bf14      	ite	ne
 800619c:	230a      	movne	r3, #10
 800619e:	2308      	moveq	r3, #8
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061a6:	6866      	ldr	r6, [r4, #4]
 80061a8:	60a6      	str	r6, [r4, #8]
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	db05      	blt.n	80061ba <_printf_i+0x10e>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	432e      	orrs	r6, r5
 80061b2:	f021 0104 	bic.w	r1, r1, #4
 80061b6:	6021      	str	r1, [r4, #0]
 80061b8:	d04b      	beq.n	8006252 <_printf_i+0x1a6>
 80061ba:	4616      	mov	r6, r2
 80061bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c0:	fb03 5711 	mls	r7, r3, r1, r5
 80061c4:	5dc7      	ldrb	r7, [r0, r7]
 80061c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ca:	462f      	mov	r7, r5
 80061cc:	42bb      	cmp	r3, r7
 80061ce:	460d      	mov	r5, r1
 80061d0:	d9f4      	bls.n	80061bc <_printf_i+0x110>
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d10b      	bne.n	80061ee <_printf_i+0x142>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	07df      	lsls	r7, r3, #31
 80061da:	d508      	bpl.n	80061ee <_printf_i+0x142>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	6861      	ldr	r1, [r4, #4]
 80061e0:	4299      	cmp	r1, r3
 80061e2:	bfde      	ittt	le
 80061e4:	2330      	movle	r3, #48	@ 0x30
 80061e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ee:	1b92      	subs	r2, r2, r6
 80061f0:	6122      	str	r2, [r4, #16]
 80061f2:	f8cd a000 	str.w	sl, [sp]
 80061f6:	464b      	mov	r3, r9
 80061f8:	aa03      	add	r2, sp, #12
 80061fa:	4621      	mov	r1, r4
 80061fc:	4640      	mov	r0, r8
 80061fe:	f7ff fee7 	bl	8005fd0 <_printf_common>
 8006202:	3001      	adds	r0, #1
 8006204:	d14a      	bne.n	800629c <_printf_i+0x1f0>
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f043 0320 	orr.w	r3, r3, #32
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	4832      	ldr	r0, [pc, #200]	@ (80062e4 <_printf_i+0x238>)
 800621a:	2778      	movs	r7, #120	@ 0x78
 800621c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	6831      	ldr	r1, [r6, #0]
 8006224:	061f      	lsls	r7, r3, #24
 8006226:	f851 5b04 	ldr.w	r5, [r1], #4
 800622a:	d402      	bmi.n	8006232 <_printf_i+0x186>
 800622c:	065f      	lsls	r7, r3, #25
 800622e:	bf48      	it	mi
 8006230:	b2ad      	uxthmi	r5, r5
 8006232:	6031      	str	r1, [r6, #0]
 8006234:	07d9      	lsls	r1, r3, #31
 8006236:	bf44      	itt	mi
 8006238:	f043 0320 	orrmi.w	r3, r3, #32
 800623c:	6023      	strmi	r3, [r4, #0]
 800623e:	b11d      	cbz	r5, 8006248 <_printf_i+0x19c>
 8006240:	2310      	movs	r3, #16
 8006242:	e7ad      	b.n	80061a0 <_printf_i+0xf4>
 8006244:	4826      	ldr	r0, [pc, #152]	@ (80062e0 <_printf_i+0x234>)
 8006246:	e7e9      	b.n	800621c <_printf_i+0x170>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f023 0320 	bic.w	r3, r3, #32
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	e7f6      	b.n	8006240 <_printf_i+0x194>
 8006252:	4616      	mov	r6, r2
 8006254:	e7bd      	b.n	80061d2 <_printf_i+0x126>
 8006256:	6833      	ldr	r3, [r6, #0]
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	6961      	ldr	r1, [r4, #20]
 800625c:	1d18      	adds	r0, r3, #4
 800625e:	6030      	str	r0, [r6, #0]
 8006260:	062e      	lsls	r6, r5, #24
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	d501      	bpl.n	800626a <_printf_i+0x1be>
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	e002      	b.n	8006270 <_printf_i+0x1c4>
 800626a:	0668      	lsls	r0, r5, #25
 800626c:	d5fb      	bpl.n	8006266 <_printf_i+0x1ba>
 800626e:	8019      	strh	r1, [r3, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	4616      	mov	r6, r2
 8006276:	e7bc      	b.n	80061f2 <_printf_i+0x146>
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	6032      	str	r2, [r6, #0]
 800627e:	681e      	ldr	r6, [r3, #0]
 8006280:	6862      	ldr	r2, [r4, #4]
 8006282:	2100      	movs	r1, #0
 8006284:	4630      	mov	r0, r6
 8006286:	f7f9 ffab 	bl	80001e0 <memchr>
 800628a:	b108      	cbz	r0, 8006290 <_printf_i+0x1e4>
 800628c:	1b80      	subs	r0, r0, r6
 800628e:	6060      	str	r0, [r4, #4]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2300      	movs	r3, #0
 8006296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629a:	e7aa      	b.n	80061f2 <_printf_i+0x146>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	4632      	mov	r2, r6
 80062a0:	4649      	mov	r1, r9
 80062a2:	4640      	mov	r0, r8
 80062a4:	47d0      	blx	sl
 80062a6:	3001      	adds	r0, #1
 80062a8:	d0ad      	beq.n	8006206 <_printf_i+0x15a>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	079b      	lsls	r3, r3, #30
 80062ae:	d413      	bmi.n	80062d8 <_printf_i+0x22c>
 80062b0:	68e0      	ldr	r0, [r4, #12]
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	4298      	cmp	r0, r3
 80062b6:	bfb8      	it	lt
 80062b8:	4618      	movlt	r0, r3
 80062ba:	e7a6      	b.n	800620a <_printf_i+0x15e>
 80062bc:	2301      	movs	r3, #1
 80062be:	4632      	mov	r2, r6
 80062c0:	4649      	mov	r1, r9
 80062c2:	4640      	mov	r0, r8
 80062c4:	47d0      	blx	sl
 80062c6:	3001      	adds	r0, #1
 80062c8:	d09d      	beq.n	8006206 <_printf_i+0x15a>
 80062ca:	3501      	adds	r5, #1
 80062cc:	68e3      	ldr	r3, [r4, #12]
 80062ce:	9903      	ldr	r1, [sp, #12]
 80062d0:	1a5b      	subs	r3, r3, r1
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dcf2      	bgt.n	80062bc <_printf_i+0x210>
 80062d6:	e7eb      	b.n	80062b0 <_printf_i+0x204>
 80062d8:	2500      	movs	r5, #0
 80062da:	f104 0619 	add.w	r6, r4, #25
 80062de:	e7f5      	b.n	80062cc <_printf_i+0x220>
 80062e0:	0802ffc1 	.word	0x0802ffc1
 80062e4:	0802ffd2 	.word	0x0802ffd2

080062e8 <memmove>:
 80062e8:	4288      	cmp	r0, r1
 80062ea:	b510      	push	{r4, lr}
 80062ec:	eb01 0402 	add.w	r4, r1, r2
 80062f0:	d902      	bls.n	80062f8 <memmove+0x10>
 80062f2:	4284      	cmp	r4, r0
 80062f4:	4623      	mov	r3, r4
 80062f6:	d807      	bhi.n	8006308 <memmove+0x20>
 80062f8:	1e43      	subs	r3, r0, #1
 80062fa:	42a1      	cmp	r1, r4
 80062fc:	d008      	beq.n	8006310 <memmove+0x28>
 80062fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006306:	e7f8      	b.n	80062fa <memmove+0x12>
 8006308:	4402      	add	r2, r0
 800630a:	4601      	mov	r1, r0
 800630c:	428a      	cmp	r2, r1
 800630e:	d100      	bne.n	8006312 <memmove+0x2a>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800631a:	e7f7      	b.n	800630c <memmove+0x24>

0800631c <_sbrk_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d06      	ldr	r5, [pc, #24]	@ (8006338 <_sbrk_r+0x1c>)
 8006320:	2300      	movs	r3, #0
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	f7fa fd50 	bl	8000dcc <_sbrk>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_sbrk_r+0x1a>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_sbrk_r+0x1a>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	2000828c 	.word	0x2000828c

0800633c <_realloc_r>:
 800633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006340:	4607      	mov	r7, r0
 8006342:	4614      	mov	r4, r2
 8006344:	460d      	mov	r5, r1
 8006346:	b921      	cbnz	r1, 8006352 <_realloc_r+0x16>
 8006348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	4611      	mov	r1, r2
 800634e:	f7ff bc5b 	b.w	8005c08 <_malloc_r>
 8006352:	b92a      	cbnz	r2, 8006360 <_realloc_r+0x24>
 8006354:	f7ff fbec 	bl	8005b30 <_free_r>
 8006358:	4625      	mov	r5, r4
 800635a:	4628      	mov	r0, r5
 800635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006360:	f000 f81a 	bl	8006398 <_malloc_usable_size_r>
 8006364:	4284      	cmp	r4, r0
 8006366:	4606      	mov	r6, r0
 8006368:	d802      	bhi.n	8006370 <_realloc_r+0x34>
 800636a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800636e:	d8f4      	bhi.n	800635a <_realloc_r+0x1e>
 8006370:	4621      	mov	r1, r4
 8006372:	4638      	mov	r0, r7
 8006374:	f7ff fc48 	bl	8005c08 <_malloc_r>
 8006378:	4680      	mov	r8, r0
 800637a:	b908      	cbnz	r0, 8006380 <_realloc_r+0x44>
 800637c:	4645      	mov	r5, r8
 800637e:	e7ec      	b.n	800635a <_realloc_r+0x1e>
 8006380:	42b4      	cmp	r4, r6
 8006382:	4622      	mov	r2, r4
 8006384:	4629      	mov	r1, r5
 8006386:	bf28      	it	cs
 8006388:	4632      	movcs	r2, r6
 800638a:	f7ff fbc3 	bl	8005b14 <memcpy>
 800638e:	4629      	mov	r1, r5
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff fbcd 	bl	8005b30 <_free_r>
 8006396:	e7f1      	b.n	800637c <_realloc_r+0x40>

08006398 <_malloc_usable_size_r>:
 8006398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639c:	1f18      	subs	r0, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfbc      	itt	lt
 80063a2:	580b      	ldrlt	r3, [r1, r0]
 80063a4:	18c0      	addlt	r0, r0, r3
 80063a6:	4770      	bx	lr

080063a8 <_init>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	bf00      	nop
 80063ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ae:	bc08      	pop	{r3}
 80063b0:	469e      	mov	lr, r3
 80063b2:	4770      	bx	lr

080063b4 <_fini>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr
