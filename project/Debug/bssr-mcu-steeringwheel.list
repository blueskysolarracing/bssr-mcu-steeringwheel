
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029c24  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030098  08030098  00032080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08030098  08030098  00031098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080300a0  080300a0  00032080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080300a0  080300a0  000310a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080300a4  080300a4  000310a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080300a8  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008264  20000080  08030128  00032080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200082e4  08030128  000322e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce3  00000000  00000000  000320b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  00045d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00048b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e00  00000000  00000000  00049d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254f7  00000000  00000000  0004ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e77  00000000  00000000  0007001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e426a  00000000  00000000  00086e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fec  00000000  00000000  0016b144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00170130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800645c 	.word	0x0800645c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800645c 	.word	0x0800645c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_DMA_Init+0x60>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <MX_DMA_Init+0x60>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_DMA_Init+0x60>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <MX_DMA_Init+0x60>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ce:	4a0f      	ldr	r2, [pc, #60]	@ (800060c <MX_DMA_Init+0x60>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <MX_DMA_Init+0x60>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	200c      	movs	r0, #12
 80005e8:	f001 fc6f 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f001 fc88 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2039      	movs	r0, #57	@ 0x39
 80005f8:	f001 fc67 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80005fc:	2039      	movs	r0, #57	@ 0x39
 80005fe:	f001 fc80 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b53      	ldr	r3, [pc, #332]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a52      	ldr	r2, [pc, #328]	@ (8000774 <MX_GPIO_Init+0x164>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b4d      	ldr	r3, [pc, #308]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a4c      	ldr	r2, [pc, #304]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b4a      	ldr	r3, [pc, #296]	@ (8000774 <MX_GPIO_Init+0x164>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a46      	ldr	r2, [pc, #280]	@ (8000774 <MX_GPIO_Init+0x164>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b44      	ldr	r3, [pc, #272]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a40      	ldr	r2, [pc, #256]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <MX_GPIO_Init+0x164>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b3b      	ldr	r3, [pc, #236]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a3a      	ldr	r2, [pc, #232]	@ (8000774 <MX_GPIO_Init+0x164>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	4835      	ldr	r0, [pc, #212]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006a4:	f001 ffea 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80006a8:	2200      	movs	r2, #0
 80006aa:	f640 4116 	movw	r1, #3094	@ 0xc16
 80006ae:	4833      	ldr	r0, [pc, #204]	@ (800077c <MX_GPIO_Init+0x16c>)
 80006b0:	f001 ffe4 	bl	800267c <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	4831      	ldr	r0, [pc, #196]	@ (8000780 <MX_GPIO_Init+0x170>)
 80006ba:	f001 ffdf 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	482e      	ldr	r0, [pc, #184]	@ (800077c <MX_GPIO_Init+0x16c>)
 80006c4:	f001 ffda 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006c8:	2310      	movs	r3, #16
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006cc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4826      	ldr	r0, [pc, #152]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006de:	f001 fe23 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80006e2:	2320      	movs	r3, #32
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	481f      	ldr	r0, [pc, #124]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006fa:	f001 fe15 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	481a      	ldr	r0, [pc, #104]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000712:	f001 fe09 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 8000716:	f640 4316 	movw	r3, #3094	@ 0xc16
 800071a:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000730:	f001 fdfa 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000734:	2304      	movs	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	@ (8000780 <MX_GPIO_Init+0x170>)
 800074c:	f001 fdec 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000768:	f001 fdde 	bl	8002328 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000800 	.word	0x48000800
 800077c:	48000400 	.word	0x48000400
 8000780:	48000c00 	.word	0x48000c00

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	4897      	ldr	r0, [pc, #604]	@ (80009f0 <main+0x26c>)
 8000792:	f001 ff73 	bl	800267c <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f001 fa25 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f949 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f7ff ff37 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a2:	f7ff ff03 	bl	80005ac <MX_DMA_Init>
  MX_SPI1_Init();
 80007a6:	f000 f9a7 	bl	8000af8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007aa:	f000 f9df 	bl	8000b6c <MX_SPI3_Init>
  MX_TIM2_Init();
 80007ae:	f000 fb9b 	bl	8000ee8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007b2:	f000 fc5b 	bl	800106c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 fd87 	bl	80012c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007ba:	f000 fbf1 	bl	8000fa0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 0;
 80007be:	4b8d      	ldr	r3, [pc, #564]	@ (80009f4 <main+0x270>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007c4:	2100      	movs	r1, #0
 80007c6:	488c      	ldr	r0, [pc, #560]	@ (80009f8 <main+0x274>)
 80007c8:	f003 fe42 	bl	8004450 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 5000;
 80007cc:	4b89      	ldr	r3, [pc, #548]	@ (80009f4 <main+0x270>)
 80007ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80007d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007d4:	2108      	movs	r1, #8
 80007d6:	4888      	ldr	r0, [pc, #544]	@ (80009f8 <main+0x274>)
 80007d8:	f003 fe3a 	bl	8004450 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80007dc:	4b87      	ldr	r3, [pc, #540]	@ (80009fc <main+0x278>)
 80007de:	2200      	movs	r2, #0
 80007e0:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007e2:	2104      	movs	r1, #4
 80007e4:	4886      	ldr	r0, [pc, #536]	@ (8000a00 <main+0x27c>)
 80007e6:	f003 fe33 	bl	8004450 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80007ea:	4b84      	ldr	r3, [pc, #528]	@ (80009fc <main+0x278>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007f0:	2108      	movs	r1, #8
 80007f2:	4883      	ldr	r0, [pc, #524]	@ (8000a00 <main+0x27c>)
 80007f4:	f003 fe2c 	bl	8004450 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80007f8:	4b82      	ldr	r3, [pc, #520]	@ (8000a04 <main+0x280>)
 80007fa:	4a83      	ldr	r2, [pc, #524]	@ (8000a08 <main+0x284>)
 80007fc:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80007fe:	4b81      	ldr	r3, [pc, #516]	@ (8000a04 <main+0x280>)
 8000800:	4a82      	ldr	r2, [pc, #520]	@ (8000a0c <main+0x288>)
 8000802:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000804:	4b7f      	ldr	r3, [pc, #508]	@ (8000a04 <main+0x280>)
 8000806:	2204      	movs	r2, #4
 8000808:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 800080a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a04 <main+0x280>)
 800080c:	4a80      	ldr	r2, [pc, #512]	@ (8000a10 <main+0x28c>)
 800080e:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 8000810:	4b7c      	ldr	r3, [pc, #496]	@ (8000a04 <main+0x280>)
 8000812:	2204      	movs	r2, #4
 8000814:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 8000816:	4b7b      	ldr	r3, [pc, #492]	@ (8000a04 <main+0x280>)
 8000818:	4a75      	ldr	r2, [pc, #468]	@ (80009f0 <main+0x26c>)
 800081a:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 800081c:	4b79      	ldr	r3, [pc, #484]	@ (8000a04 <main+0x280>)
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000822:	4b78      	ldr	r3, [pc, #480]	@ (8000a04 <main+0x280>)
 8000824:	4a72      	ldr	r2, [pc, #456]	@ (80009f0 <main+0x26c>)
 8000826:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000828:	4b76      	ldr	r3, [pc, #472]	@ (8000a04 <main+0x280>)
 800082a:	2210      	movs	r2, #16
 800082c:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800082e:	4b75      	ldr	r3, [pc, #468]	@ (8000a04 <main+0x280>)
 8000830:	4a78      	ldr	r2, [pc, #480]	@ (8000a14 <main+0x290>)
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000834:	4b78      	ldr	r3, [pc, #480]	@ (8000a18 <main+0x294>)
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	4b72      	ldr	r3, [pc, #456]	@ (8000a04 <main+0x280>)
 800083a:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 800083c:	4b71      	ldr	r3, [pc, #452]	@ (8000a04 <main+0x280>)
 800083e:	4a77      	ldr	r2, [pc, #476]	@ (8000a1c <main+0x298>)
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
 8000848:	e012      	b.n	8000870 <main+0xec>
		ls032.registers[i].str = ls032_registers_text[i];
 800084a:	f897 2307 	ldrb.w	r2, [r7, #775]	@ 0x307
 800084e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a04 <main+0x280>)
 8000850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000852:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	4419      	add	r1, r3
 800085a:	4613      	mov	r3, r2
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	1a9b      	subs	r3, r3, r2
 8000860:	4a6f      	ldr	r2, [pc, #444]	@ (8000a20 <main+0x29c>)
 8000862:	4413      	add	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 8000866:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 800086a:	3301      	adds	r3, #1
 800086c:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
 8000870:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 8000874:	2b1f      	cmp	r3, #31
 8000876:	d9e8      	bls.n	800084a <main+0xc6>

	if (LS032_Init(&ls032)) {
 8000878:	4862      	ldr	r0, [pc, #392]	@ (8000a04 <main+0x280>)
 800087a:	f000 fecc 	bl	8001616 <LS032_Init>
		// TODO: Error Handle
	}

	LS032_DrawLogo(&ls032);
 800087e:	4861      	ldr	r0, [pc, #388]	@ (8000a04 <main+0x280>)
 8000880:	f001 f8ba 	bl	80019f8 <LS032_DrawLogo>
	//LS032_Update(&ls032);

	uint8_t tmp_num = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
	char speed_letters[255];
	char speed_bars_1[255];
	char speed_bars_2[255];
	char *speed_units = "KM/H";
 800088a:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <main+0x2a0>)
 800088c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300

	memset(speed_bars_1, '/', 255);
 8000890:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000894:	22ff      	movs	r2, #255	@ 0xff
 8000896:	212f      	movs	r1, #47	@ 0x2f
 8000898:	4618      	mov	r0, r3
 800089a:	f005 f961 	bl	8005b60 <memset>
	memset(speed_bars_2, '\\', 255);
 800089e:	463b      	mov	r3, r7
 80008a0:	22ff      	movs	r2, #255	@ 0xff
 80008a2:	215c      	movs	r1, #92	@ 0x5c
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 f95b 	bl	8005b60 <memset>

	LS032_TextReg_SetPos(&ls032, 0x02, 380, 26);
 80008aa:	231a      	movs	r3, #26
 80008ac:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80008b0:	2102      	movs	r1, #2
 80008b2:	4854      	ldr	r0, [pc, #336]	@ (8000a04 <main+0x280>)
 80008b4:	f000 ff84 	bl	80017c0 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x02, 3);
 80008b8:	2203      	movs	r2, #3
 80008ba:	2102      	movs	r1, #2
 80008bc:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <main+0x280>)
 80008be:	f000 ffb4 	bl	800182a <LS032_TextReg_SetSize>

	LS032_TextReg_SetString(&ls032, 0x03, strlen(speed_units), speed_units);
 80008c2:	f8d7 0300 	ldr.w	r0, [r7, #768]	@ 0x300
 80008c6:	f7ff fc83 	bl	80001d0 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80008d2:	2103      	movs	r1, #3
 80008d4:	484b      	ldr	r0, [pc, #300]	@ (8000a04 <main+0x280>)
 80008d6:	f000 ffcb 	bl	8001870 <LS032_TextReg_SetString>
	LS032_TextReg_SetPos(&ls032, 0x03, 420, 24);
 80008da:	2318      	movs	r3, #24
 80008dc:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80008e0:	2103      	movs	r1, #3
 80008e2:	4848      	ldr	r0, [pc, #288]	@ (8000a04 <main+0x280>)
 80008e4:	f000 ff6c 	bl	80017c0 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x03, 1);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2103      	movs	r1, #3
 80008ec:	4845      	ldr	r0, [pc, #276]	@ (8000a04 <main+0x280>)
 80008ee:	f000 ff9c 	bl	800182a <LS032_TextReg_SetSize>

	LS032_TextReg_SetPos(&ls032, 0x00, 0, 30);
 80008f2:	231e      	movs	r3, #30
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	4842      	ldr	r0, [pc, #264]	@ (8000a04 <main+0x280>)
 80008fa:	f000 ff61 	bl	80017c0 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x00, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	2100      	movs	r1, #0
 8000902:	4840      	ldr	r0, [pc, #256]	@ (8000a04 <main+0x280>)
 8000904:	f000 ff91 	bl	800182a <LS032_TextReg_SetSize>
	LS032_TextReg_SetPos(&ls032, 0x01, 0, 34);
 8000908:	2322      	movs	r3, #34	@ 0x22
 800090a:	2200      	movs	r2, #0
 800090c:	2101      	movs	r1, #1
 800090e:	483d      	ldr	r0, [pc, #244]	@ (8000a04 <main+0x280>)
 8000910:	f000 ff56 	bl	80017c0 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x01, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	483a      	ldr	r0, [pc, #232]	@ (8000a04 <main+0x280>)
 800091a:	f000 ff86 	bl	800182a <LS032_TextReg_SetSize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(speed_letters, "%d", tmp_num);
 800091e:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 8000922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000926:	4940      	ldr	r1, [pc, #256]	@ (8000a28 <main+0x2a4>)
 8000928:	4618      	mov	r0, r3
 800092a:	f005 f8f7 	bl	8005b1c <siprintf>

	  LS032_Clear(&ls032);
 800092e:	4835      	ldr	r0, [pc, #212]	@ (8000a04 <main+0x280>)
 8000930:	f000 fff0 	bl	8001914 <LS032_Clear>

	  LS032_TextReg_SetString(&ls032, 0x02, strlen(speed_letters), speed_letters);
 8000934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc49 	bl	80001d0 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b2da      	uxtb	r2, r3
 8000942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000946:	2102      	movs	r1, #2
 8000948:	482e      	ldr	r0, [pc, #184]	@ (8000a04 <main+0x280>)
 800094a:	f000 ff91 	bl	8001870 <LS032_TextReg_SetString>

	  LS032_TextReg_SetPos(&ls032, 0x00, (tmp_num % 5)*4, 30);
 800094e:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 8000952:	4b36      	ldr	r3, [pc, #216]	@ (8000a2c <main+0x2a8>)
 8000954:	fba3 1302 	umull	r1, r3, r3, r2
 8000958:	0899      	lsrs	r1, r3, #2
 800095a:	460b      	mov	r3, r1
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	440b      	add	r3, r1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	b29a      	uxth	r2, r3
 8000968:	231e      	movs	r3, #30
 800096a:	2100      	movs	r1, #0
 800096c:	4825      	ldr	r0, [pc, #148]	@ (8000a04 <main+0x280>)
 800096e:	f000 ff27 	bl	80017c0 <LS032_TextReg_SetPos>
	  LS032_TextReg_SetPos(&ls032, 0x01, (tmp_num % 5)*4, 34);
 8000972:	f897 2306 	ldrb.w	r2, [r7, #774]	@ 0x306
 8000976:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <main+0x2a8>)
 8000978:	fba3 1302 	umull	r1, r3, r3, r2
 800097c:	0899      	lsrs	r1, r3, #2
 800097e:	460b      	mov	r3, r1
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	b29a      	uxth	r2, r3
 800098c:	2322      	movs	r3, #34	@ 0x22
 800098e:	2101      	movs	r1, #1
 8000990:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <main+0x280>)
 8000992:	f000 ff15 	bl	80017c0 <LS032_TextReg_SetPos>
	  LS032_TextReg_SetString(&ls032, 0x00, tmp_num/5, speed_bars_1);
 8000996:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <main+0x2a8>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009a8:	2100      	movs	r1, #0
 80009aa:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <main+0x280>)
 80009ac:	f000 ff60 	bl	8001870 <LS032_TextReg_SetString>
	  LS032_TextReg_SetString(&ls032, 0x01, tmp_num/5, speed_bars_2);
 80009b0:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <main+0x2a8>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	463b      	mov	r3, r7
 80009c0:	2101      	movs	r1, #1
 80009c2:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <main+0x280>)
 80009c4:	f000 ff54 	bl	8001870 <LS032_TextReg_SetString>


	  LS032_UpdateAsync(&ls032);
 80009c8:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <main+0x280>)
 80009ca:	f000 ff84 	bl	80018d6 <LS032_UpdateAsync>

	  tmp_num += 1;
 80009ce:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80009d2:	3301      	adds	r3, #1
 80009d4:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
	  if (tmp_num > 99)
 80009d8:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80009dc:	2b63      	cmp	r3, #99	@ 0x63
 80009de:	d902      	bls.n	80009e6 <main+0x262>
		  tmp_num = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306

	  HAL_Delay(30);
 80009e6:	201e      	movs	r0, #30
 80009e8:	f001 f970 	bl	8001ccc <HAL_Delay>
	  sprintf(speed_letters, "%d", tmp_num);
 80009ec:	e797      	b.n	800091e <main+0x19a>
 80009ee:	bf00      	nop
 80009f0:	48000400 	.word	0x48000400
 80009f4:	40000800 	.word	0x40000800
 80009f8:	200080c4 	.word	0x200080c4
 80009fc:	40000400 	.word	0x40000400
 8000a00:	20008078 	.word	0x20008078
 8000a04:	2000009c 	.word	0x2000009c
 8000a08:	20007f34 	.word	0x20007f34
 8000a0c:	48000c00 	.word	0x48000c00
 8000a10:	2000802c 	.word	0x2000802c
 8000a14:	200000cc 	.word	0x200000cc
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20005cf0 	.word	0x20005cf0
 8000a20:	20005ef0 	.word	0x20005ef0
 8000a24:	08006474 	.word	0x08006474
 8000a28:	0800647c 	.word	0x0800647c
 8000a2c:	cccccccd 	.word	0xcccccccd

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2244      	movs	r2, #68	@ 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f88e 	bl	8005b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a56:	f001 fe37 	bl	80026c8 <HAL_PWREx_ControlVoltageScaling>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a60:	f000 f844 	bl	8000aec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	2303      	movs	r3, #3
 8000a74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fe70 	bl	8002774 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 f827 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fa38 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ac2:	f000 f813 	bl	8000aec <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	@ 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_SPI_TxCpltCallback>:
      __NOP();
  }
}

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
//	ls032.spi_state = 0;
//	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
	LS032_TX_DMA_CPLT(&ls032);
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <HAL_SPI_TxCpltCallback+0x18>)
 8000ada:	f000 fe5d 	bl	8001798 <LS032_TX_DMA_CPLT>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000009c 	.word	0x2000009c

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000afe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <MX_SPI1_Init+0x70>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b10:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b50:	f003 f89a 	bl	8003c88 <HAL_SPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000b5a:	f7ff ffc7 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20007ed0 	.word	0x20007ed0
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	@ (8000be4 <MX_SPI3_Init+0x78>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b84:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b88:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_SPI3_Init+0x74>)
 8000bce:	f003 f85b 	bl	8003c88 <HAL_SPI_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000bd8:	f7ff ff88 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20007f34 	.word	0x20007f34
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	@ 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a58      	ldr	r2, [pc, #352]	@ (8000d68 <HAL_SPI_MspInit+0x180>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d153      	bne.n	8000cb2 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	4b58      	ldr	r3, [pc, #352]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	4a57      	ldr	r2, [pc, #348]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c16:	4b55      	ldr	r3, [pc, #340]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b52      	ldr	r3, [pc, #328]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a51      	ldr	r2, [pc, #324]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c3a:	23e0      	movs	r3, #224	@ 0xe0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c58:	f001 fb66 	bl	8002328 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c5c:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c5e:	4a45      	ldr	r2, [pc, #276]	@ (8000d74 <HAL_SPI_MspInit+0x18c>)
 8000c60:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c68:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b40      	ldr	r3, [pc, #256]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c80:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c86:	4b3a      	ldr	r3, [pc, #232]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c94:	4836      	ldr	r0, [pc, #216]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000c96:	f001 f94f 	bl	8001f38 <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000ca0:	f7ff ff24 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a32      	ldr	r2, [pc, #200]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000ca8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000caa:	4a31      	ldr	r2, [pc, #196]	@ (8000d70 <HAL_SPI_MspInit+0x188>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cb0:	e056      	b.n	8000d60 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a30      	ldr	r2, [pc, #192]	@ (8000d78 <HAL_SPI_MspInit+0x190>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d151      	bne.n	8000d60 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc8:	4b28      	ldr	r3, [pc, #160]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <HAL_SPI_MspInit+0x184>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	481c      	ldr	r0, [pc, #112]	@ (8000d7c <HAL_SPI_MspInit+0x194>)
 8000d0a:	f001 fb0d 	bl	8002328 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d10:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <HAL_SPI_MspInit+0x19c>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d44:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d46:	f001 f8f7 	bl	8001f38 <HAL_DMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8000d50:	f7ff fecc 	bl	8000aec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d58:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <HAL_SPI_MspInit+0x198>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013000 	.word	0x40013000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20007f98 	.word	0x20007f98
 8000d74:	4002001c 	.word	0x4002001c
 8000d78:	40003c00 	.word	0x40003c00
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	20007fe0 	.word	0x20007fe0
 8000d84:	4002041c 	.word	0x4002041c

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <MemManage_Handler+0x4>

08000de8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e26:	f000 ff31 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <DMA1_Channel2_IRQHandler+0x10>)
 8000e36:	f001 f997 	bl	8002168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20007f98 	.word	0x20007f98

08000e44 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA2_Channel2_IRQHandler+0x10>)
 8000e4a:	f001 f98d 	bl	8002168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20007fe0 	.word	0x20007fe0

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f004 fe72 	bl	8005b70 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20018000 	.word	0x20018000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20008028 	.word	0x20008028
 8000ec0:	200082e8 	.word	0x200082e8

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f16:	2230      	movs	r2, #48	@ 0x30
 8000f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f22:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <MX_TIM2_Init+0xb0>)
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f34:	f003 fa34 	bl	80043a0 <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f7ff fdd5 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f52:	f004 f839 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f5c:	f7ff fdc6 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	@ 0x60
 8000f62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <MX_TIM2_Init+0xb4>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	2204      	movs	r2, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f78:	f003 fb70 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f82:	f7ff fdb3 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <MX_TIM2_Init+0xac>)
 8000f88:	f000 f91c 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000802c 	.word	0x2000802c
 8000f98:	0061a7ff 	.word	0x0061a7ff
 8000f9c:	0030d400 	.word	0x0030d400

08000fa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fc6:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <MX_TIM3_Init+0xc8>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fd8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fea:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8000fec:	f003 f9d8 	bl	80043a0 <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f7ff fd79 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4816      	ldr	r0, [pc, #88]	@ (8001064 <MX_TIM3_Init+0xc4>)
 800100a:	f003 ffdd 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001014:	f7ff fd6a 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	@ 0x60
 800101a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 800101c:	2332      	movs	r3, #50	@ 0x32
 800101e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	2204      	movs	r2, #4
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8001030:	f003 fb14 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800103a:	f7ff fd57 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	2208      	movs	r2, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8001046:	f003 fb09 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001050:	f7ff fd4c 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM3_Init+0xc4>)
 8001056:	f000 f8b5 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20008078 	.word	0x20008078
 8001068:	40000400 	.word	0x40000400

0800106c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_TIM4_Init+0xc4>)
 8001092:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <MX_TIM4_Init+0xc8>)
 8001094:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MX_TIM4_Init+0xc4>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <MX_TIM4_Init+0xc4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010a4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010b8:	f003 f972 	bl	80043a0 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80010c2:	f7ff fd13 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010d6:	f003 ff77 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80010e0:	f7ff fd04 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	@ 0x60
 80010e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_TIM4_Init+0xc4>)
 80010fc:	f003 faae 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001106:	f7ff fcf1 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	2208      	movs	r2, #8
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	@ (8001130 <MX_TIM4_Init+0xc4>)
 8001112:	f003 faa3 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800111c:	f7ff fce6 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <MX_TIM4_Init+0xc4>)
 8001122:	f000 f84f 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200080c4 	.word	0x200080c4
 8001134:	40000800 	.word	0x40000800

08001138 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001148:	d10c      	bne.n	8001164 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6593      	str	r3, [r2, #88]	@ 0x58
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001162:	e022      	b.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_TIM_PWM_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
}
 8001186:	e010      	b.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0c      	ldr	r2, [pc, #48]	@ (80011c0 <HAL_TIM_PWM_MspInit+0x88>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10b      	bne.n	80011aa <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6593      	str	r3, [r2, #88]	@ 0x58
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x80>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40000800 	.word	0x40000800

080011c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e4:	d11c      	bne.n	8001220 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a32      	ldr	r2, [pc, #200]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 80011fe:	2308      	movs	r3, #8
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4827      	ldr	r0, [pc, #156]	@ (80012b8 <HAL_TIM_MspPostInit+0xf4>)
 800121a:	f001 f885 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800121e:	e044      	b.n	80012aa <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <HAL_TIM_MspPostInit+0xf8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11d      	bne.n	8001266 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8001242:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001254:	2302      	movs	r3, #2
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <HAL_TIM_MspPostInit+0xfc>)
 8001260:	f001 f862 	bl	8002328 <HAL_GPIO_Init>
}
 8001264:	e021      	b.n	80012aa <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <HAL_TIM_MspPostInit+0x100>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d11c      	bne.n	80012aa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_TIM_MspPostInit+0xf0>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8001288:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800129a:	2302      	movs	r3, #2
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <HAL_TIM_MspPostInit+0xf4>)
 80012a6:	f001 f83f 	bl	8002328 <HAL_GPIO_Init>
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	40000400 	.word	0x40000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012ce:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <MX_USART2_UART_Init+0x5c>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x58>)
 800130c:	f003 fee4 	bl	80050d8 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001316:	f7ff fbe9 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20008110 	.word	0x20008110
 8001324:	40004400 	.word	0x40004400

08001328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0aa      	sub	sp, #168	@ 0xa8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2284      	movs	r2, #132	@ 0x84
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fc09 	bl	8005b60 <memset>
  if(uartHandle->Instance==USART2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <HAL_UART_MspInit+0xb0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d13b      	bne.n	80013d0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f803 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001370:	f7ff fbbc 	bl	8000aec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001378:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_UART_MspInit+0xb4>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013a4:	230c      	movs	r3, #12
 80013a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013bc:	2307      	movs	r3, #7
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013cc:	f000 ffac 	bl	8002328 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013d0:	bf00      	nop
 80013d2:	37a8      	adds	r7, #168	@ 0xa8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff fd6e 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f004 fbb5 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff f9b7 	bl	8000784 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001424:	080300a8 	.word	0x080300a8
  ldr r2, =_sbss
 8001428:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800142c:	200082e4 	.word	0x200082e4

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>

08001432 <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e003      	b.n	8001448 <delay_us+0x16>
		asm("NOP");
 8001440:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	019b      	lsls	r3, r3, #6
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	429a      	cmp	r2, r3
 8001450:	d3f6      	bcc.n	8001440 <delay_us+0xe>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]

	//gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
	gate_addr++;			// gate is 1 indexed
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	3301      	adds	r3, #1
 8001470:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2280      	movs	r2, #128	@ 0x80
 8001476:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b25a      	sxtb	r2, r3
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	b25b      	sxtb	r3, r3
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b25b      	sxtb	r3, r3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b25a      	sxtb	r2, r3
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	105b      	asrs	r3, r3, #1
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	015b      	lsls	r3, r3, #5
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25a      	sxtb	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25a      	sxtb	r2, r3
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	105b      	asrs	r3, r3, #1
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25a      	sxtb	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25a      	sxtb	r2, r3
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	10db      	asrs	r3, r3, #3
 8001544:	b25b      	sxtb	r3, r3
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b25a      	sxtb	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25a      	sxtb	r2, r3
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	115b      	asrs	r3, r3, #5
 8001564:	b25b      	sxtb	r3, r3
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25a      	sxtb	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25a      	sxtb	r2, r3
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	11db      	asrs	r3, r3, #7
 8001584:	b25b      	sxtb	r3, r3
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b25a      	sxtb	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	125b      	asrs	r3, r3, #9
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	603a      	str	r2, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
 80015d0:	460b      	mov	r3, r1
 80015d2:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80015da:	d301      	bcc.n	80015e0 <get_idx_from_pos+0x1c>
 80015dc:	2301      	movs	r3, #1
 80015de:	e014      	b.n	800160a <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	2b29      	cmp	r3, #41	@ 0x29
 80015e4:	d901      	bls.n	80015ea <get_idx_from_pos+0x26>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	461a      	mov	r2, r3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	441a      	add	r2, r3
 80015f2:	0052      	lsls	r2, r2, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3302      	adds	r3, #2
 8001602:	b29a      	uxth	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	461a      	mov	r2, r3
 8001628:	2100      	movs	r1, #0
 800162a:	f004 fa99 	bl	8005b60 <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 800162e:	2300      	movs	r3, #0
 8001630:	81fb      	strh	r3, [r7, #14]
 8001632:	e00e      	b.n	8001652 <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	89fa      	ldrh	r2, [r7, #14]
 800163a:	212c      	movs	r1, #44	@ 0x2c
 800163c:	fb01 f202 	mul.w	r2, r1, r2
 8001640:	441a      	add	r2, r3
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff0a 	bl	8001460 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	3301      	adds	r3, #1
 8001650:	81fb      	strh	r3, [r7, #14]
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001658:	d3ec      	bcc.n	8001634 <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 800165a:	2300      	movs	r3, #0
 800165c:	737b      	strb	r3, [r7, #13]
 800165e:	e030      	b.n	80016c2 <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001664:	7b7b      	ldrb	r3, [r7, #13]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4413      	add	r3, r2
 800166a:	2200      	movs	r2, #0
 800166c:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	2200      	movs	r2, #0
 800167a:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001680:	7b7b      	ldrb	r3, [r7, #13]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	2200      	movs	r2, #0
 8001688:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169c:	7b7b      	ldrb	r3, [r7, #13]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	2200      	movs	r2, #0
 80016a4:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016aa:	7b7b      	ldrb	r3, [r7, #13]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	22ff      	movs	r2, #255	@ 0xff
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fa52 	bl	8005b60 <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	3301      	adds	r3, #1
 80016c0:	737b      	strb	r3, [r7, #13]
 80016c2:	7b7b      	ldrb	r3, [r7, #13]
 80016c4:	2b1f      	cmp	r3, #31
 80016c6:	d9cb      	bls.n	8001660 <LS032_Init+0x4a>
	}

	// Flag SPI as Idle
	ls032->spi_state = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	72da      	strb	r2, [r3, #11]

	delay_us(30);
 80016d4:	201e      	movs	r0, #30
 80016d6:	f7ff feac 	bl	8001432 <delay_us>
	// Need to clear twice for some reason
	//LS032_Wipe(ls032);
	//LS032_Wipe(ls032);
	delay_us(30);
 80016da:	201e      	movs	r0, #30
 80016dc:	f7ff fea9 	bl	8001432 <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69d8      	ldr	r0, [r3, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8c1b      	ldrh	r3, [r3, #32]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	f000 ffc6 	bl	800267c <HAL_GPIO_WritePin>
	delay_us(30);
 80016f0:	201e      	movs	r0, #30
 80016f2:	f7ff fe9e 	bl	8001432 <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8a1b      	ldrh	r3, [r3, #16]
 80016fe:	4619      	mov	r1, r3
 8001700:	4610      	mov	r0, r2
 8001702:	f002 fea5 	bl	8004450 <HAL_TIM_PWM_Start>
	delay_us(30);
 8001706:	201e      	movs	r0, #30
 8001708:	f7ff fe93 	bl	8001432 <delay_us>
	return SUCCESS;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	4613      	mov	r3, r2
 8001722:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	7a9b      	ldrb	r3, [r3, #10]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <LS032_TX_DMA+0x1a>
 800172c:	2301      	movs	r3, #1
 800172e:	e02f      	b.n	8001790 <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6858      	ldr	r0, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	891b      	ldrh	r3, [r3, #8]
 8001742:	2201      	movs	r2, #1
 8001744:	4619      	mov	r1, r3
 8001746:	f000 ff99 	bl	800267c <HAL_GPIO_WritePin>
	delay_us(3);
 800174a:	2003      	movs	r0, #3
 800174c:	f7ff fe71 	bl	8001432 <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fb39 	bl	8003dd0 <HAL_SPI_Transmit_DMA>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fe62 	bl	8001432 <delay_us>
	if (ret) {
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00c      	beq.n	800178e <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6858      	ldr	r0, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	891b      	ldrh	r3, [r3, #8]
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	f000 ff7c 	bl	800267c <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	729a      	strb	r2, [r3, #10]
		return ret;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	e000      	b.n	8001790 <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <LS032_TX_DMA_CPLT>:

uint8_t LS032_TX_DMA_CPLT(LS032_HandleTypeDef *ls032) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	// Release the CS
	ls032->spi_state = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6858      	ldr	r0, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	891b      	ldrh	r3, [r3, #8]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	f000 ff63 	bl	800267c <HAL_GPIO_WritePin>

	return SUCCESS;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	72fb      	strb	r3, [r7, #11]
 80017d2:	460b      	mov	r3, r1
 80017d4:	813b      	strh	r3, [r7, #8]
 80017d6:	4613      	mov	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	2b1f      	cmp	r3, #31
 80017de:	d901      	bls.n	80017e4 <LS032_TextReg_SetPos+0x24>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01c      	b.n	800181e <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 80017e4:	893b      	ldrh	r3, [r7, #8]
 80017e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80017ea:	d301      	bcc.n	80017f0 <LS032_TextReg_SetPos+0x30>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e016      	b.n	800181e <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b29      	cmp	r3, #41	@ 0x29
 80017f4:	d901      	bls.n	80017fa <LS032_TextReg_SetPos+0x3a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e011      	b.n	800181e <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	893a      	ldrh	r2, [r7, #8]
 8001806:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
 8001836:	4613      	mov	r3, r2
 8001838:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	2b1f      	cmp	r3, #31
 800183e:	d901      	bls.n	8001844 <LS032_TextReg_SetSize+0x1a>
 8001840:	2301      	movs	r3, #1
 8001842:	e00f      	b.n	8001864 <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 8001844:	78bb      	ldrb	r3, [r7, #2]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d901      	bls.n	800184e <LS032_TextReg_SetSize+0x24>
 800184a:	2301      	movs	r3, #1
 800184c:	e00a      	b.n	8001864 <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	78ba      	ldrb	r2, [r7, #2]
 800185a:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LS032_TextReg_SetString>:

	ls032->update_queued = 1;
	return SUCCESS;
}

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	72fb      	strb	r3, [r7, #11]
 800187e:	4613      	mov	r3, r2
 8001880:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2b1f      	cmp	r3, #31
 8001886:	d901      	bls.n	800188c <LS032_TextReg_SetString+0x1c>
 8001888:	2301      	movs	r3, #1
 800188a:	e020      	b.n	80018ce <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	7aba      	ldrb	r2, [r7, #10]
 8001898:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	22ff      	movs	r2, #255	@ 0xff
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f958 	bl	8005b60 <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b4:	7afb      	ldrb	r3, [r7, #11]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	7aba      	ldrb	r2, [r7, #10]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 f981 	bl	8005bc8 <memcpy>

	ls032->update_queued = 1;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LS032_UpdateAsync>:
uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
	if (LS032_DrawScene(ls032)) return ERROR;
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
}

uint8_t LS032_UpdateAsync(LS032_HandleTypeDef *ls032) {
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	if (ls032->update_queued == 0) return ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7adb      	ldrb	r3, [r3, #11]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <LS032_UpdateAsync+0x14>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e010      	b.n	800190c <LS032_UpdateAsync+0x36>
	if (LS032_DrawScene(ls032)) return ERROR;
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f868 	bl	80019c0 <LS032_DrawScene>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <LS032_UpdateAsync+0x24>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e008      	b.n	800190c <LS032_UpdateAsync+0x36>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001902:	461a      	mov	r2, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff06 	bl	8001716 <LS032_TX_DMA>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <LS032_Clear>:
uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
	uint8_t clear_cmd[2] = {0x20, 0x00};
	return LS032_TX_DMA(ls032, clear_cmd, 2);
}

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800191c:	2300      	movs	r3, #0
 800191e:	81fb      	strh	r3, [r7, #14]
 8001920:	e00f      	b.n	8001942 <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	212c      	movs	r1, #44	@ 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	3302      	adds	r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	222a      	movs	r2, #42	@ 0x2a
 8001934:	21ff      	movs	r1, #255	@ 0xff
 8001936:	4618      	mov	r0, r3
 8001938:	f004 f912 	bl	8005b60 <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	3301      	adds	r3, #1
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001948:	d3eb      	bcc.n	8001922 <LS032_Clear+0xe>
	}

	return SUCCESS;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	2b1f      	cmp	r3, #31
 8001964:	d901      	bls.n	800196a <LS032_DrawRegister+0x16>
 8001966:	2301      	movs	r3, #1
 8001968:	e026      	b.n	80019b8 <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001974:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001980:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 800198c:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001998:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	462b      	mov	r3, r5
 80019ac:	4622      	mov	r2, r4
 80019ae:	4601      	mov	r1, r0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8d3 	bl	8001b5c <LS032_DrawString>
 80019b6:	4603      	mov	r3, r0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdb0      	pop	{r4, r5, r7, pc}

080019c0 <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e00c      	b.n	80019e8 <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4619      	mov	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffbe 	bl	8001954 <LS032_DrawRegister>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <LS032_DrawScene+0x22>
			return ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e006      	b.n	80019f0 <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b1f      	cmp	r3, #31
 80019ec:	d9ef      	bls.n	80019ce <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff87 	bl	8001914 <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001a06:	2312      	movs	r3, #18
 8001a08:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	e01c      	b.n	8001a4e <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a18:	89f9      	ldrh	r1, [r7, #14]
 8001a1a:	89bb      	ldrh	r3, [r7, #12]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	212c      	movs	r1, #44	@ 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	897b      	ldrh	r3, [r7, #10]
 8001a28:	440b      	add	r3, r1
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	18d0      	adds	r0, r2, r3
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00da      	lsls	r2, r3, #3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <LS032_DrawLogo+0x68>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	2215      	movs	r2, #21
 8001a42:	4619      	mov	r1, r3
 8001a44:	f004 f8c0 	bl	8005bc8 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001a48:	89fb      	ldrh	r3, [r7, #14]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	81fb      	strh	r3, [r7, #14]
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a54:	d3de      	bcc.n	8001a14 <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	0802d760 	.word	0x0802d760

08001a64 <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	460b      	mov	r3, r1
 8001a78:	813b      	strh	r3, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 8001a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d101      	bne.n	8001a8a <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e05d      	b.n	8001b46 <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4a30      	ldr	r2, [pc, #192]	@ (8001b50 <LS032_DrawChar+0xec>)
 8001a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e04e      	b.n	8001b46 <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <LS032_DrawChar+0xf0>)
 8001aac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ab0:	8a7b      	ldrh	r3, [r7, #18]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <LS032_DrawChar+0xf4>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001ac4:	f107 0210 	add.w	r2, r7, #16
 8001ac8:	8939      	ldrh	r1, [r7, #8]
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd79 	bl	80015c4 <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001ad2:	897b      	ldrh	r3, [r7, #10]
 8001ad4:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	da04      	bge.n	8001ae8 <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f1c3 0318 	rsb	r3, r3, #24
 8001ae6:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001ae8:	893b      	ldrh	r3, [r7, #8]
 8001aea:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001aee:	7dbb      	ldrb	r3, [r7, #22]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	da04      	bge.n	8001afe <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001af4:	893b      	ldrh	r3, [r7, #8]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001afc:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	757b      	strb	r3, [r7, #21]
 8001b02:	e01b      	b.n	8001b3c <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	8a3a      	ldrh	r2, [r7, #16]
 8001b0a:	189c      	adds	r4, r3, r2
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <LS032_DrawChar+0xf0>)
 8001b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b14:	8a7b      	ldrh	r3, [r7, #18]
 8001b16:	7d79      	ldrb	r1, [r7, #21]
 8001b18:	7db8      	ldrb	r0, [r7, #22]
 8001b1a:	fb00 f101 	mul.w	r1, r0, r1
 8001b1e:	440b      	add	r3, r1
 8001b20:	3301      	adds	r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	7dba      	ldrb	r2, [r7, #22]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f004 f84d 	bl	8005bc8 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001b2e:	8a3b      	ldrh	r3, [r7, #16]
 8001b30:	332c      	adds	r3, #44	@ 0x2c
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001b36:	7d7b      	ldrb	r3, [r7, #21]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	757b      	strb	r3, [r7, #21]
 8001b3c:	7d7a      	ldrb	r2, [r7, #21]
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d3df      	bcc.n	8001b04 <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000018 	.word	0x20000018
 8001b58:	0802d75c 	.word	0x0802d75c

08001b5c <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	813b      	strh	r3, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
 8001b7a:	e025      	b.n	8001bc8 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	79f8      	ldrb	r0, [r7, #7]
 8001b86:	893a      	ldrh	r2, [r7, #8]
 8001b88:	8979      	ldrh	r1, [r7, #10]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff ff68 	bl	8001a64 <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <LS032_DrawString+0x80>)
 8001b98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba0:	440b      	add	r3, r1
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <LS032_DrawString+0x84>)
 8001bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bb4:	8abb      	ldrh	r3, [r7, #20]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
 8001bc8:	7dfa      	ldrb	r2, [r7, #23]
 8001bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3d4      	bcc.n	8001b7c <LS032_DrawString+0x20>
	}

	return SUCCESS;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000018 	.word	0x20000018

08001be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f000 f960 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf4:	200f      	movs	r0, #15
 8001bf6:	f000 f80d 	bl	8001c14 <HAL_InitTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	e001      	b.n	8001c0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c06:	f7ff f8bf 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_InitTick+0x6c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_InitTick+0x70>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <HAL_InitTick+0x6c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f96d 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d809      	bhi.n	8001c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 f937 	bl	8001eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_InitTick+0x74>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e004      	b.n	8001c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e001      	b.n	8001c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000002c 	.word	0x2000002c
 8001c84:	20000004 	.word	0x20000004
 8001c88:	20000028 	.word	0x20000028

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000002c 	.word	0x2000002c
 8001cb0:	20008198 	.word	0x20008198

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20008198 	.word	0x20008198

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000002c 	.word	0x2000002c

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	@ (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	@ (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff3e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff31 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e098      	b.n	800207c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <HAL_DMA_Init+0x150>)
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d80f      	bhi.n	8001f76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800208c <HAL_DMA_Init+0x154>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a4b      	ldr	r2, [pc, #300]	@ (8002090 <HAL_DMA_Init+0x158>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a48      	ldr	r2, [pc, #288]	@ (8002094 <HAL_DMA_Init+0x15c>)
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f74:	e00e      	b.n	8001f94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_DMA_Init+0x160>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a43      	ldr	r2, [pc, #268]	@ (8002090 <HAL_DMA_Init+0x158>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	009a      	lsls	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a42      	ldr	r2, [pc, #264]	@ (800209c <HAL_DMA_Init+0x164>)
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fee:	d039      	beq.n	8002064 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <HAL_DMA_Init+0x15c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11a      	bne.n	8002030 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <HAL_DMA_Init+0x168>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f003 031c 	and.w	r3, r3, #28
 8002006:	210f      	movs	r1, #15
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	4924      	ldr	r1, [pc, #144]	@ (80020a0 <HAL_DMA_Init+0x168>)
 8002010:	4013      	ands	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002014:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_DMA_Init+0x168>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	f003 031c 	and.w	r3, r3, #28
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	491d      	ldr	r1, [pc, #116]	@ (80020a0 <HAL_DMA_Init+0x168>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
 800202e:	e019      	b.n	8002064 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <HAL_DMA_Init+0x16c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	f003 031c 	and.w	r3, r3, #28
 800203c:	210f      	movs	r1, #15
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	4917      	ldr	r1, [pc, #92]	@ (80020a4 <HAL_DMA_Init+0x16c>)
 8002046:	4013      	ands	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_DMA_Init+0x16c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f003 031c 	and.w	r3, r3, #28
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	4911      	ldr	r1, [pc, #68]	@ (80020a4 <HAL_DMA_Init+0x16c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40020407 	.word	0x40020407
 800208c:	bffdfff8 	.word	0xbffdfff8
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	40020000 	.word	0x40020000
 8002098:	bffdfbf8 	.word	0xbffdfbf8
 800209c:	40020400 	.word	0x40020400
 80020a0:	400200a8 	.word	0x400200a8
 80020a4:	400204a8 	.word	0x400204a8

080020a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Start_IT+0x20>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e04b      	b.n	8002160 <HAL_DMA_Start_IT+0xb8>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d13a      	bne.n	8002152 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f8e0 	bl	80022c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 020e 	orr.w	r2, r2, #14
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e00f      	b.n	8002140 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 020a 	orr.w	r2, r2, #10
 800213e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e005      	b.n	800215e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800215a:	2302      	movs	r3, #2
 800215c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	f003 031c 	and.w	r3, r3, #28
 8002188:	2204      	movs	r2, #4
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d026      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x7a>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d021      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0204 	bic.w	r2, r2, #4
 80021ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	f003 021c 	and.w	r2, r3, #28
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	2104      	movs	r1, #4
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d071      	beq.n	80022bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021e0:	e06c      	b.n	80022bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f003 031c 	and.w	r3, r3, #28
 80021ea:	2202      	movs	r2, #2
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02e      	beq.n	8002254 <HAL_DMA_IRQHandler+0xec>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d029      	beq.n	8002254 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 020a 	bic.w	r2, r2, #10
 800221c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 021c 	and.w	r2, r3, #28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2102      	movs	r1, #2
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d038      	beq.n	80022bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002252:	e033      	b.n	80022bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	f003 031c 	and.w	r3, r3, #28
 800225c:	2208      	movs	r2, #8
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02a      	beq.n	80022be <HAL_DMA_IRQHandler+0x156>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d025      	beq.n	80022be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 020e 	bic.w	r2, r2, #14
 8002280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f003 021c 	and.w	r2, r3, #28
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
}
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	f003 021c 	and.w	r2, r3, #28
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d108      	bne.n	800230a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002308:	e007      	b.n	800231a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	60da      	str	r2, [r3, #12]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e17f      	b.n	8002638 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8171 	beq.w	8002632 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d005      	beq.n	8002368 <HAL_GPIO_Init+0x40>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d130      	bne.n	80023ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239e:	2201      	movs	r2, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0201 	and.w	r2, r3, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d118      	bne.n	8002408 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	08db      	lsrs	r3, r3, #3
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80ac 	beq.w	8002632 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b5f      	ldr	r3, [pc, #380]	@ (8002658 <HAL_GPIO_Init+0x330>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	4a5e      	ldr	r2, [pc, #376]	@ (8002658 <HAL_GPIO_Init+0x330>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <HAL_GPIO_Init+0x330>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f2:	4a5a      	ldr	r2, [pc, #360]	@ (800265c <HAL_GPIO_Init+0x334>)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x242>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4f      	ldr	r2, [pc, #316]	@ (8002660 <HAL_GPIO_Init+0x338>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x23e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4e      	ldr	r2, [pc, #312]	@ (8002664 <HAL_GPIO_Init+0x33c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x23a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4d      	ldr	r2, [pc, #308]	@ (8002668 <HAL_GPIO_Init+0x340>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x236>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4c      	ldr	r2, [pc, #304]	@ (800266c <HAL_GPIO_Init+0x344>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x232>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4b      	ldr	r2, [pc, #300]	@ (8002670 <HAL_GPIO_Init+0x348>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x22e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	@ (8002674 <HAL_GPIO_Init+0x34c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x22a>
 800254e:	2306      	movs	r3, #6
 8002550:	e00c      	b.n	800256c <HAL_GPIO_Init+0x244>
 8002552:	2307      	movs	r3, #7
 8002554:	e00a      	b.n	800256c <HAL_GPIO_Init+0x244>
 8002556:	2305      	movs	r3, #5
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x244>
 800255a:	2304      	movs	r3, #4
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x244>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x244>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x244>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x244>
 800256a:	2300      	movs	r3, #0
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800257c:	4937      	ldr	r1, [pc, #220]	@ (800265c <HAL_GPIO_Init+0x334>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HAL_GPIO_Init+0x350>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ae:	4a32      	ldr	r2, [pc, #200]	@ (8002678 <HAL_GPIO_Init+0x350>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <HAL_GPIO_Init+0x350>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d8:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_GPIO_Init+0x350>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <HAL_GPIO_Init+0x350>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002602:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_GPIO_Init+0x350>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_GPIO_Init+0x350>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262c:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <HAL_GPIO_Init+0x350>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3301      	adds	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	f47f ae78 	bne.w	8002338 <HAL_GPIO_Init+0x10>
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	48001000 	.word	0x48001000
 8002670:	48001400 	.word	0x48001400
 8002674:	48001800 	.word	0x48001800
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40007000 	.word	0x40007000

080026c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d6:	d130      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e4:	d038      	beq.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2232      	movs	r2, #50	@ 0x32
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9b      	lsrs	r3, r3, #18
 8002708:	3301      	adds	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270c:	e002      	b.n	8002714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3b01      	subs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002720:	d102      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f2      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002734:	d110      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e00f      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002746:	d007      	beq.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002748:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002750:	4a05      	ldr	r2, [pc, #20]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40007000 	.word	0x40007000
 800276c:	20000004 	.word	0x20000004
 8002770:	431bde83 	.word	0x431bde83

08002774 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e3ca      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	4b97      	ldr	r3, [pc, #604]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002790:	4b94      	ldr	r3, [pc, #592]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80e4 	beq.w	8002970 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_RCC_OscConfig+0x4a>
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	f040 808b 	bne.w	80028cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 8087 	bne.w	80028cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027be:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x62>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e3a2      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	4b82      	ldr	r3, [pc, #520]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_RCC_OscConfig+0x7c>
 80027e6:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ee:	e005      	b.n	80027fc <HAL_RCC_OscConfig+0x88>
 80027f0:	4b7c      	ldr	r3, [pc, #496]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80027f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d223      	bcs.n	8002848 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fd53 	bl	80032b0 <RCC_SetFlashLatencyFromMSIRange>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e383      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002814:	4b73      	ldr	r3, [pc, #460]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a72      	ldr	r2, [pc, #456]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b70      	ldr	r3, [pc, #448]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	496d      	ldr	r1, [pc, #436]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002832:	4b6c      	ldr	r3, [pc, #432]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	4968      	ldr	r1, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
 8002846:	e025      	b.n	8002894 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	4b66      	ldr	r3, [pc, #408]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a65      	ldr	r2, [pc, #404]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b63      	ldr	r3, [pc, #396]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4960      	ldr	r1, [pc, #384]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002866:	4b5f      	ldr	r3, [pc, #380]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	495b      	ldr	r1, [pc, #364]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd13 	bl	80032b0 <RCC_SetFlashLatencyFromMSIRange>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e343      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002894:	f000 fc4a 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b52      	ldr	r3, [pc, #328]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	4950      	ldr	r1, [pc, #320]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a4e      	ldr	r2, [pc, #312]	@ (80029ec <HAL_RCC_OscConfig+0x278>)
 80028b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028b4:	4b4e      	ldr	r3, [pc, #312]	@ (80029f0 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f9ab 	bl	8001c14 <HAL_InitTick>
 80028be:	4603      	mov	r3, r0
 80028c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d052      	beq.n	800296e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	e327      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d032      	beq.n	800293a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028d4:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f9e8 	bl	8001cb4 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e8:	f7ff f9e4 	bl	8001cb4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e310      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fa:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a36      	ldr	r2, [pc, #216]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b34      	ldr	r3, [pc, #208]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4931      	ldr	r1, [pc, #196]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002924:	4b2f      	ldr	r3, [pc, #188]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	492c      	ldr	r1, [pc, #176]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e01a      	b.n	8002970 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800293a:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002946:	f7ff f9b5 	bl	8001cb4 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294e:	f7ff f9b1 	bl	8001cb4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e2dd      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002960:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x1da>
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800296e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d074      	beq.n	8002a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x21a>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d10e      	bne.n	80029a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d10b      	bne.n	80029a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d064      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2f0>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d160      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e2ba      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x24a>
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e026      	b.n	8002a0c <HAL_RCC_OscConfig+0x298>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029c6:	d115      	bne.n	80029f4 <HAL_RCC_OscConfig+0x280>
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a02      	ldr	r2, [pc, #8]	@ (80029e4 <HAL_RCC_OscConfig+0x270>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x298>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08006480 	.word	0x08006480
 80029ec:	20000004 	.word	0x20000004
 80029f0:	20000028 	.word	0x20000028
 80029f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b9d      	ldr	r3, [pc, #628]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9c      	ldr	r2, [pc, #624]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff f94e 	bl	8001cb4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7ff f94a 	bl	8001cb4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e276      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2e:	4b92      	ldr	r3, [pc, #584]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x2a8>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f93a 	bl	8001cb4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f936 	bl	8001cb4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e262      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d0>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d060      	beq.n	8002b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_OscConfig+0x310>
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d119      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d116      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a84:	4b7c      	ldr	r3, [pc, #496]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x328>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e23f      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	4973      	ldr	r1, [pc, #460]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab0:	e040      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aba:	4b6f      	ldr	r3, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f8f5 	bl	8001cb4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f8f1 	bl	8001cb4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e21d      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae0:	4b65      	ldr	r3, [pc, #404]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b62      	ldr	r3, [pc, #392]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	495f      	ldr	r1, [pc, #380]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
 8002b00:	e018      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b5d      	ldr	r3, [pc, #372]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5c      	ldr	r2, [pc, #368]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7ff f8d1 	bl	8001cb4 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b16:	f7ff f8cd 	bl	8001cb4 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1f9      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b28:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03c      	beq.n	8002bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b48:	4b4b      	ldr	r3, [pc, #300]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff f8ac 	bl	8001cb4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff f8a8 	bl	8001cb4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1d4      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x3ec>
 8002b80:	e01b      	b.n	8002bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b82:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b88:	4a3b      	ldr	r2, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7ff f88f 	bl	8001cb4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f88b 	bl	8001cb4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1b7      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bac:	4b32      	ldr	r3, [pc, #200]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a6 	beq.w	8002d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bdc:	4a26      	ldr	r2, [pc, #152]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_RCC_OscConfig+0x508>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d118      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <HAL_RCC_OscConfig+0x508>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <HAL_RCC_OscConfig+0x508>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0c:	f7ff f852 	bl	8001cb4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7ff f84e 	bl	8001cb4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e17a      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <HAL_RCC_OscConfig+0x508>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4d8>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c4a:	e029      	b.n	8002ca0 <HAL_RCC_OscConfig+0x52c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d115      	bne.n	8002c80 <HAL_RCC_OscConfig+0x50c>
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6a:	4a03      	ldr	r2, [pc, #12]	@ (8002c78 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c74:	e014      	b.n	8002ca0 <HAL_RCC_OscConfig+0x52c>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	4b9c      	ldr	r3, [pc, #624]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	4a9b      	ldr	r2, [pc, #620]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c90:	4b98      	ldr	r3, [pc, #608]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	4a97      	ldr	r2, [pc, #604]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7ff f804 	bl	8001cb4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7ff f800 	bl	8001cb4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e12a      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ed      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x53c>
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe ffed 	bl	8001cb4 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe ffe9 	bl	8001cb4 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e113      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ed      	bne.n	8002cde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	4a79      	ldr	r2, [pc, #484]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80fe 	beq.w	8002f1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f040 80d0 	bne.w	8002ec8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d28:	4b72      	ldr	r3, [pc, #456]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d130      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	3b01      	subs	r3, #1
 8002d48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d127      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11f      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d68:	2a07      	cmp	r2, #7
 8002d6a:	bf14      	ite	ne
 8002d6c:	2201      	movne	r2, #1
 8002d6e:	2200      	moveq	r2, #0
 8002d70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d06e      	beq.n	8002e7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d069      	beq.n	8002e78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0ad      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dcc:	f7fe ff72 	bl	8001cb4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe ff6e 	bl	8001cb4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e09a      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de6:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df2:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_OscConfig+0x784>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e02:	3a01      	subs	r2, #1
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e0c:	0212      	lsls	r2, r2, #8
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0552      	lsls	r2, r2, #21
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0652      	lsls	r2, r2, #25
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e2c:	0912      	lsrs	r2, r2, #4
 8002e2e:	0452      	lsls	r2, r2, #17
 8002e30:	430a      	orrs	r2, r1
 8002e32:	4930      	ldr	r1, [pc, #192]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e50:	f7fe ff30 	bl	8001cb4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe ff2c 	bl	8001cb4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e058      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b22      	ldr	r3, [pc, #136]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e76:	e050      	b.n	8002f1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e04f      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d148      	bne.n	8002f1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea0:	f7fe ff08 	bl	8001cb4 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe ff04 	bl	8001cb4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e030      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x734>
 8002ec6:	e028      	b.n	8002f1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d023      	beq.n	8002f16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a08      	ldr	r2, [pc, #32]	@ (8002ef4 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe feeb 	bl	8001cb4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	e00c      	b.n	8002efc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe fee7 	bl	8001cb4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d905      	bls.n	8002efc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e013      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_OscConfig+0x7b0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ec      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x7b0>)
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4905      	ldr	r1, [pc, #20]	@ (8002f24 <HAL_RCC_OscConfig+0x7b0>)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_RCC_OscConfig+0x7b4>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
 8002f14:	e001      	b.n	8002f1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	feeefffc 	.word	0xfeeefffc

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0e7      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b75      	ldr	r3, [pc, #468]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b72      	ldr	r3, [pc, #456]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4970      	ldr	r1, [pc, #448]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cf      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d908      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b63      	ldr	r3, [pc, #396]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4960      	ldr	r1, [pc, #384]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04c      	beq.n	8003044 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d121      	bne.n	8003002 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0a6      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fca:	4b54      	ldr	r3, [pc, #336]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d115      	bne.n	8003002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e09a      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e08e      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e086      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b46      	ldr	r3, [pc, #280]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4943      	ldr	r1, [pc, #268]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fe fe4e 	bl	8001cb4 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe fe4a 	bl	8001cb4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e06e      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b3a      	ldr	r3, [pc, #232]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800305c:	429a      	cmp	r2, r3
 800305e:	d208      	bcs.n	8003072 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b2e      	ldr	r3, [pc, #184]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	492b      	ldr	r1, [pc, #172]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d210      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003080:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 0207 	bic.w	r2, r3, #7
 8003088:	4923      	ldr	r1, [pc, #140]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <HAL_RCC_ClockConfig+0x1ec>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e036      	b.n	8003110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4918      	ldr	r1, [pc, #96]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030cc:	4b13      	ldr	r3, [pc, #76]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4910      	ldr	r1, [pc, #64]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e0:	f000 f824 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	490b      	ldr	r1, [pc, #44]	@ (8003120 <HAL_RCC_ClockConfig+0x1f4>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1f8>)
 80030fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003100:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_RCC_ClockConfig+0x1fc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe fd85 	bl	8001c14 <HAL_InitTick>
 800310a:	4603      	mov	r3, r0
 800310c:	72fb      	strb	r3, [r7, #11]

  return status;
 800310e:	7afb      	ldrb	r3, [r7, #11]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40022000 	.word	0x40022000
 800311c:	40021000 	.word	0x40021000
 8003120:	08006480 	.word	0x08006480
 8003124:	20000004 	.word	0x20000004
 8003128:	20000028 	.word	0x20000028

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	@ 0x24
 8003130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x34>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d121      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d11e      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800316c:	4b31      	ldr	r3, [pc, #196]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e005      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e004      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d134      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d003      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0xac>
 80031d0:	e005      	b.n	80031de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	e005      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031da:	617b      	str	r3, [r7, #20]
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	617b      	str	r3, [r7, #20]
      break;
 80031e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e4:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	3301      	adds	r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	fb03 f202 	mul.w	r2, r3, r2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	0e5b      	lsrs	r3, r3, #25
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	3301      	adds	r3, #1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003224:	69bb      	ldr	r3, [r7, #24]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	@ 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	08006498 	.word	0x08006498
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4904      	ldr	r1, [pc, #16]	@ (8003280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08006490 	.word	0x08006490

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003288:	f7ff ffda 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0adb      	lsrs	r3, r3, #11
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4904      	ldr	r1, [pc, #16]	@ (80032ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08006490 	.word	0x08006490

080032b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c8:	f7ff f9f0 	bl	80026ac <HAL_PWREx_GetVoltageRange>
 80032cc:	6178      	str	r0, [r7, #20]
 80032ce:	e014      	b.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d4:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032da:	6593      	str	r3, [r2, #88]	@ 0x58
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e8:	f7ff f9e0 	bl	80026ac <HAL_PWREx_GetVoltageRange>
 80032ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003300:	d10b      	bne.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d919      	bls.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2ba0      	cmp	r3, #160	@ 0xa0
 800330c:	d902      	bls.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330e:	2302      	movs	r3, #2
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	e013      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003314:	2301      	movs	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	e010      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	d902      	bls.n	8003326 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003320:	2303      	movs	r3, #3
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	e00a      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b80      	cmp	r3, #128	@ 0x80
 800332a:	d102      	bne.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800332c:	2302      	movs	r3, #2
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e004      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b70      	cmp	r3, #112	@ 0x70
 8003336:	d101      	bne.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003338:	2301      	movs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 0207 	bic.w	r2, r3, #7
 8003344:	4909      	ldr	r1, [pc, #36]	@ (800336c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800334c:	4b07      	ldr	r3, [pc, #28]	@ (800336c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003378:	2300      	movs	r3, #0
 800337a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800337c:	2300      	movs	r3, #0
 800337e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003388:	2b00      	cmp	r3, #0
 800338a:	d041      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003390:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003394:	d02a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003396:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800339a:	d824      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a6:	d81e      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b0:	d010      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033b2:	e018      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b4:	4b86      	ldr	r3, [pc, #536]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a85      	ldr	r2, [pc, #532]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c0:	e015      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fa8b 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d2:	e00c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3320      	adds	r3, #32
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fb76 	bl	8003acc <RCCEx_PLLSAI2_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f4:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003402:	4973      	ldr	r1, [pc, #460]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800340a:	e001      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d041      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003420:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003424:	d02a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800342a:	d824      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800342c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003436:	d81e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800343c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003440:	d010      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003444:	4b62      	ldr	r3, [pc, #392]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a61      	ldr	r2, [pc, #388]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fa43 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3320      	adds	r3, #32
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fb2e 	bl	8003acc <RCCEx_PLLSAI2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	74fb      	strb	r3, [r7, #19]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003484:	4b52      	ldr	r3, [pc, #328]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003492:	494f      	ldr	r1, [pc, #316]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800349a:	e001      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a0 	beq.w	80035ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034b2:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	4b41      	ldr	r3, [pc, #260]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	4a40      	ldr	r2, [pc, #256]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d4:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3a      	ldr	r2, [pc, #232]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f0:	f7fe fbe0 	bl	8001cb4 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f6:	e009      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe fbdc 	bl	8001cb4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	74fb      	strb	r3, [r7, #19]
        break;
 800350a:	e005      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800350c:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d15c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800351e:	4b2c      	ldr	r3, [pc, #176]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003528:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01f      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	d019      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800353c:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003548:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003558:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003568:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe fb9b 	bl	8001cb4 <HAL_GetTick>
 800357e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003580:	e00b      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe fb97 	bl	8001cb4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d902      	bls.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	74fb      	strb	r3, [r7, #19]
            break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ec      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035be:	4904      	ldr	r1, [pc, #16]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035c6:	e009      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035dc:	7c7b      	ldrb	r3, [r7, #17]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4aa0      	ldr	r2, [pc, #640]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035fa:	4b9b      	ldr	r3, [pc, #620]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	f023 0203 	bic.w	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	4997      	ldr	r1, [pc, #604]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800361c:	4b92      	ldr	r3, [pc, #584]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f023 020c 	bic.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	498f      	ldr	r1, [pc, #572]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363e:	4b8a      	ldr	r3, [pc, #552]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	4986      	ldr	r1, [pc, #536]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003660:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	497e      	ldr	r1, [pc, #504]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003682:	4b79      	ldr	r3, [pc, #484]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003690:	4975      	ldr	r1, [pc, #468]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a4:	4b70      	ldr	r3, [pc, #448]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b2:	496d      	ldr	r1, [pc, #436]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c6:	4b68      	ldr	r3, [pc, #416]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	4964      	ldr	r1, [pc, #400]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	495c      	ldr	r1, [pc, #368]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800370a:	4b57      	ldr	r3, [pc, #348]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	4953      	ldr	r1, [pc, #332]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372c:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	494b      	ldr	r1, [pc, #300]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374e:	4b46      	ldr	r3, [pc, #280]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4942      	ldr	r1, [pc, #264]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003770:	4b3d      	ldr	r3, [pc, #244]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377e:	493a      	ldr	r1, [pc, #232]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378e:	d106      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b35      	ldr	r3, [pc, #212]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a34      	ldr	r2, [pc, #208]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e011      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f898 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d028      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037ce:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4922      	ldr	r1, [pc, #136]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ec:	d106      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f8:	60d3      	str	r3, [r2, #12]
 80037fa:	e011      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f869 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d031      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382c:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	490b      	ldr	r1, [pc, #44]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384a:	d10f      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f846 	bl	80038e4 <RCCEx_PLLSAI1_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	74bb      	strb	r3, [r7, #18]
 8003866:	e013      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003868:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003874:	d10c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3320      	adds	r3, #32
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f925 	bl	8003acc <RCCEx_PLLSAI2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038aa:	490d      	ldr	r1, [pc, #52]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038cc:	4904      	ldr	r1, [pc, #16]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f2:	4b75      	ldr	r3, [pc, #468]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038fe:	4b72      	ldr	r3, [pc, #456]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0203 	and.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d10d      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
       ||
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003916:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
       ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d047      	beq.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e044      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x86>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI1_Config+0xa4>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x62>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI1_Config+0x74>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b60      	ldr	r3, [pc, #384]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b54      	ldr	r3, [pc, #336]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	430b      	orrs	r3, r1
 80039b4:	4944      	ldr	r1, [pc, #272]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d17d      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a40      	ldr	r2, [pc, #256]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fe f972 	bl	8001cb4 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fe f96e 	bl	8001cb4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e8:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d160      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	0912      	lsrs	r2, r2, #4
 8003a18:	0452      	lsls	r2, r2, #17
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	492a      	ldr	r1, [pc, #168]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
 8003a22:	e027      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d112      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2a:	4b27      	ldr	r3, [pc, #156]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	0211      	lsls	r1, r2, #8
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6912      	ldr	r2, [r2, #16]
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	430a      	orrs	r2, r1
 8003a48:	491f      	ldr	r1, [pc, #124]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]
 8003a4e:	e011      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	0211      	lsls	r1, r2, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6952      	ldr	r2, [r2, #20]
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0652      	lsls	r2, r2, #25
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	4916      	ldr	r1, [pc, #88]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a74:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a13      	ldr	r2, [pc, #76]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fe f918 	bl	8001cb4 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a88:	f7fe f914 	bl	8001cb4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
          break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	4904      	ldr	r1, [pc, #16]	@ (8003ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000

08003acc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ada:	4b6a      	ldr	r3, [pc, #424]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ae6:	4b67      	ldr	r3, [pc, #412]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0203 	and.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d10d      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
       ||
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003afe:	4b61      	ldr	r3, [pc, #388]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d047      	beq.n	8003ba2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e044      	b.n	8003ba2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d018      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0x86>
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d825      	bhi.n	8003b70 <RCCEx_PLLSAI2_Config+0xa4>
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <RCCEx_PLLSAI2_Config+0x62>
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d009      	beq.n	8003b40 <RCCEx_PLLSAI2_Config+0x74>
 8003b2c:	e020      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b2e:	4b55      	ldr	r3, [pc, #340]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3e:	e01a      	b.n	8003b76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b50      	ldr	r3, [pc, #320]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e013      	b.n	8003b7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b52:	4b4c      	ldr	r3, [pc, #304]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b5e:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b6e:	e006      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e004      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10d      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b86:	4b3f      	ldr	r3, [pc, #252]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	4939      	ldr	r1, [pc, #228]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d167      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ba8:	4b36      	ldr	r3, [pc, #216]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a35      	ldr	r2, [pc, #212]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f87e 	bl	8001cb4 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bba:	e009      	b.n	8003bd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bbc:	f7fe f87a 	bl	8001cb4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d902      	bls.n	8003bd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e005      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d14a      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be8:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	0912      	lsrs	r2, r2, #4
 8003c00:	0452      	lsls	r2, r2, #17
 8003c02:	430a      	orrs	r2, r1
 8003c04:	491f      	ldr	r1, [pc, #124]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	614b      	str	r3, [r1, #20]
 8003c0a:	e011      	b.n	8003c30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	0211      	lsls	r1, r2, #8
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6912      	ldr	r2, [r2, #16]
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0652      	lsls	r2, r2, #25
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	4916      	ldr	r1, [pc, #88]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c30:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a13      	ldr	r2, [pc, #76]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fe f83a 	bl	8001cb4 <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c42:	e009      	b.n	8003c58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c44:	f7fe f836 	bl	8001cb4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d902      	bls.n	8003c58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	73fb      	strb	r3, [r7, #15]
          break;
 8003c56:	e005      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c58:	4b0a      	ldr	r3, [pc, #40]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ef      	beq.n	8003c44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c6a:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4904      	ldr	r1, [pc, #16]	@ (8003c84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000

08003c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e095      	b.n	8003dc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003caa:	d009      	beq.n	8003cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
 8003cb2:	e005      	b.n	8003cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc ff84 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d00:	d902      	bls.n	8003d08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e002      	b.n	8003d0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d16:	d007      	beq.n	8003d28 <HAL_SPI_Init+0xa0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	ea42 0103 	orr.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	f003 0204 	and.w	r2, r3, #4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003da4:	ea42 0103 	orr.w	r1, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0d4      	b.n	8003f98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Transmit_DMA+0x2a>
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0cc      	b.n	8003f98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_SPI_Transmit_DMA+0x3c>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0c5      	b.n	8003f98 <HAL_SPI_Transmit_DMA+0x1c8>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5e:	d10f      	bne.n	8003e80 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	4a46      	ldr	r2, [pc, #280]	@ (8003fa0 <HAL_SPI_Transmit_DMA+0x1d0>)
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	4a45      	ldr	r2, [pc, #276]	@ (8003fa4 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e94:	4a44      	ldr	r2, [pc, #272]	@ (8003fa8 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003e96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003eae:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003eb8:	d82d      	bhi.n	8003f16 <HAL_SPI_Transmit_DMA+0x146>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec4:	d127      	bne.n	8003f16 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ee2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ef2:	e010      	b.n	8003f16 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f02:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	4619      	mov	r1, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f2e:	f7fe f8bb 	bl	80020a8 <HAL_DMA_Start_IT>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e023      	b.n	8003f98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d007      	beq.n	8003f6e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0220 	orr.w	r2, r2, #32
 8003f84:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0202 	orr.w	r2, r2, #2
 8003f94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	0800407b 	.word	0x0800407b
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08004097 	.word	0x08004097

08003fac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe2:	f7fd fe67 	bl	8001cb4 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d03b      	beq.n	800406e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0220 	bic.w	r2, r2, #32
 8004004:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0202 	bic.w	r2, r2, #2
 8004014:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	2164      	movs	r1, #100	@ 0x64
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f000 f97a 	bl	8004314 <SPI_EndRxTxTransaction>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7ff ffaa 	bl	8003fc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800406c:	e002      	b.n	8004074 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7fc fd2e 	bl	8000ad0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff8f 	bl	8003fac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0203 	bic.w	r2, r2, #3
 80040b2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b8:	f043 0210 	orr.w	r2, r3, #16
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ff79 	bl	8003fc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040e8:	f7fd fde4 	bl	8001cb4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4413      	add	r3, r2
 80040f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040f8:	f7fd fddc 	bl	8001cb4 <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040fe:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	015b      	lsls	r3, r3, #5
 8004104:	0d1b      	lsrs	r3, r3, #20
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410e:	e054      	b.n	80041ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d050      	beq.n	80041ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004118:	f7fd fdcc 	bl	8001cb4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d902      	bls.n	800412e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d13d      	bne.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800413c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004146:	d111      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004150:	d004      	beq.n	800415c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d107      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004174:	d10f      	bne.n	8004196 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e017      	b.n	80041da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d19b      	bne.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000004 	.word	0x20000004

080041e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041fa:	f7fd fd5b 	bl	8001cb4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	4413      	add	r3, r2
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800420a:	f7fd fd53 	bl	8001cb4 <HAL_GetTick>
 800420e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004218:	4b3d      	ldr	r3, [pc, #244]	@ (8004310 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00da      	lsls	r2, r3, #3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	0d1b      	lsrs	r3, r3, #20
 8004228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004230:	e060      	b.n	80042f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004238:	d107      	bne.n	800424a <SPI_WaitFifoStateUntilTimeout+0x62>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004248:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d050      	beq.n	80042f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004252:	f7fd fd2f 	bl	8001cb4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	429a      	cmp	r2, r3
 8004260:	d902      	bls.n	8004268 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d13d      	bne.n	80042e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004276:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004280:	d111      	bne.n	80042a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428a:	d004      	beq.n	8004296 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004294:	d107      	bne.n	80042a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ae:	d10f      	bne.n	80042d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e010      	b.n	8004306 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d196      	bne.n	8004232 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3728      	adds	r7, #40	@ 0x28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000004 	.word	0x20000004

08004314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff ff5b 	bl	80041e8 <SPI_WaitFifoStateUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e027      	b.n	8004398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	@ 0x80
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff fec0 	bl	80040d8 <SPI_WaitFlagStateUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e014      	b.n	8004398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff ff34 	bl	80041e8 <SPI_WaitFifoStateUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e000      	b.n	8004398 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e049      	b.n	8004446 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc feb6 	bl	8001138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fa50 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e03c      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e02f      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e022      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d109      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e015      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start+0x8c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e008      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e09c      	b.n	8004630 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xb6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004504:	e023      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xc6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004514:	e01b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xd6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xe6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xf6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fd10 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	@ (8004638 <HAL_TIM_PWM_Start+0x1e8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIM_PWM_Start+0x13e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a34      	ldr	r2, [pc, #208]	@ (800463c <HAL_TIM_PWM_Start+0x1ec>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIM_PWM_Start+0x13e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a32      	ldr	r2, [pc, #200]	@ (8004640 <HAL_TIM_PWM_Start+0x1f0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIM_PWM_Start+0x13e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a31      	ldr	r2, [pc, #196]	@ (8004644 <HAL_TIM_PWM_Start+0x1f4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIM_PWM_Start+0x13e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2f      	ldr	r2, [pc, #188]	@ (8004648 <HAL_TIM_PWM_Start+0x1f8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Start+0x142>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_TIM_PWM_Start+0x144>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <HAL_TIM_PWM_Start+0x1e8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ba:	d018      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_TIM_PWM_Start+0x1fc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	@ (8004650 <HAL_TIM_PWM_Start+0x200>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004654 <HAL_TIM_PWM_Start+0x204>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a17      	ldr	r2, [pc, #92]	@ (800463c <HAL_TIM_PWM_Start+0x1ec>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_TIM_PWM_Start+0x19e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <HAL_TIM_PWM_Start+0x1f0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d115      	bne.n	800461a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	4b18      	ldr	r3, [pc, #96]	@ (8004658 <HAL_TIM_PWM_Start+0x208>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d015      	beq.n	800462c <HAL_TIM_PWM_Start+0x1dc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004606:	d011      	beq.n	800462c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	e008      	b.n	800462c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e000      	b.n	800462e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40013400 	.word	0x40013400
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	00010007 	.word	0x00010007

0800465c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004676:	2302      	movs	r3, #2
 8004678:	e0ff      	b.n	800487a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b14      	cmp	r3, #20
 8004686:	f200 80f0 	bhi.w	800486a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800468a:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046e5 	.word	0x080046e5
 8004694:	0800486b 	.word	0x0800486b
 8004698:	0800486b 	.word	0x0800486b
 800469c:	0800486b 	.word	0x0800486b
 80046a0:	08004725 	.word	0x08004725
 80046a4:	0800486b 	.word	0x0800486b
 80046a8:	0800486b 	.word	0x0800486b
 80046ac:	0800486b 	.word	0x0800486b
 80046b0:	08004767 	.word	0x08004767
 80046b4:	0800486b 	.word	0x0800486b
 80046b8:	0800486b 	.word	0x0800486b
 80046bc:	0800486b 	.word	0x0800486b
 80046c0:	080047a7 	.word	0x080047a7
 80046c4:	0800486b 	.word	0x0800486b
 80046c8:	0800486b 	.word	0x0800486b
 80046cc:	0800486b 	.word	0x0800486b
 80046d0:	080047e9 	.word	0x080047e9
 80046d4:	0800486b 	.word	0x0800486b
 80046d8:	0800486b 	.word	0x0800486b
 80046dc:	0800486b 	.word	0x0800486b
 80046e0:	08004829 	.word	0x08004829
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f970 	bl	80049d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0208 	orr.w	r2, r2, #8
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0204 	bic.w	r2, r2, #4
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	619a      	str	r2, [r3, #24]
      break;
 8004722:	e0a5      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f9e0 	bl	8004af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6999      	ldr	r1, [r3, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	021a      	lsls	r2, r3, #8
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	619a      	str	r2, [r3, #24]
      break;
 8004764:	e084      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa49 	bl	8004c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0208 	orr.w	r2, r2, #8
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0204 	bic.w	r2, r2, #4
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	61da      	str	r2, [r3, #28]
      break;
 80047a4:	e064      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fab1 	bl	8004d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	61da      	str	r2, [r3, #28]
      break;
 80047e6:	e043      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fafa 	bl	8004de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0204 	bic.w	r2, r2, #4
 8004812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004826:	e023      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fb3e 	bl	8004eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004868:	e002      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
      break;
 800486e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a46      	ldr	r2, [pc, #280]	@ (80049b0 <TIM_Base_SetConfig+0x12c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a2:	d00f      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a43      	ldr	r2, [pc, #268]	@ (80049b4 <TIM_Base_SetConfig+0x130>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a42      	ldr	r2, [pc, #264]	@ (80049b8 <TIM_Base_SetConfig+0x134>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a41      	ldr	r2, [pc, #260]	@ (80049bc <TIM_Base_SetConfig+0x138>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a40      	ldr	r2, [pc, #256]	@ (80049c0 <TIM_Base_SetConfig+0x13c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d108      	bne.n	80048d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a35      	ldr	r2, [pc, #212]	@ (80049b0 <TIM_Base_SetConfig+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01f      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e4:	d01b      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a32      	ldr	r2, [pc, #200]	@ (80049b4 <TIM_Base_SetConfig+0x130>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d017      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a31      	ldr	r2, [pc, #196]	@ (80049b8 <TIM_Base_SetConfig+0x134>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <TIM_Base_SetConfig+0x138>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2f      	ldr	r2, [pc, #188]	@ (80049c0 <TIM_Base_SetConfig+0x13c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2e      	ldr	r2, [pc, #184]	@ (80049c4 <TIM_Base_SetConfig+0x140>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2d      	ldr	r2, [pc, #180]	@ (80049c8 <TIM_Base_SetConfig+0x144>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2c      	ldr	r2, [pc, #176]	@ (80049cc <TIM_Base_SetConfig+0x148>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a16      	ldr	r2, [pc, #88]	@ (80049b0 <TIM_Base_SetConfig+0x12c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0xf8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <TIM_Base_SetConfig+0x13c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0xf8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a17      	ldr	r2, [pc, #92]	@ (80049c4 <TIM_Base_SetConfig+0x140>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a16      	ldr	r2, [pc, #88]	@ (80049c8 <TIM_Base_SetConfig+0x144>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0xf8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <TIM_Base_SetConfig+0x148>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	611a      	str	r2, [r3, #16]
  }
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0201 	bic.w	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a29      	ldr	r2, [pc, #164]	@ (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC1_SetConfig+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10c      	bne.n	8004a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0308 	bic.w	r3, r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <TIM_OC1_SetConfig+0x10c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <TIM_OC1_SetConfig+0x110>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <TIM_OC1_SetConfig+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	@ (8004ae8 <TIM_OC1_SetConfig+0x118>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC1_SetConfig+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <TIM_OC1_SetConfig+0x11c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d111      	bne.n	8004ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a28      	ldr	r2, [pc, #160]	@ (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x6c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <TIM_OC2_SetConfig+0x104>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10d      	bne.n	8004b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <TIM_OC2_SetConfig+0x100>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf4 <TIM_OC2_SetConfig+0x104>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <TIM_OC2_SetConfig+0x108>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	@ (8004bfc <TIM_OC2_SetConfig+0x10c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a19      	ldr	r2, [pc, #100]	@ (8004c00 <TIM_OC2_SetConfig+0x110>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d113      	bne.n	8004bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800

08004c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <TIM_OC3_SetConfig+0xfc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x6a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <TIM_OC3_SetConfig+0x100>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10d      	bne.n	8004c8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d00 <TIM_OC3_SetConfig+0xfc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <TIM_OC3_SetConfig+0x100>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <TIM_OC3_SetConfig+0x104>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	@ (8004d0c <TIM_OC3_SetConfig+0x108>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_OC3_SetConfig+0xae>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <TIM_OC3_SetConfig+0x10c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d113      	bne.n	8004cda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <TIM_OC4_SetConfig+0xc0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00f      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <TIM_OC4_SetConfig+0xc4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a16      	ldr	r2, [pc, #88]	@ (8004ddc <TIM_OC4_SetConfig+0xc8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <TIM_OC4_SetConfig+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_OC4_SetConfig+0x84>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a14      	ldr	r2, [pc, #80]	@ (8004de4 <TIM_OC4_SetConfig+0xd0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d109      	bne.n	8004dac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800

08004de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <TIM_OC5_SetConfig+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a16      	ldr	r2, [pc, #88]	@ (8004ea0 <TIM_OC5_SetConfig+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <TIM_OC5_SetConfig+0xbc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <TIM_OC5_SetConfig+0xc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC5_SetConfig+0x7a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <TIM_OC5_SetConfig+0xc4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d109      	bne.n	8004e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40013400 	.word	0x40013400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800

08004eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <TIM_OC6_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00f      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <TIM_OC6_SetConfig+0xbc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <TIM_OC6_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	@ (8004f74 <TIM_OC6_SetConfig+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC6_SetConfig+0x7c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a14      	ldr	r2, [pc, #80]	@ (8004f78 <TIM_OC6_SetConfig+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800

08004f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2201      	movs	r2, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e068      	b.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800501a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01d      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005052:	d018      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1a      	ldr	r2, [pc, #104]	@ (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a14      	ldr	r2, [pc, #80]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10c      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e040      	b.n	800516c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f914 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2224      	movs	r2, #36	@ 0x24
 8005104:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fae0 	bl	80056e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f825 	bl	8005174 <UART_SetConfig>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e01b      	b.n	800516c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb5f 	bl	8005828 <UART_CheckIdleState>
 800516a:	4603      	mov	r3, r0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b08a      	sub	sp, #40	@ 0x28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4ba4      	ldr	r3, [pc, #656]	@ (8005434 <UART_SetConfig+0x2c0>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a99      	ldr	r2, [pc, #612]	@ (8005438 <UART_SetConfig+0x2c4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051dc:	4313      	orrs	r3, r2
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a90      	ldr	r2, [pc, #576]	@ (800543c <UART_SetConfig+0x2c8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d126      	bne.n	800524c <UART_SetConfig+0xd8>
 80051fe:	4b90      	ldr	r3, [pc, #576]	@ (8005440 <UART_SetConfig+0x2cc>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d81b      	bhi.n	8005244 <UART_SetConfig+0xd0>
 800520c:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <UART_SetConfig+0xa0>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005225 	.word	0x08005225
 8005218:	08005235 	.word	0x08005235
 800521c:	0800522d 	.word	0x0800522d
 8005220:	0800523d 	.word	0x0800523d
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522a:	e116      	b.n	800545a <UART_SetConfig+0x2e6>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005232:	e112      	b.n	800545a <UART_SetConfig+0x2e6>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523a:	e10e      	b.n	800545a <UART_SetConfig+0x2e6>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005242:	e10a      	b.n	800545a <UART_SetConfig+0x2e6>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524a:	e106      	b.n	800545a <UART_SetConfig+0x2e6>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7c      	ldr	r2, [pc, #496]	@ (8005444 <UART_SetConfig+0x2d0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d138      	bne.n	80052c8 <UART_SetConfig+0x154>
 8005256:	4b7a      	ldr	r3, [pc, #488]	@ (8005440 <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b0c      	cmp	r3, #12
 8005262:	d82d      	bhi.n	80052c0 <UART_SetConfig+0x14c>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0xf8>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052a9 	.word	0x080052a9
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a6:	e0d8      	b.n	800545a <UART_SetConfig+0x2e6>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ae:	e0d4      	b.n	800545a <UART_SetConfig+0x2e6>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b6:	e0d0      	b.n	800545a <UART_SetConfig+0x2e6>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052be:	e0cc      	b.n	800545a <UART_SetConfig+0x2e6>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c6:	e0c8      	b.n	800545a <UART_SetConfig+0x2e6>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a5e      	ldr	r2, [pc, #376]	@ (8005448 <UART_SetConfig+0x2d4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d125      	bne.n	800531e <UART_SetConfig+0x1aa>
 80052d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005440 <UART_SetConfig+0x2cc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052dc:	2b30      	cmp	r3, #48	@ 0x30
 80052de:	d016      	beq.n	800530e <UART_SetConfig+0x19a>
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d818      	bhi.n	8005316 <UART_SetConfig+0x1a2>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d00a      	beq.n	80052fe <UART_SetConfig+0x18a>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d814      	bhi.n	8005316 <UART_SetConfig+0x1a2>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <UART_SetConfig+0x182>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d008      	beq.n	8005306 <UART_SetConfig+0x192>
 80052f4:	e00f      	b.n	8005316 <UART_SetConfig+0x1a2>
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fc:	e0ad      	b.n	800545a <UART_SetConfig+0x2e6>
 80052fe:	2302      	movs	r3, #2
 8005300:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005304:	e0a9      	b.n	800545a <UART_SetConfig+0x2e6>
 8005306:	2304      	movs	r3, #4
 8005308:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530c:	e0a5      	b.n	800545a <UART_SetConfig+0x2e6>
 800530e:	2308      	movs	r3, #8
 8005310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005314:	e0a1      	b.n	800545a <UART_SetConfig+0x2e6>
 8005316:	2310      	movs	r3, #16
 8005318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531c:	e09d      	b.n	800545a <UART_SetConfig+0x2e6>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4a      	ldr	r2, [pc, #296]	@ (800544c <UART_SetConfig+0x2d8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d125      	bne.n	8005374 <UART_SetConfig+0x200>
 8005328:	4b45      	ldr	r3, [pc, #276]	@ (8005440 <UART_SetConfig+0x2cc>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005332:	2bc0      	cmp	r3, #192	@ 0xc0
 8005334:	d016      	beq.n	8005364 <UART_SetConfig+0x1f0>
 8005336:	2bc0      	cmp	r3, #192	@ 0xc0
 8005338:	d818      	bhi.n	800536c <UART_SetConfig+0x1f8>
 800533a:	2b80      	cmp	r3, #128	@ 0x80
 800533c:	d00a      	beq.n	8005354 <UART_SetConfig+0x1e0>
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d814      	bhi.n	800536c <UART_SetConfig+0x1f8>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <UART_SetConfig+0x1d8>
 8005346:	2b40      	cmp	r3, #64	@ 0x40
 8005348:	d008      	beq.n	800535c <UART_SetConfig+0x1e8>
 800534a:	e00f      	b.n	800536c <UART_SetConfig+0x1f8>
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005352:	e082      	b.n	800545a <UART_SetConfig+0x2e6>
 8005354:	2302      	movs	r3, #2
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535a:	e07e      	b.n	800545a <UART_SetConfig+0x2e6>
 800535c:	2304      	movs	r3, #4
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005362:	e07a      	b.n	800545a <UART_SetConfig+0x2e6>
 8005364:	2308      	movs	r3, #8
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536a:	e076      	b.n	800545a <UART_SetConfig+0x2e6>
 800536c:	2310      	movs	r3, #16
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005372:	e072      	b.n	800545a <UART_SetConfig+0x2e6>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a35      	ldr	r2, [pc, #212]	@ (8005450 <UART_SetConfig+0x2dc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d12a      	bne.n	80053d4 <UART_SetConfig+0x260>
 800537e:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <UART_SetConfig+0x2cc>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800538c:	d01a      	beq.n	80053c4 <UART_SetConfig+0x250>
 800538e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005392:	d81b      	bhi.n	80053cc <UART_SetConfig+0x258>
 8005394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005398:	d00c      	beq.n	80053b4 <UART_SetConfig+0x240>
 800539a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800539e:	d815      	bhi.n	80053cc <UART_SetConfig+0x258>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <UART_SetConfig+0x238>
 80053a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x248>
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x258>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b2:	e052      	b.n	800545a <UART_SetConfig+0x2e6>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ba:	e04e      	b.n	800545a <UART_SetConfig+0x2e6>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c2:	e04a      	b.n	800545a <UART_SetConfig+0x2e6>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ca:	e046      	b.n	800545a <UART_SetConfig+0x2e6>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d2:	e042      	b.n	800545a <UART_SetConfig+0x2e6>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <UART_SetConfig+0x2c4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d13a      	bne.n	8005454 <UART_SetConfig+0x2e0>
 80053de:	4b18      	ldr	r3, [pc, #96]	@ (8005440 <UART_SetConfig+0x2cc>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053ec:	d01a      	beq.n	8005424 <UART_SetConfig+0x2b0>
 80053ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053f2:	d81b      	bhi.n	800542c <UART_SetConfig+0x2b8>
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f8:	d00c      	beq.n	8005414 <UART_SetConfig+0x2a0>
 80053fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fe:	d815      	bhi.n	800542c <UART_SetConfig+0x2b8>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <UART_SetConfig+0x298>
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005408:	d008      	beq.n	800541c <UART_SetConfig+0x2a8>
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0x2b8>
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005412:	e022      	b.n	800545a <UART_SetConfig+0x2e6>
 8005414:	2302      	movs	r3, #2
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e01e      	b.n	800545a <UART_SetConfig+0x2e6>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005422:	e01a      	b.n	800545a <UART_SetConfig+0x2e6>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542a:	e016      	b.n	800545a <UART_SetConfig+0x2e6>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005432:	e012      	b.n	800545a <UART_SetConfig+0x2e6>
 8005434:	efff69f3 	.word	0xefff69f3
 8005438:	40008000 	.word	0x40008000
 800543c:	40013800 	.word	0x40013800
 8005440:	40021000 	.word	0x40021000
 8005444:	40004400 	.word	0x40004400
 8005448:	40004800 	.word	0x40004800
 800544c:	40004c00 	.word	0x40004c00
 8005450:	40005000 	.word	0x40005000
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a9f      	ldr	r2, [pc, #636]	@ (80056dc <UART_SetConfig+0x568>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d17a      	bne.n	800555a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005464:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005468:	2b08      	cmp	r3, #8
 800546a:	d824      	bhi.n	80054b6 <UART_SetConfig+0x342>
 800546c:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <UART_SetConfig+0x300>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005499 	.word	0x08005499
 8005478:	080054b7 	.word	0x080054b7
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054b7 	.word	0x080054b7
 8005484:	080054a7 	.word	0x080054a7
 8005488:	080054b7 	.word	0x080054b7
 800548c:	080054b7 	.word	0x080054b7
 8005490:	080054b7 	.word	0x080054b7
 8005494:	080054af 	.word	0x080054af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7fd fede 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 800549c:	61f8      	str	r0, [r7, #28]
        break;
 800549e:	e010      	b.n	80054c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b8f      	ldr	r3, [pc, #572]	@ (80056e0 <UART_SetConfig+0x56c>)
 80054a2:	61fb      	str	r3, [r7, #28]
        break;
 80054a4:	e00d      	b.n	80054c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fd fe41 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80054aa:	61f8      	str	r0, [r7, #28]
        break;
 80054ac:	e009      	b.n	80054c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	61fb      	str	r3, [r7, #28]
        break;
 80054b4:	e005      	b.n	80054c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80fb 	beq.w	80056c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d305      	bcc.n	80054e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d903      	bls.n	80054ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054ec:	e0e8      	b.n	80056c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2200      	movs	r2, #0
 80054f2:	461c      	mov	r4, r3
 80054f4:	4615      	mov	r5, r2
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	022b      	lsls	r3, r5, #8
 8005500:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005504:	0222      	lsls	r2, r4, #8
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6849      	ldr	r1, [r1, #4]
 800550a:	0849      	lsrs	r1, r1, #1
 800550c:	2000      	movs	r0, #0
 800550e:	4688      	mov	r8, r1
 8005510:	4681      	mov	r9, r0
 8005512:	eb12 0a08 	adds.w	sl, r2, r8
 8005516:	eb43 0b09 	adc.w	fp, r3, r9
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005528:	4650      	mov	r0, sl
 800552a:	4659      	mov	r1, fp
 800552c:	f7fa fea8 	bl	8000280 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800553e:	d308      	bcc.n	8005552 <UART_SetConfig+0x3de>
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005546:	d204      	bcs.n	8005552 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	e0b6      	b.n	80056c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005558:	e0b2      	b.n	80056c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005562:	d15e      	bne.n	8005622 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005564:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005568:	2b08      	cmp	r3, #8
 800556a:	d828      	bhi.n	80055be <UART_SetConfig+0x44a>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <UART_SetConfig+0x400>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	080055bf 	.word	0x080055bf
 8005584:	080055af 	.word	0x080055af
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055bf 	.word	0x080055bf
 8005590:	080055bf 	.word	0x080055bf
 8005594:	080055b7 	.word	0x080055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7fd fe5e 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 800559c:	61f8      	str	r0, [r7, #28]
        break;
 800559e:	e014      	b.n	80055ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7fd fe70 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 80055a4:	61f8      	str	r0, [r7, #28]
        break;
 80055a6:	e010      	b.n	80055ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a8:	4b4d      	ldr	r3, [pc, #308]	@ (80056e0 <UART_SetConfig+0x56c>)
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e00d      	b.n	80055ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	f7fd fdbd 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80055b2:	61f8      	str	r0, [r7, #28]
        break;
 80055b4:	e009      	b.n	80055ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ba:	61fb      	str	r3, [r7, #28]
        break;
 80055bc:	e005      	b.n	80055ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d077      	beq.n	80056c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	005a      	lsls	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b0f      	cmp	r3, #15
 80055ea:	d916      	bls.n	800561a <UART_SetConfig+0x4a6>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f2:	d212      	bcs.n	800561a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f023 030f 	bic.w	r3, r3, #15
 80055fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	b29b      	uxth	r3, r3
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	b29a      	uxth	r2, r3
 800560a:	8afb      	ldrh	r3, [r7, #22]
 800560c:	4313      	orrs	r3, r2
 800560e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	8afa      	ldrh	r2, [r7, #22]
 8005616:	60da      	str	r2, [r3, #12]
 8005618:	e052      	b.n	80056c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005620:	e04e      	b.n	80056c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005622:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005626:	2b08      	cmp	r3, #8
 8005628:	d827      	bhi.n	800567a <UART_SetConfig+0x506>
 800562a:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <UART_SetConfig+0x4bc>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800567b 	.word	0x0800567b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800567b 	.word	0x0800567b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7fd fe00 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8005658:	61f8      	str	r0, [r7, #28]
        break;
 800565a:	e014      	b.n	8005686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fd fe12 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 8005660:	61f8      	str	r0, [r7, #28]
        break;
 8005662:	e010      	b.n	8005686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <UART_SetConfig+0x56c>)
 8005666:	61fb      	str	r3, [r7, #28]
        break;
 8005668:	e00d      	b.n	8005686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7fd fd5f 	bl	800312c <HAL_RCC_GetSysClockFreq>
 800566e:	61f8      	str	r0, [r7, #28]
        break;
 8005670:	e009      	b.n	8005686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005676:	61fb      	str	r3, [r7, #28]
        break;
 8005678:	e005      	b.n	8005686 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005684:	bf00      	nop
    }

    if (pclk != 0U)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	085a      	lsrs	r2, r3, #1
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	441a      	add	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d909      	bls.n	80056ba <UART_SetConfig+0x546>
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ac:	d205      	bcs.n	80056ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
 80056b8:	e002      	b.n	80056c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3728      	adds	r7, #40	@ 0x28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056da:	bf00      	nop
 80056dc:	40008000 	.word	0x40008000
 80056e0:	00f42400 	.word	0x00f42400

080056e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01a      	beq.n	80057fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e2:	d10a      	bne.n	80057fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	605a      	str	r2, [r3, #4]
  }
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b098      	sub	sp, #96	@ 0x60
 800582c:	af02      	add	r7, sp, #8
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005838:	f7fc fa3c 	bl	8001cb4 <HAL_GetTick>
 800583c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b08      	cmp	r3, #8
 800584a:	d12e      	bne.n	80058aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005854:	2200      	movs	r2, #0
 8005856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f88c 	bl	8005978 <UART_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d021      	beq.n	80058aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800587a:	653b      	str	r3, [r7, #80]	@ 0x50
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
 8005886:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800588a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e062      	b.n	8005970 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d149      	bne.n	800594c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f856 	bl	8005978 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03c      	beq.n	800594c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	623b      	str	r3, [r7, #32]
   return(result);
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	60fb      	str	r3, [r7, #12]
   return(result);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3308      	adds	r3, #8
 8005922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005924:	61fa      	str	r2, [r7, #28]
 8005926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	617b      	str	r3, [r7, #20]
   return(result);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e011      	b.n	8005970 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3758      	adds	r7, #88	@ 0x58
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005988:	e04f      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d04b      	beq.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005992:	f7fc f98f 	bl	8001cb4 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e04e      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d037      	beq.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b80      	cmp	r3, #128	@ 0x80
 80059be:	d034      	beq.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d031      	beq.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d110      	bne.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2208      	movs	r2, #8
 80059da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f838 	bl	8005a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2208      	movs	r2, #8
 80059e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e029      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a04:	d111      	bne.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f81e 	bl	8005a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e00f      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d0a0      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b095      	sub	sp, #84	@ 0x54
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e6      	bne.n	8005a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d118      	bne.n	8005afa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0310 	bic.w	r3, r3, #16
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6979      	ldr	r1, [r7, #20]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	613b      	str	r3, [r7, #16]
   return(result);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b0e:	bf00      	nop
 8005b10:	3754      	adds	r7, #84	@ 0x54
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <siprintf>:
 8005b1c:	b40e      	push	{r1, r2, r3}
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	b09d      	sub	sp, #116	@ 0x74
 8005b22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b24:	9002      	str	r0, [sp, #8]
 8005b26:	9006      	str	r0, [sp, #24]
 8005b28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b2c:	480a      	ldr	r0, [pc, #40]	@ (8005b58 <siprintf+0x3c>)
 8005b2e:	9107      	str	r1, [sp, #28]
 8005b30:	9104      	str	r1, [sp, #16]
 8005b32:	490a      	ldr	r1, [pc, #40]	@ (8005b5c <siprintf+0x40>)
 8005b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	2400      	movs	r4, #0
 8005b3c:	a902      	add	r1, sp, #8
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b44:	f000 f9a2 	bl	8005e8c <_svfiprintf_r>
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	701c      	strb	r4, [r3, #0]
 8005b4c:	b01d      	add	sp, #116	@ 0x74
 8005b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b52:	b003      	add	sp, #12
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000030 	.word	0x20000030
 8005b5c:	ffff0208 	.word	0xffff0208

08005b60 <memset>:
 8005b60:	4402      	add	r2, r0
 8005b62:	4603      	mov	r3, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <memset+0xa>
 8005b68:	4770      	bx	lr
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e7f9      	b.n	8005b64 <memset+0x4>

08005b70 <__errno>:
 8005b70:	4b01      	ldr	r3, [pc, #4]	@ (8005b78 <__errno+0x8>)
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000030 	.word	0x20000030

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb4 <__libc_init_array+0x38>)
 8005b80:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb8 <__libc_init_array+0x3c>)
 8005b82:	1b64      	subs	r4, r4, r5
 8005b84:	10a4      	asrs	r4, r4, #2
 8005b86:	2600      	movs	r6, #0
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005bbc <__libc_init_array+0x40>)
 8005b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005bc0 <__libc_init_array+0x44>)
 8005b90:	f000 fc64 	bl	800645c <_init>
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	2600      	movs	r6, #0
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	080300a0 	.word	0x080300a0
 8005bb8:	080300a0 	.word	0x080300a0
 8005bbc:	080300a0 	.word	0x080300a0
 8005bc0:	080300a4 	.word	0x080300a4

08005bc4 <__retarget_lock_acquire_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <__retarget_lock_release_recursive>:
 8005bc6:	4770      	bx	lr

08005bc8 <memcpy>:
 8005bc8:	440a      	add	r2, r1
 8005bca:	4291      	cmp	r1, r2
 8005bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd0:	d100      	bne.n	8005bd4 <memcpy+0xc>
 8005bd2:	4770      	bx	lr
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bde:	4291      	cmp	r1, r2
 8005be0:	d1f9      	bne.n	8005bd6 <memcpy+0xe>
 8005be2:	bd10      	pop	{r4, pc}

08005be4 <_free_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d041      	beq.n	8005c70 <_free_r+0x8c>
 8005bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf0:	1f0c      	subs	r4, r1, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bfb8      	it	lt
 8005bf6:	18e4      	addlt	r4, r4, r3
 8005bf8:	f000 f8e0 	bl	8005dbc <__malloc_lock>
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c74 <_free_r+0x90>)
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	b933      	cbnz	r3, 8005c10 <_free_r+0x2c>
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	6014      	str	r4, [r2, #0]
 8005c06:	4628      	mov	r0, r5
 8005c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c0c:	f000 b8dc 	b.w	8005dc8 <__malloc_unlock>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d908      	bls.n	8005c26 <_free_r+0x42>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	1821      	adds	r1, r4, r0
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf01      	itttt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	1809      	addeq	r1, r1, r0
 8005c22:	6021      	streq	r1, [r4, #0]
 8005c24:	e7ed      	b.n	8005c02 <_free_r+0x1e>
 8005c26:	461a      	mov	r2, r3
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b10b      	cbz	r3, 8005c30 <_free_r+0x4c>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d9fa      	bls.n	8005c26 <_free_r+0x42>
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	1850      	adds	r0, r2, r1
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d10b      	bne.n	8005c50 <_free_r+0x6c>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	4401      	add	r1, r0
 8005c3c:	1850      	adds	r0, r2, r1
 8005c3e:	4283      	cmp	r3, r0
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	d1e0      	bne.n	8005c06 <_free_r+0x22>
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	4408      	add	r0, r1
 8005c4c:	6010      	str	r0, [r2, #0]
 8005c4e:	e7da      	b.n	8005c06 <_free_r+0x22>
 8005c50:	d902      	bls.n	8005c58 <_free_r+0x74>
 8005c52:	230c      	movs	r3, #12
 8005c54:	602b      	str	r3, [r5, #0]
 8005c56:	e7d6      	b.n	8005c06 <_free_r+0x22>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	1821      	adds	r1, r4, r0
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf04      	itt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	bf04      	itt	eq
 8005c68:	1809      	addeq	r1, r1, r0
 8005c6a:	6021      	streq	r1, [r4, #0]
 8005c6c:	6054      	str	r4, [r2, #4]
 8005c6e:	e7ca      	b.n	8005c06 <_free_r+0x22>
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	200082e0 	.word	0x200082e0

08005c78 <sbrk_aligned>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005cb8 <sbrk_aligned+0x40>)
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	4605      	mov	r5, r0
 8005c82:	b911      	cbnz	r1, 8005c8a <sbrk_aligned+0x12>
 8005c84:	f000 fba4 	bl	80063d0 <_sbrk_r>
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fb9f 	bl	80063d0 <_sbrk_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d103      	bne.n	8005c9e <sbrk_aligned+0x26>
 8005c96:	f04f 34ff 	mov.w	r4, #4294967295
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d0f8      	beq.n	8005c9a <sbrk_aligned+0x22>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fb90 	bl	80063d0 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d1f2      	bne.n	8005c9a <sbrk_aligned+0x22>
 8005cb4:	e7ef      	b.n	8005c96 <sbrk_aligned+0x1e>
 8005cb6:	bf00      	nop
 8005cb8:	200082dc 	.word	0x200082dc

08005cbc <_malloc_r>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	1ccd      	adds	r5, r1, #3
 8005cc2:	f025 0503 	bic.w	r5, r5, #3
 8005cc6:	3508      	adds	r5, #8
 8005cc8:	2d0c      	cmp	r5, #12
 8005cca:	bf38      	it	cc
 8005ccc:	250c      	movcc	r5, #12
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	db01      	blt.n	8005cd8 <_malloc_r+0x1c>
 8005cd4:	42a9      	cmp	r1, r5
 8005cd6:	d904      	bls.n	8005ce2 <_malloc_r+0x26>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005db8 <_malloc_r+0xfc>
 8005ce6:	f000 f869 	bl	8005dbc <__malloc_lock>
 8005cea:	f8d8 3000 	ldr.w	r3, [r8]
 8005cee:	461c      	mov	r4, r3
 8005cf0:	bb44      	cbnz	r4, 8005d44 <_malloc_r+0x88>
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff ffbf 	bl	8005c78 <sbrk_aligned>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	d158      	bne.n	8005db2 <_malloc_r+0xf6>
 8005d00:	f8d8 4000 	ldr.w	r4, [r8]
 8005d04:	4627      	mov	r7, r4
 8005d06:	2f00      	cmp	r7, #0
 8005d08:	d143      	bne.n	8005d92 <_malloc_r+0xd6>
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d04b      	beq.n	8005da6 <_malloc_r+0xea>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	4639      	mov	r1, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	eb04 0903 	add.w	r9, r4, r3
 8005d18:	f000 fb5a 	bl	80063d0 <_sbrk_r>
 8005d1c:	4581      	cmp	r9, r0
 8005d1e:	d142      	bne.n	8005da6 <_malloc_r+0xea>
 8005d20:	6821      	ldr	r1, [r4, #0]
 8005d22:	1a6d      	subs	r5, r5, r1
 8005d24:	4629      	mov	r1, r5
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7ff ffa6 	bl	8005c78 <sbrk_aligned>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d03a      	beq.n	8005da6 <_malloc_r+0xea>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	442b      	add	r3, r5
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	f8d8 3000 	ldr.w	r3, [r8]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	bb62      	cbnz	r2, 8005d98 <_malloc_r+0xdc>
 8005d3e:	f8c8 7000 	str.w	r7, [r8]
 8005d42:	e00f      	b.n	8005d64 <_malloc_r+0xa8>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	1b52      	subs	r2, r2, r5
 8005d48:	d420      	bmi.n	8005d8c <_malloc_r+0xd0>
 8005d4a:	2a0b      	cmp	r2, #11
 8005d4c:	d917      	bls.n	8005d7e <_malloc_r+0xc2>
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	6025      	str	r5, [r4, #0]
 8005d54:	bf18      	it	ne
 8005d56:	6059      	strne	r1, [r3, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	bf08      	it	eq
 8005d5c:	f8c8 1000 	streq.w	r1, [r8]
 8005d60:	5162      	str	r2, [r4, r5]
 8005d62:	604b      	str	r3, [r1, #4]
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f82f 	bl	8005dc8 <__malloc_unlock>
 8005d6a:	f104 000b 	add.w	r0, r4, #11
 8005d6e:	1d23      	adds	r3, r4, #4
 8005d70:	f020 0007 	bic.w	r0, r0, #7
 8005d74:	1ac2      	subs	r2, r0, r3
 8005d76:	bf1c      	itt	ne
 8005d78:	1a1b      	subne	r3, r3, r0
 8005d7a:	50a3      	strne	r3, [r4, r2]
 8005d7c:	e7af      	b.n	8005cde <_malloc_r+0x22>
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	bf0c      	ite	eq
 8005d84:	f8c8 2000 	streq.w	r2, [r8]
 8005d88:	605a      	strne	r2, [r3, #4]
 8005d8a:	e7eb      	b.n	8005d64 <_malloc_r+0xa8>
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	6864      	ldr	r4, [r4, #4]
 8005d90:	e7ae      	b.n	8005cf0 <_malloc_r+0x34>
 8005d92:	463c      	mov	r4, r7
 8005d94:	687f      	ldr	r7, [r7, #4]
 8005d96:	e7b6      	b.n	8005d06 <_malloc_r+0x4a>
 8005d98:	461a      	mov	r2, r3
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d1fb      	bne.n	8005d98 <_malloc_r+0xdc>
 8005da0:	2300      	movs	r3, #0
 8005da2:	6053      	str	r3, [r2, #4]
 8005da4:	e7de      	b.n	8005d64 <_malloc_r+0xa8>
 8005da6:	230c      	movs	r3, #12
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	4630      	mov	r0, r6
 8005dac:	f000 f80c 	bl	8005dc8 <__malloc_unlock>
 8005db0:	e794      	b.n	8005cdc <_malloc_r+0x20>
 8005db2:	6005      	str	r5, [r0, #0]
 8005db4:	e7d6      	b.n	8005d64 <_malloc_r+0xa8>
 8005db6:	bf00      	nop
 8005db8:	200082e0 	.word	0x200082e0

08005dbc <__malloc_lock>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	@ (8005dc4 <__malloc_lock+0x8>)
 8005dbe:	f7ff bf01 	b.w	8005bc4 <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	200082d8 	.word	0x200082d8

08005dc8 <__malloc_unlock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	@ (8005dd0 <__malloc_unlock+0x8>)
 8005dca:	f7ff befc 	b.w	8005bc6 <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	200082d8 	.word	0x200082d8

08005dd4 <__ssputs_r>:
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	688e      	ldr	r6, [r1, #8]
 8005dda:	461f      	mov	r7, r3
 8005ddc:	42be      	cmp	r6, r7
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	4682      	mov	sl, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	4690      	mov	r8, r2
 8005de6:	d82d      	bhi.n	8005e44 <__ssputs_r+0x70>
 8005de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005df0:	d026      	beq.n	8005e40 <__ssputs_r+0x6c>
 8005df2:	6965      	ldr	r5, [r4, #20]
 8005df4:	6909      	ldr	r1, [r1, #16]
 8005df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dfa:	eba3 0901 	sub.w	r9, r3, r1
 8005dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e02:	1c7b      	adds	r3, r7, #1
 8005e04:	444b      	add	r3, r9
 8005e06:	106d      	asrs	r5, r5, #1
 8005e08:	429d      	cmp	r5, r3
 8005e0a:	bf38      	it	cc
 8005e0c:	461d      	movcc	r5, r3
 8005e0e:	0553      	lsls	r3, r2, #21
 8005e10:	d527      	bpl.n	8005e62 <__ssputs_r+0x8e>
 8005e12:	4629      	mov	r1, r5
 8005e14:	f7ff ff52 	bl	8005cbc <_malloc_r>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	b360      	cbz	r0, 8005e76 <__ssputs_r+0xa2>
 8005e1c:	6921      	ldr	r1, [r4, #16]
 8005e1e:	464a      	mov	r2, r9
 8005e20:	f7ff fed2 	bl	8005bc8 <memcpy>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	6126      	str	r6, [r4, #16]
 8005e32:	6165      	str	r5, [r4, #20]
 8005e34:	444e      	add	r6, r9
 8005e36:	eba5 0509 	sub.w	r5, r5, r9
 8005e3a:	6026      	str	r6, [r4, #0]
 8005e3c:	60a5      	str	r5, [r4, #8]
 8005e3e:	463e      	mov	r6, r7
 8005e40:	42be      	cmp	r6, r7
 8005e42:	d900      	bls.n	8005e46 <__ssputs_r+0x72>
 8005e44:	463e      	mov	r6, r7
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	f000 faa6 	bl	800639c <memmove>
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	1b9b      	subs	r3, r3, r6
 8005e54:	60a3      	str	r3, [r4, #8]
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	4433      	add	r3, r6
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e62:	462a      	mov	r2, r5
 8005e64:	f000 fac4 	bl	80063f0 <_realloc_r>
 8005e68:	4606      	mov	r6, r0
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1e0      	bne.n	8005e30 <__ssputs_r+0x5c>
 8005e6e:	6921      	ldr	r1, [r4, #16]
 8005e70:	4650      	mov	r0, sl
 8005e72:	f7ff feb7 	bl	8005be4 <_free_r>
 8005e76:	230c      	movs	r3, #12
 8005e78:	f8ca 3000 	str.w	r3, [sl]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e7e9      	b.n	8005e5e <__ssputs_r+0x8a>
	...

08005e8c <_svfiprintf_r>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	4698      	mov	r8, r3
 8005e92:	898b      	ldrh	r3, [r1, #12]
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	b09d      	sub	sp, #116	@ 0x74
 8005e98:	4607      	mov	r7, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	d510      	bpl.n	8005ec2 <_svfiprintf_r+0x36>
 8005ea0:	690b      	ldr	r3, [r1, #16]
 8005ea2:	b973      	cbnz	r3, 8005ec2 <_svfiprintf_r+0x36>
 8005ea4:	2140      	movs	r1, #64	@ 0x40
 8005ea6:	f7ff ff09 	bl	8005cbc <_malloc_r>
 8005eaa:	6028      	str	r0, [r5, #0]
 8005eac:	6128      	str	r0, [r5, #16]
 8005eae:	b930      	cbnz	r0, 8005ebe <_svfiprintf_r+0x32>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	b01d      	add	sp, #116	@ 0x74
 8005eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebe:	2340      	movs	r3, #64	@ 0x40
 8005ec0:	616b      	str	r3, [r5, #20]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed0:	2330      	movs	r3, #48	@ 0x30
 8005ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006070 <_svfiprintf_r+0x1e4>
 8005ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eda:	f04f 0901 	mov.w	r9, #1
 8005ede:	4623      	mov	r3, r4
 8005ee0:	469a      	mov	sl, r3
 8005ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee6:	b10a      	cbz	r2, 8005eec <_svfiprintf_r+0x60>
 8005ee8:	2a25      	cmp	r2, #37	@ 0x25
 8005eea:	d1f9      	bne.n	8005ee0 <_svfiprintf_r+0x54>
 8005eec:	ebba 0b04 	subs.w	fp, sl, r4
 8005ef0:	d00b      	beq.n	8005f0a <_svfiprintf_r+0x7e>
 8005ef2:	465b      	mov	r3, fp
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4638      	mov	r0, r7
 8005efa:	f7ff ff6b 	bl	8005dd4 <__ssputs_r>
 8005efe:	3001      	adds	r0, #1
 8005f00:	f000 80a7 	beq.w	8006052 <_svfiprintf_r+0x1c6>
 8005f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f06:	445a      	add	r2, fp
 8005f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 809f 	beq.w	8006052 <_svfiprintf_r+0x1c6>
 8005f14:	2300      	movs	r3, #0
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1e:	f10a 0a01 	add.w	sl, sl, #1
 8005f22:	9304      	str	r3, [sp, #16]
 8005f24:	9307      	str	r3, [sp, #28]
 8005f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f2c:	4654      	mov	r4, sl
 8005f2e:	2205      	movs	r2, #5
 8005f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f34:	484e      	ldr	r0, [pc, #312]	@ (8006070 <_svfiprintf_r+0x1e4>)
 8005f36:	f7fa f953 	bl	80001e0 <memchr>
 8005f3a:	9a04      	ldr	r2, [sp, #16]
 8005f3c:	b9d8      	cbnz	r0, 8005f76 <_svfiprintf_r+0xea>
 8005f3e:	06d0      	lsls	r0, r2, #27
 8005f40:	bf44      	itt	mi
 8005f42:	2320      	movmi	r3, #32
 8005f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f48:	0711      	lsls	r1, r2, #28
 8005f4a:	bf44      	itt	mi
 8005f4c:	232b      	movmi	r3, #43	@ 0x2b
 8005f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f52:	f89a 3000 	ldrb.w	r3, [sl]
 8005f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f58:	d015      	beq.n	8005f86 <_svfiprintf_r+0xfa>
 8005f5a:	9a07      	ldr	r2, [sp, #28]
 8005f5c:	4654      	mov	r4, sl
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f04f 0c0a 	mov.w	ip, #10
 8005f64:	4621      	mov	r1, r4
 8005f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f6a:	3b30      	subs	r3, #48	@ 0x30
 8005f6c:	2b09      	cmp	r3, #9
 8005f6e:	d94b      	bls.n	8006008 <_svfiprintf_r+0x17c>
 8005f70:	b1b0      	cbz	r0, 8005fa0 <_svfiprintf_r+0x114>
 8005f72:	9207      	str	r2, [sp, #28]
 8005f74:	e014      	b.n	8005fa0 <_svfiprintf_r+0x114>
 8005f76:	eba0 0308 	sub.w	r3, r0, r8
 8005f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	46a2      	mov	sl, r4
 8005f84:	e7d2      	b.n	8005f2c <_svfiprintf_r+0xa0>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	9103      	str	r1, [sp, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfbb      	ittet	lt
 8005f92:	425b      	neglt	r3, r3
 8005f94:	f042 0202 	orrlt.w	r2, r2, #2
 8005f98:	9307      	strge	r3, [sp, #28]
 8005f9a:	9307      	strlt	r3, [sp, #28]
 8005f9c:	bfb8      	it	lt
 8005f9e:	9204      	strlt	r2, [sp, #16]
 8005fa0:	7823      	ldrb	r3, [r4, #0]
 8005fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fa4:	d10a      	bne.n	8005fbc <_svfiprintf_r+0x130>
 8005fa6:	7863      	ldrb	r3, [r4, #1]
 8005fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005faa:	d132      	bne.n	8006012 <_svfiprintf_r+0x186>
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	1d1a      	adds	r2, r3, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	9203      	str	r2, [sp, #12]
 8005fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fb8:	3402      	adds	r4, #2
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006080 <_svfiprintf_r+0x1f4>
 8005fc0:	7821      	ldrb	r1, [r4, #0]
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	f7fa f90b 	bl	80001e0 <memchr>
 8005fca:	b138      	cbz	r0, 8005fdc <_svfiprintf_r+0x150>
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	eba0 000a 	sub.w	r0, r0, sl
 8005fd2:	2240      	movs	r2, #64	@ 0x40
 8005fd4:	4082      	lsls	r2, r0
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	3401      	adds	r4, #1
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	4824      	ldr	r0, [pc, #144]	@ (8006074 <_svfiprintf_r+0x1e8>)
 8005fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fe6:	2206      	movs	r2, #6
 8005fe8:	f7fa f8fa 	bl	80001e0 <memchr>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d036      	beq.n	800605e <_svfiprintf_r+0x1d2>
 8005ff0:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <_svfiprintf_r+0x1ec>)
 8005ff2:	bb1b      	cbnz	r3, 800603c <_svfiprintf_r+0x1b0>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	3307      	adds	r3, #7
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006002:	4433      	add	r3, r6
 8006004:	9309      	str	r3, [sp, #36]	@ 0x24
 8006006:	e76a      	b.n	8005ede <_svfiprintf_r+0x52>
 8006008:	fb0c 3202 	mla	r2, ip, r2, r3
 800600c:	460c      	mov	r4, r1
 800600e:	2001      	movs	r0, #1
 8006010:	e7a8      	b.n	8005f64 <_svfiprintf_r+0xd8>
 8006012:	2300      	movs	r3, #0
 8006014:	3401      	adds	r4, #1
 8006016:	9305      	str	r3, [sp, #20]
 8006018:	4619      	mov	r1, r3
 800601a:	f04f 0c0a 	mov.w	ip, #10
 800601e:	4620      	mov	r0, r4
 8006020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006024:	3a30      	subs	r2, #48	@ 0x30
 8006026:	2a09      	cmp	r2, #9
 8006028:	d903      	bls.n	8006032 <_svfiprintf_r+0x1a6>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0c6      	beq.n	8005fbc <_svfiprintf_r+0x130>
 800602e:	9105      	str	r1, [sp, #20]
 8006030:	e7c4      	b.n	8005fbc <_svfiprintf_r+0x130>
 8006032:	fb0c 2101 	mla	r1, ip, r1, r2
 8006036:	4604      	mov	r4, r0
 8006038:	2301      	movs	r3, #1
 800603a:	e7f0      	b.n	800601e <_svfiprintf_r+0x192>
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	462a      	mov	r2, r5
 8006042:	4b0e      	ldr	r3, [pc, #56]	@ (800607c <_svfiprintf_r+0x1f0>)
 8006044:	a904      	add	r1, sp, #16
 8006046:	4638      	mov	r0, r7
 8006048:	f3af 8000 	nop.w
 800604c:	1c42      	adds	r2, r0, #1
 800604e:	4606      	mov	r6, r0
 8006050:	d1d6      	bne.n	8006000 <_svfiprintf_r+0x174>
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	065b      	lsls	r3, r3, #25
 8006056:	f53f af2d 	bmi.w	8005eb4 <_svfiprintf_r+0x28>
 800605a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800605c:	e72c      	b.n	8005eb8 <_svfiprintf_r+0x2c>
 800605e:	ab03      	add	r3, sp, #12
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	462a      	mov	r2, r5
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <_svfiprintf_r+0x1f0>)
 8006066:	a904      	add	r1, sp, #16
 8006068:	4638      	mov	r0, r7
 800606a:	f000 f879 	bl	8006160 <_printf_i>
 800606e:	e7ed      	b.n	800604c <_svfiprintf_r+0x1c0>
 8006070:	08030064 	.word	0x08030064
 8006074:	0803006e 	.word	0x0803006e
 8006078:	00000000 	.word	0x00000000
 800607c:	08005dd5 	.word	0x08005dd5
 8006080:	0803006a 	.word	0x0803006a

08006084 <_printf_common>:
 8006084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	4616      	mov	r6, r2
 800608a:	4698      	mov	r8, r3
 800608c:	688a      	ldr	r2, [r1, #8]
 800608e:	690b      	ldr	r3, [r1, #16]
 8006090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006094:	4293      	cmp	r3, r2
 8006096:	bfb8      	it	lt
 8006098:	4613      	movlt	r3, r2
 800609a:	6033      	str	r3, [r6, #0]
 800609c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060a0:	4607      	mov	r7, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b10a      	cbz	r2, 80060aa <_printf_common+0x26>
 80060a6:	3301      	adds	r3, #1
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	0699      	lsls	r1, r3, #26
 80060ae:	bf42      	ittt	mi
 80060b0:	6833      	ldrmi	r3, [r6, #0]
 80060b2:	3302      	addmi	r3, #2
 80060b4:	6033      	strmi	r3, [r6, #0]
 80060b6:	6825      	ldr	r5, [r4, #0]
 80060b8:	f015 0506 	ands.w	r5, r5, #6
 80060bc:	d106      	bne.n	80060cc <_printf_common+0x48>
 80060be:	f104 0a19 	add.w	sl, r4, #25
 80060c2:	68e3      	ldr	r3, [r4, #12]
 80060c4:	6832      	ldr	r2, [r6, #0]
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	dc26      	bgt.n	800611a <_printf_common+0x96>
 80060cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	3b00      	subs	r3, #0
 80060d4:	bf18      	it	ne
 80060d6:	2301      	movne	r3, #1
 80060d8:	0692      	lsls	r2, r2, #26
 80060da:	d42b      	bmi.n	8006134 <_printf_common+0xb0>
 80060dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060e0:	4641      	mov	r1, r8
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c8      	blx	r9
 80060e6:	3001      	adds	r0, #1
 80060e8:	d01e      	beq.n	8006128 <_printf_common+0xa4>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	6922      	ldr	r2, [r4, #16]
 80060ee:	f003 0306 	and.w	r3, r3, #6
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	bf02      	ittt	eq
 80060f6:	68e5      	ldreq	r5, [r4, #12]
 80060f8:	6833      	ldreq	r3, [r6, #0]
 80060fa:	1aed      	subeq	r5, r5, r3
 80060fc:	68a3      	ldr	r3, [r4, #8]
 80060fe:	bf0c      	ite	eq
 8006100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006104:	2500      	movne	r5, #0
 8006106:	4293      	cmp	r3, r2
 8006108:	bfc4      	itt	gt
 800610a:	1a9b      	subgt	r3, r3, r2
 800610c:	18ed      	addgt	r5, r5, r3
 800610e:	2600      	movs	r6, #0
 8006110:	341a      	adds	r4, #26
 8006112:	42b5      	cmp	r5, r6
 8006114:	d11a      	bne.n	800614c <_printf_common+0xc8>
 8006116:	2000      	movs	r0, #0
 8006118:	e008      	b.n	800612c <_printf_common+0xa8>
 800611a:	2301      	movs	r3, #1
 800611c:	4652      	mov	r2, sl
 800611e:	4641      	mov	r1, r8
 8006120:	4638      	mov	r0, r7
 8006122:	47c8      	blx	r9
 8006124:	3001      	adds	r0, #1
 8006126:	d103      	bne.n	8006130 <_printf_common+0xac>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006130:	3501      	adds	r5, #1
 8006132:	e7c6      	b.n	80060c2 <_printf_common+0x3e>
 8006134:	18e1      	adds	r1, r4, r3
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	2030      	movs	r0, #48	@ 0x30
 800613a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800613e:	4422      	add	r2, r4
 8006140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006148:	3302      	adds	r3, #2
 800614a:	e7c7      	b.n	80060dc <_printf_common+0x58>
 800614c:	2301      	movs	r3, #1
 800614e:	4622      	mov	r2, r4
 8006150:	4641      	mov	r1, r8
 8006152:	4638      	mov	r0, r7
 8006154:	47c8      	blx	r9
 8006156:	3001      	adds	r0, #1
 8006158:	d0e6      	beq.n	8006128 <_printf_common+0xa4>
 800615a:	3601      	adds	r6, #1
 800615c:	e7d9      	b.n	8006112 <_printf_common+0x8e>
	...

08006160 <_printf_i>:
 8006160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	7e0f      	ldrb	r7, [r1, #24]
 8006166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006168:	2f78      	cmp	r7, #120	@ 0x78
 800616a:	4691      	mov	r9, r2
 800616c:	4680      	mov	r8, r0
 800616e:	460c      	mov	r4, r1
 8006170:	469a      	mov	sl, r3
 8006172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006176:	d807      	bhi.n	8006188 <_printf_i+0x28>
 8006178:	2f62      	cmp	r7, #98	@ 0x62
 800617a:	d80a      	bhi.n	8006192 <_printf_i+0x32>
 800617c:	2f00      	cmp	r7, #0
 800617e:	f000 80d1 	beq.w	8006324 <_printf_i+0x1c4>
 8006182:	2f58      	cmp	r7, #88	@ 0x58
 8006184:	f000 80b8 	beq.w	80062f8 <_printf_i+0x198>
 8006188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800618c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006190:	e03a      	b.n	8006208 <_printf_i+0xa8>
 8006192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006196:	2b15      	cmp	r3, #21
 8006198:	d8f6      	bhi.n	8006188 <_printf_i+0x28>
 800619a:	a101      	add	r1, pc, #4	@ (adr r1, 80061a0 <_printf_i+0x40>)
 800619c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a0:	080061f9 	.word	0x080061f9
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	08006189 	.word	0x08006189
 80061ac:	08006189 	.word	0x08006189
 80061b0:	08006189 	.word	0x08006189
 80061b4:	08006189 	.word	0x08006189
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006189 	.word	0x08006189
 80061c0:	08006189 	.word	0x08006189
 80061c4:	08006189 	.word	0x08006189
 80061c8:	08006189 	.word	0x08006189
 80061cc:	0800630b 	.word	0x0800630b
 80061d0:	08006237 	.word	0x08006237
 80061d4:	080062c5 	.word	0x080062c5
 80061d8:	08006189 	.word	0x08006189
 80061dc:	08006189 	.word	0x08006189
 80061e0:	0800632d 	.word	0x0800632d
 80061e4:	08006189 	.word	0x08006189
 80061e8:	08006237 	.word	0x08006237
 80061ec:	08006189 	.word	0x08006189
 80061f0:	08006189 	.word	0x08006189
 80061f4:	080062cd 	.word	0x080062cd
 80061f8:	6833      	ldr	r3, [r6, #0]
 80061fa:	1d1a      	adds	r2, r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6032      	str	r2, [r6, #0]
 8006200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006208:	2301      	movs	r3, #1
 800620a:	e09c      	b.n	8006346 <_printf_i+0x1e6>
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	6031      	str	r1, [r6, #0]
 8006214:	0606      	lsls	r6, r0, #24
 8006216:	d501      	bpl.n	800621c <_printf_i+0xbc>
 8006218:	681d      	ldr	r5, [r3, #0]
 800621a:	e003      	b.n	8006224 <_printf_i+0xc4>
 800621c:	0645      	lsls	r5, r0, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0xb8>
 8006220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006224:	2d00      	cmp	r5, #0
 8006226:	da03      	bge.n	8006230 <_printf_i+0xd0>
 8006228:	232d      	movs	r3, #45	@ 0x2d
 800622a:	426d      	negs	r5, r5
 800622c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006230:	4858      	ldr	r0, [pc, #352]	@ (8006394 <_printf_i+0x234>)
 8006232:	230a      	movs	r3, #10
 8006234:	e011      	b.n	800625a <_printf_i+0xfa>
 8006236:	6821      	ldr	r1, [r4, #0]
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	0608      	lsls	r0, r1, #24
 800623c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006240:	d402      	bmi.n	8006248 <_printf_i+0xe8>
 8006242:	0649      	lsls	r1, r1, #25
 8006244:	bf48      	it	mi
 8006246:	b2ad      	uxthmi	r5, r5
 8006248:	2f6f      	cmp	r7, #111	@ 0x6f
 800624a:	4852      	ldr	r0, [pc, #328]	@ (8006394 <_printf_i+0x234>)
 800624c:	6033      	str	r3, [r6, #0]
 800624e:	bf14      	ite	ne
 8006250:	230a      	movne	r3, #10
 8006252:	2308      	moveq	r3, #8
 8006254:	2100      	movs	r1, #0
 8006256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800625a:	6866      	ldr	r6, [r4, #4]
 800625c:	60a6      	str	r6, [r4, #8]
 800625e:	2e00      	cmp	r6, #0
 8006260:	db05      	blt.n	800626e <_printf_i+0x10e>
 8006262:	6821      	ldr	r1, [r4, #0]
 8006264:	432e      	orrs	r6, r5
 8006266:	f021 0104 	bic.w	r1, r1, #4
 800626a:	6021      	str	r1, [r4, #0]
 800626c:	d04b      	beq.n	8006306 <_printf_i+0x1a6>
 800626e:	4616      	mov	r6, r2
 8006270:	fbb5 f1f3 	udiv	r1, r5, r3
 8006274:	fb03 5711 	mls	r7, r3, r1, r5
 8006278:	5dc7      	ldrb	r7, [r0, r7]
 800627a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800627e:	462f      	mov	r7, r5
 8006280:	42bb      	cmp	r3, r7
 8006282:	460d      	mov	r5, r1
 8006284:	d9f4      	bls.n	8006270 <_printf_i+0x110>
 8006286:	2b08      	cmp	r3, #8
 8006288:	d10b      	bne.n	80062a2 <_printf_i+0x142>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	07df      	lsls	r7, r3, #31
 800628e:	d508      	bpl.n	80062a2 <_printf_i+0x142>
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	6861      	ldr	r1, [r4, #4]
 8006294:	4299      	cmp	r1, r3
 8006296:	bfde      	ittt	le
 8006298:	2330      	movle	r3, #48	@ 0x30
 800629a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800629e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062a2:	1b92      	subs	r2, r2, r6
 80062a4:	6122      	str	r2, [r4, #16]
 80062a6:	f8cd a000 	str.w	sl, [sp]
 80062aa:	464b      	mov	r3, r9
 80062ac:	aa03      	add	r2, sp, #12
 80062ae:	4621      	mov	r1, r4
 80062b0:	4640      	mov	r0, r8
 80062b2:	f7ff fee7 	bl	8006084 <_printf_common>
 80062b6:	3001      	adds	r0, #1
 80062b8:	d14a      	bne.n	8006350 <_printf_i+0x1f0>
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	b004      	add	sp, #16
 80062c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f043 0320 	orr.w	r3, r3, #32
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	4832      	ldr	r0, [pc, #200]	@ (8006398 <_printf_i+0x238>)
 80062ce:	2778      	movs	r7, #120	@ 0x78
 80062d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	061f      	lsls	r7, r3, #24
 80062da:	f851 5b04 	ldr.w	r5, [r1], #4
 80062de:	d402      	bmi.n	80062e6 <_printf_i+0x186>
 80062e0:	065f      	lsls	r7, r3, #25
 80062e2:	bf48      	it	mi
 80062e4:	b2ad      	uxthmi	r5, r5
 80062e6:	6031      	str	r1, [r6, #0]
 80062e8:	07d9      	lsls	r1, r3, #31
 80062ea:	bf44      	itt	mi
 80062ec:	f043 0320 	orrmi.w	r3, r3, #32
 80062f0:	6023      	strmi	r3, [r4, #0]
 80062f2:	b11d      	cbz	r5, 80062fc <_printf_i+0x19c>
 80062f4:	2310      	movs	r3, #16
 80062f6:	e7ad      	b.n	8006254 <_printf_i+0xf4>
 80062f8:	4826      	ldr	r0, [pc, #152]	@ (8006394 <_printf_i+0x234>)
 80062fa:	e7e9      	b.n	80062d0 <_printf_i+0x170>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f023 0320 	bic.w	r3, r3, #32
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	e7f6      	b.n	80062f4 <_printf_i+0x194>
 8006306:	4616      	mov	r6, r2
 8006308:	e7bd      	b.n	8006286 <_printf_i+0x126>
 800630a:	6833      	ldr	r3, [r6, #0]
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	6961      	ldr	r1, [r4, #20]
 8006310:	1d18      	adds	r0, r3, #4
 8006312:	6030      	str	r0, [r6, #0]
 8006314:	062e      	lsls	r6, r5, #24
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	d501      	bpl.n	800631e <_printf_i+0x1be>
 800631a:	6019      	str	r1, [r3, #0]
 800631c:	e002      	b.n	8006324 <_printf_i+0x1c4>
 800631e:	0668      	lsls	r0, r5, #25
 8006320:	d5fb      	bpl.n	800631a <_printf_i+0x1ba>
 8006322:	8019      	strh	r1, [r3, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	4616      	mov	r6, r2
 800632a:	e7bc      	b.n	80062a6 <_printf_i+0x146>
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	6032      	str	r2, [r6, #0]
 8006332:	681e      	ldr	r6, [r3, #0]
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	2100      	movs	r1, #0
 8006338:	4630      	mov	r0, r6
 800633a:	f7f9 ff51 	bl	80001e0 <memchr>
 800633e:	b108      	cbz	r0, 8006344 <_printf_i+0x1e4>
 8006340:	1b80      	subs	r0, r0, r6
 8006342:	6060      	str	r0, [r4, #4]
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	6123      	str	r3, [r4, #16]
 8006348:	2300      	movs	r3, #0
 800634a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800634e:	e7aa      	b.n	80062a6 <_printf_i+0x146>
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	4632      	mov	r2, r6
 8006354:	4649      	mov	r1, r9
 8006356:	4640      	mov	r0, r8
 8006358:	47d0      	blx	sl
 800635a:	3001      	adds	r0, #1
 800635c:	d0ad      	beq.n	80062ba <_printf_i+0x15a>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	079b      	lsls	r3, r3, #30
 8006362:	d413      	bmi.n	800638c <_printf_i+0x22c>
 8006364:	68e0      	ldr	r0, [r4, #12]
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	4298      	cmp	r0, r3
 800636a:	bfb8      	it	lt
 800636c:	4618      	movlt	r0, r3
 800636e:	e7a6      	b.n	80062be <_printf_i+0x15e>
 8006370:	2301      	movs	r3, #1
 8006372:	4632      	mov	r2, r6
 8006374:	4649      	mov	r1, r9
 8006376:	4640      	mov	r0, r8
 8006378:	47d0      	blx	sl
 800637a:	3001      	adds	r0, #1
 800637c:	d09d      	beq.n	80062ba <_printf_i+0x15a>
 800637e:	3501      	adds	r5, #1
 8006380:	68e3      	ldr	r3, [r4, #12]
 8006382:	9903      	ldr	r1, [sp, #12]
 8006384:	1a5b      	subs	r3, r3, r1
 8006386:	42ab      	cmp	r3, r5
 8006388:	dcf2      	bgt.n	8006370 <_printf_i+0x210>
 800638a:	e7eb      	b.n	8006364 <_printf_i+0x204>
 800638c:	2500      	movs	r5, #0
 800638e:	f104 0619 	add.w	r6, r4, #25
 8006392:	e7f5      	b.n	8006380 <_printf_i+0x220>
 8006394:	08030075 	.word	0x08030075
 8006398:	08030086 	.word	0x08030086

0800639c <memmove>:
 800639c:	4288      	cmp	r0, r1
 800639e:	b510      	push	{r4, lr}
 80063a0:	eb01 0402 	add.w	r4, r1, r2
 80063a4:	d902      	bls.n	80063ac <memmove+0x10>
 80063a6:	4284      	cmp	r4, r0
 80063a8:	4623      	mov	r3, r4
 80063aa:	d807      	bhi.n	80063bc <memmove+0x20>
 80063ac:	1e43      	subs	r3, r0, #1
 80063ae:	42a1      	cmp	r1, r4
 80063b0:	d008      	beq.n	80063c4 <memmove+0x28>
 80063b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ba:	e7f8      	b.n	80063ae <memmove+0x12>
 80063bc:	4402      	add	r2, r0
 80063be:	4601      	mov	r1, r0
 80063c0:	428a      	cmp	r2, r1
 80063c2:	d100      	bne.n	80063c6 <memmove+0x2a>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063ce:	e7f7      	b.n	80063c0 <memmove+0x24>

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	@ (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fa fd3c 	bl	8000e58 <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	200082d4 	.word	0x200082d4

080063f0 <_realloc_r>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	4607      	mov	r7, r0
 80063f6:	4614      	mov	r4, r2
 80063f8:	460d      	mov	r5, r1
 80063fa:	b921      	cbnz	r1, 8006406 <_realloc_r+0x16>
 80063fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006400:	4611      	mov	r1, r2
 8006402:	f7ff bc5b 	b.w	8005cbc <_malloc_r>
 8006406:	b92a      	cbnz	r2, 8006414 <_realloc_r+0x24>
 8006408:	f7ff fbec 	bl	8005be4 <_free_r>
 800640c:	4625      	mov	r5, r4
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006414:	f000 f81a 	bl	800644c <_malloc_usable_size_r>
 8006418:	4284      	cmp	r4, r0
 800641a:	4606      	mov	r6, r0
 800641c:	d802      	bhi.n	8006424 <_realloc_r+0x34>
 800641e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006422:	d8f4      	bhi.n	800640e <_realloc_r+0x1e>
 8006424:	4621      	mov	r1, r4
 8006426:	4638      	mov	r0, r7
 8006428:	f7ff fc48 	bl	8005cbc <_malloc_r>
 800642c:	4680      	mov	r8, r0
 800642e:	b908      	cbnz	r0, 8006434 <_realloc_r+0x44>
 8006430:	4645      	mov	r5, r8
 8006432:	e7ec      	b.n	800640e <_realloc_r+0x1e>
 8006434:	42b4      	cmp	r4, r6
 8006436:	4622      	mov	r2, r4
 8006438:	4629      	mov	r1, r5
 800643a:	bf28      	it	cs
 800643c:	4632      	movcs	r2, r6
 800643e:	f7ff fbc3 	bl	8005bc8 <memcpy>
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff fbcd 	bl	8005be4 <_free_r>
 800644a:	e7f1      	b.n	8006430 <_realloc_r+0x40>

0800644c <_malloc_usable_size_r>:
 800644c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006450:	1f18      	subs	r0, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	bfbc      	itt	lt
 8006456:	580b      	ldrlt	r3, [r1, r0]
 8006458:	18c0      	addlt	r0, r0, r3
 800645a:	4770      	bx	lr

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
