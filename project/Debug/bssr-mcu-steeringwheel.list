
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029be4  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030540  08030540  00032048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08030540  08030540  00031540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030548  08030548  00032048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030548  08030548  00031548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803054c  0803054c  0003154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08030550  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008238  20000048  08030598  00032048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008280  08030598  00032280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014265  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e52  00000000  00000000  000462dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00049130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e20  00000000  00000000  0004a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253b3  00000000  00000000  0004b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017296  00000000  00000000  0007052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3eca  00000000  00000000  000877c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b68b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  0016b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00170254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006944 	.word	0x08006944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08006944 	.word	0x08006944

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_DMA_Init+0x60>)
 80004fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <MX_DMA_Init+0x60>)
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	6493      	str	r3, [r2, #72]	@ 0x48
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_DMA_Init+0x60>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_DMA_Init+0x60>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000516:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <MX_DMA_Init+0x60>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6493      	str	r3, [r2, #72]	@ 0x48
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <MX_DMA_Init+0x60>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	200c      	movs	r0, #12
 8000530:	f001 fda5 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000534:	200c      	movs	r0, #12
 8000536:	f001 fdbe 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2039      	movs	r0, #57	@ 0x39
 8000540:	f001 fd9d 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000544:	2039      	movs	r0, #57	@ 0x39
 8000546:	f001 fdb6 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b57      	ldr	r3, [pc, #348]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a56      	ldr	r2, [pc, #344]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b54      	ldr	r3, [pc, #336]	@ (80006cc <MX_GPIO_Init+0x174>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b51      	ldr	r3, [pc, #324]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a50      	ldr	r2, [pc, #320]	@ (80006cc <MX_GPIO_Init+0x174>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b4e      	ldr	r3, [pc, #312]	@ (80006cc <MX_GPIO_Init+0x174>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b4b      	ldr	r3, [pc, #300]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a4a      	ldr	r2, [pc, #296]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b45      	ldr	r3, [pc, #276]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a44      	ldr	r2, [pc, #272]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b3f      	ldr	r3, [pc, #252]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a3e      	ldr	r2, [pc, #248]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b3c      	ldr	r3, [pc, #240]	@ (80006cc <MX_GPIO_Init+0x174>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4839      	ldr	r0, [pc, #228]	@ (80006d0 <MX_GPIO_Init+0x178>)
 80005ec:	f002 f976 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2186      	movs	r1, #134	@ 0x86
 80005f4:	4837      	ldr	r0, [pc, #220]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 80005f6:	f002 f971 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B2_Pin|INPUT_B3_Pin|DISPLAY_DISP_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8000600:	4834      	ldr	r0, [pc, #208]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 8000602:	f002 f96b 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	4833      	ldr	r0, [pc, #204]	@ (80006d8 <MX_GPIO_Init+0x180>)
 800060c:	f002 f966 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000610:	2310      	movs	r3, #16
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000614:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	482a      	ldr	r0, [pc, #168]	@ (80006d0 <MX_GPIO_Init+0x178>)
 8000626:	f001 ff97 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 800062a:	2320      	movs	r3, #32
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <MX_GPIO_Init+0x178>)
 8000642:	f001 ff89 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 8000646:	2301      	movs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	481e      	ldr	r0, [pc, #120]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 800065a:	f001 ff7d 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800065e:	f640 4316 	movw	r3, #3094	@ 0xc16
 8000662:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 8000678:	f001 ff6e 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x180>)
 8000694:	f001 ff60 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <MX_GPIO_Init+0x17c>)
 80006b0:	f001 ff52 	bl	8002558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	200a      	movs	r0, #10
 80006ba:	f001 fce0 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006be:	200a      	movs	r0, #10
 80006c0:	f001 fcf9 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800
 80006d4:	48000400 	.word	0x48000400
 80006d8:	48000c00 	.word	0x48000c00

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	4858      	ldr	r0, [pc, #352]	@ (8000848 <main+0x16c>)
 80006e8:	f002 f8f8 	bl	80028dc <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f001 fb54 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f8cc 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff ff30 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f8:	f7ff fefc 	bl	80004f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80006fc:	f000 f9c8 	bl	8000a90 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000700:	f000 fa00 	bl	8000b04 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000704:	f000 fb8c 	bl	8000e20 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000708:	f000 fc4c 	bl	8000fa4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800070c:	f000 fd78 	bl	8001200 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000710:	f000 fbe2 	bl	8000ed8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 5000;
 8000714:	4b4d      	ldr	r3, [pc, #308]	@ (800084c <main+0x170>)
 8000716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800071a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	484c      	ldr	r0, [pc, #304]	@ (8000850 <main+0x174>)
 8000720:	f004 fd70 	bl	8005204 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 5000;
 8000724:	4b49      	ldr	r3, [pc, #292]	@ (800084c <main+0x170>)
 8000726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	4848      	ldr	r0, [pc, #288]	@ (8000850 <main+0x174>)
 8000730:	f004 fd68 	bl	8005204 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 1000;
 8000734:	4b47      	ldr	r3, [pc, #284]	@ (8000854 <main+0x178>)
 8000736:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800073c:	2104      	movs	r1, #4
 800073e:	4846      	ldr	r0, [pc, #280]	@ (8000858 <main+0x17c>)
 8000740:	f004 fd60 	bl	8005204 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 1000;
 8000744:	4b43      	ldr	r3, [pc, #268]	@ (8000854 <main+0x178>)
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800074c:	2108      	movs	r1, #8
 800074e:	4842      	ldr	r0, [pc, #264]	@ (8000858 <main+0x17c>)
 8000750:	f004 fd58 	bl	8005204 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 8000754:	4b41      	ldr	r3, [pc, #260]	@ (800085c <main+0x180>)
 8000756:	4a42      	ldr	r2, [pc, #264]	@ (8000860 <main+0x184>)
 8000758:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 800075a:	4b40      	ldr	r3, [pc, #256]	@ (800085c <main+0x180>)
 800075c:	4a41      	ldr	r2, [pc, #260]	@ (8000864 <main+0x188>)
 800075e:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000760:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <main+0x180>)
 8000762:	2204      	movs	r2, #4
 8000764:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 8000766:	4b3d      	ldr	r3, [pc, #244]	@ (800085c <main+0x180>)
 8000768:	4a3f      	ldr	r2, [pc, #252]	@ (8000868 <main+0x18c>)
 800076a:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 800076c:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <main+0x180>)
 800076e:	2204      	movs	r2, #4
 8000770:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 8000772:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <main+0x180>)
 8000774:	4a34      	ldr	r2, [pc, #208]	@ (8000848 <main+0x16c>)
 8000776:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 8000778:	4b38      	ldr	r3, [pc, #224]	@ (800085c <main+0x180>)
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 800077e:	4b37      	ldr	r3, [pc, #220]	@ (800085c <main+0x180>)
 8000780:	4a31      	ldr	r2, [pc, #196]	@ (8000848 <main+0x16c>)
 8000782:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000784:	4b35      	ldr	r3, [pc, #212]	@ (800085c <main+0x180>)
 8000786:	2210      	movs	r2, #16
 8000788:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800078a:	4b34      	ldr	r3, [pc, #208]	@ (800085c <main+0x180>)
 800078c:	4a37      	ldr	r2, [pc, #220]	@ (800086c <main+0x190>)
 800078e:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000790:	4b37      	ldr	r3, [pc, #220]	@ (8000870 <main+0x194>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	4b31      	ldr	r3, [pc, #196]	@ (800085c <main+0x180>)
 8000796:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 8000798:	4b30      	ldr	r3, [pc, #192]	@ (800085c <main+0x180>)
 800079a:	4a36      	ldr	r2, [pc, #216]	@ (8000874 <main+0x198>)
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e00e      	b.n	80007c2 <main+0xe6>
		ls032.registers[i].str = ls032_registers_text[i];
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <main+0x180>)
 80007a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	4419      	add	r1, r3
 80007b0:	4613      	mov	r3, r2
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	4a30      	ldr	r2, [pc, #192]	@ (8000878 <main+0x19c>)
 80007b8:	4413      	add	r3, r2
 80007ba:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3301      	adds	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	d9ed      	bls.n	80007a4 <main+0xc8>

	if (LS032_Init(&ls032)) {
 80007c8:	4824      	ldr	r0, [pc, #144]	@ (800085c <main+0x180>)
 80007ca:	f000 ff65 	bl	8001698 <LS032_Init>
		// TODO: Error Handle
	}

	LS032_Clear(&ls032);
 80007ce:	4823      	ldr	r0, [pc, #140]	@ (800085c <main+0x180>)
 80007d0:	f001 f979 	bl	8001ac6 <LS032_Clear>
	LS032_DrawLogo(&ls032);
 80007d4:	4821      	ldr	r0, [pc, #132]	@ (800085c <main+0x180>)
 80007d6:	f001 f9e9 	bl	8001bac <LS032_DrawLogo>
	LS032_UpdateManual(&ls032);
 80007da:	4820      	ldr	r0, [pc, #128]	@ (800085c <main+0x180>)
 80007dc:	f001 f926 	bl	8001a2c <LS032_UpdateManual>

	// SET UP THE INPUTS LIBRARY
	inputs.sel_gpio_handles = input_sel_gpio_ports;
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <main+0x1a0>)
 80007e2:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <main+0x1a4>)
 80007e4:	611a      	str	r2, [r3, #16]
	inputs.sel_gpio_pins = input_sel_gpio_pins;
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <main+0x1a0>)
 80007e8:	4a26      	ldr	r2, [pc, #152]	@ (8000884 <main+0x1a8>)
 80007ea:	615a      	str	r2, [r3, #20]
	inputs.it_gpio_handle = INPUT_IT_GPIO_Port;
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <main+0x1a0>)
 80007ee:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <main+0x1ac>)
 80007f0:	609a      	str	r2, [r3, #8]
	inputs.it_gpio_pin = INPUT_IT_Pin;
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <main+0x1a0>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	819a      	strh	r2, [r3, #12]
	inputs.state_gpio_handle = INPUT_STATE_GPIO_Port;
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <main+0x1a0>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <main+0x16c>)
 80007fc:	601a      	str	r2, [r3, #0]
	inputs.state_gpio_pin = INPUT_STATE_Pin;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <main+0x1a0>)
 8000800:	2201      	movs	r2, #1
 8000802:	809a      	strh	r2, [r3, #4]
	inputs.states = 0xFFFF;
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <main+0x1a0>)
 8000806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080a:	831a      	strh	r2, [r3, #24]
	inputs.states_itmask = 0b0000111111111111;
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <main+0x1a0>)
 800080e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000812:	835a      	strh	r2, [r3, #26]
//	  u16ToStr(inputs.states, inputs_vis);
//	  //sprintf(inputs_vis, "%04X", inputs.states);
//	  LS032_TextReg_SetString(&ls032, 0x04, 16, inputs_vis);


	  LS032_UpdateAsync(&ls032);
 8000814:	4811      	ldr	r0, [pc, #68]	@ (800085c <main+0x180>)
 8000816:	f001 f922 	bl	8001a5e <LS032_UpdateAsync>
//	  tmp_num += 1;
//	  if (tmp_num > 99)
//		  tmp_num = 0;

	  // Delay for screen refresh
	  HAL_Delay(30);
 800081a:	201e      	movs	r0, #30
 800081c:	f001 fb30 	bl	8001e80 <HAL_Delay>

	  // Handle inputs:
	  Inputs_CheckAll(&inputs);
 8000820:	4816      	ldr	r0, [pc, #88]	@ (800087c <main+0x1a0>)
 8000822:	f000 fe2b 	bl	800147c <Inputs_CheckAll>
	  // Screen Brightness
	  if ((inputs.states >> 8) & 0b1) {
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <main+0x1a0>)
 8000828:	8b1b      	ldrh	r3, [r3, #24]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	b29b      	uxth	r3, r3
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <main+0x164>
		  TIM4->CCR3 = SCREEN_BRIGHTNESS;
 8000836:	4b05      	ldr	r3, [pc, #20]	@ (800084c <main+0x170>)
 8000838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800083c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800083e:	e7e9      	b.n	8000814 <main+0x138>
	  } else {
		  TIM4->CCR3 = 0;
 8000840:	4b02      	ldr	r3, [pc, #8]	@ (800084c <main+0x170>)
 8000842:	2200      	movs	r2, #0
 8000844:	63da      	str	r2, [r3, #60]	@ 0x3c
	  LS032_UpdateAsync(&ls032);
 8000846:	e7e5      	b.n	8000814 <main+0x138>
 8000848:	48000400 	.word	0x48000400
 800084c:	40000800 	.word	0x40000800
 8000850:	200081a8 	.word	0x200081a8
 8000854:	40000400 	.word	0x40000400
 8000858:	2000815c 	.word	0x2000815c
 800085c:	20000064 	.word	0x20000064
 8000860:	2000801c 	.word	0x2000801c
 8000864:	48000c00 	.word	0x48000c00
 8000868:	20008110 	.word	0x20008110
 800086c:	20000094 	.word	0x20000094
 8000870:	20000000 	.word	0x20000000
 8000874:	20005cb8 	.word	0x20005cb8
 8000878:	20005eb8 	.word	0x20005eb8
 800087c:	20007e98 	.word	0x20007e98
 8000880:	20000004 	.word	0x20000004
 8000884:	20000014 	.word	0x20000014
 8000888:	48000800 	.word	0x48000800

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	@ 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	@ 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 f817 	bl	80068ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008b2:	f002 f851 	bl	8002958 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 f8e2 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	2303      	movs	r3, #3
 80008d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008d6:	2308      	movs	r3, #8
 80008d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008da:	2307      	movs	r3, #7
 80008dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 f88a 	bl	8002a04 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f8c5 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2103      	movs	r1, #3
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fc52 	bl	80031bc <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800091e:	f000 f8b1 	bl	8000a84 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3758      	adds	r7, #88	@ 0x58
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Handle_SPI1_RX_START>:
		if ((in >> bit) & 0b1) str[bit] = '1';
		else str[bit] = '0';
	}
}

void Handle_SPI1_RX_START() {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	// Reset the buffer and start DMA
	memset(spi1_rx_buf, 0x00, 257);
 8000930:	f240 1201 	movw	r2, #257	@ 0x101
 8000934:	2100      	movs	r1, #0
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <Handle_SPI1_RX_START+0x20>)
 8000938:	f005 ffc9 	bl	80068ce <memset>
	HAL_SPI_Receive_DMA(&hspi1, spi1_rx_buf, 257);
 800093c:	f240 1201 	movw	r2, #257	@ 0x101
 8000940:	4902      	ldr	r1, [pc, #8]	@ (800094c <Handle_SPI1_RX_START+0x20>)
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <Handle_SPI1_RX_START+0x24>)
 8000944:	f003 fdf0 	bl	8004528 <HAL_SPI_Receive_DMA>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20007eb4 	.word	0x20007eb4
 8000950:	20007fb8 	.word	0x20007fb8

08000954 <Handle_SPI1_RX_CPLT>:

void Handle_SPI1_RX_CPLT() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
	// Stop DMA and parse the packet
	HAL_SPI_DMAStop(&hspi1);
 800095a:	4831      	ldr	r0, [pc, #196]	@ (8000a20 <Handle_SPI1_RX_CPLT+0xcc>)
 800095c:	f004 f88a 	bl	8004a74 <HAL_SPI_DMAStop>

	if (spi1_rx_buf[0] & 0b10000000) {
 8000960:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	da56      	bge.n	8000a18 <Handle_SPI1_RX_CPLT+0xc4>
		// DISPLAY CMD
		uint8_t reg  = (spi1_rx_buf[0] & 0b01111100) >> 2;
 800096a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	109b      	asrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	73fb      	strb	r3, [r7, #15]
		uint8_t prop = (spi1_rx_buf[0] & 0b00000011);
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
		switch (prop) {
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d846      	bhi.n	8000a16 <Handle_SPI1_RX_CPLT+0xc2>
 8000988:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <Handle_SPI1_RX_CPLT+0x3c>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009db 	.word	0x080009db
 8000998:	080009ef 	.word	0x080009ef
 800099c:	08000a03 	.word	0x08000a03
			case 0:
				uint16_t pos_x = (((uint16_t)spi1_rx_buf[1]) << 8) | ((uint16_t)spi1_rx_buf[2]);
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	813b      	strh	r3, [r7, #8]
				uint16_t pos_y = (((uint16_t)spi1_rx_buf[3]) << 8) | ((uint16_t)spi1_rx_buf[4]);
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	80fb      	strh	r3, [r7, #6]
				LS032_TextReg_SetPos(&ls032, reg, pos_x, pos_y);
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	893a      	ldrh	r2, [r7, #8]
 80009d0:	7bf9      	ldrb	r1, [r7, #15]
 80009d2:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <Handle_SPI1_RX_CPLT+0xd4>)
 80009d4:	f000 ff81 	bl	80018da <LS032_TextReg_SetPos>
				break;
 80009d8:	e01e      	b.n	8000a18 <Handle_SPI1_RX_CPLT+0xc4>
			case 1:
				uint8_t size = spi1_rx_buf[1];
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	72fb      	strb	r3, [r7, #11]
				LS032_TextReg_SetSize(&ls032, reg, size);
 80009e0:	7afa      	ldrb	r2, [r7, #11]
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <Handle_SPI1_RX_CPLT+0xd4>)
 80009e8:	f000 ffac 	bl	8001944 <LS032_TextReg_SetSize>
				break;
 80009ec:	e014      	b.n	8000a18 <Handle_SPI1_RX_CPLT+0xc4>
			case 2:
				uint8_t mode = spi1_rx_buf[1];
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	733b      	strb	r3, [r7, #12]
				LS032_TextReg_SetMode(&ls032, reg, mode);
 80009f4:	7b3a      	ldrb	r2, [r7, #12]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	4619      	mov	r1, r3
 80009fa:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <Handle_SPI1_RX_CPLT+0xd4>)
 80009fc:	f000 ffc5 	bl	800198a <LS032_TextReg_SetMode>
				break;
 8000a00:	e00a      	b.n	8000a18 <Handle_SPI1_RX_CPLT+0xc4>
			case 3:
				uint8_t len = spi1_rx_buf[1];
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <Handle_SPI1_RX_CPLT+0xd0>)
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	737b      	strb	r3, [r7, #13]
				LS032_TextReg_SetString(&ls032, reg, len, (char*)(spi1_rx_buf + 2));
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <Handle_SPI1_RX_CPLT+0xd8>)
 8000a0a:	7b7a      	ldrb	r2, [r7, #13]
 8000a0c:	7bf9      	ldrb	r1, [r7, #15]
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <Handle_SPI1_RX_CPLT+0xd4>)
 8000a10:	f000 ffd9 	bl	80019c6 <LS032_TextReg_SetString>
				break;
 8000a14:	e000      	b.n	8000a18 <Handle_SPI1_RX_CPLT+0xc4>
			default:
				break;
 8000a16:	bf00      	nop
		}
	} else {
		// INPUT CMD
		//TODO: Return values
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20007fb8 	.word	0x20007fb8
 8000a24:	20007eb4 	.word	0x20007eb4
 8000a28:	20000064 	.word	0x20000064
 8000a2c:	20007eb6 	.word	0x20007eb6

08000a30 <HAL_GPIO_EXTI_Callback>:

// ------------------------------------------------------------ OVERRIDE EXTERNAL INTERRUPTS -- //
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SPI1_CS_Pin) {
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d10c      	bne.n	8000a5a <HAL_GPIO_EXTI_Callback+0x2a>
	  if (HAL_GPIO_ReadPin(SPI1_CS_GPIO_Port, SPI1_CS_Pin)) {
 8000a40:	2110      	movs	r1, #16
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a44:	f001 ff32 	bl	80028ac <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_GPIO_EXTI_Callback+0x24>
		  // SPI CS was just deasserted
		  Handle_SPI1_RX_CPLT();
 8000a4e:	f7ff ff81 	bl	8000954 <Handle_SPI1_RX_CPLT>
		  Handle_SPI1_RX_START();
	  }
  } else {
      __NOP();
  }
}
 8000a52:	e003      	b.n	8000a5c <HAL_GPIO_EXTI_Callback+0x2c>
		  Handle_SPI1_RX_START();
 8000a54:	f7ff ff6a 	bl	800092c <Handle_SPI1_RX_START>
}
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_EXTI_Callback+0x2c>
      __NOP();
 8000a5a:	bf00      	nop
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000800 	.word	0x48000800

08000a68 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
//	ls032.spi_state = 0;
//	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
	LS032_TX_DMA_CPLT(&ls032);
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <HAL_SPI_TxCpltCallback+0x18>)
 8000a72:	f000 ff1e 	bl	80018b2 <LS032_TX_DMA_CPLT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000064 	.word	0x20000064

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000a96:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <MX_SPI1_Init+0x70>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000aa8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_SPI1_Init+0x6c>)
 8000ae8:	f003 fa16 	bl	8003f18 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000af2:	f7ff ffc7 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20007fb8 	.word	0x20007fb8
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <MX_SPI3_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b1c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b20:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_SPI3_Init+0x74>)
 8000b66:	f003 f9d7 	bl	8003f18 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000b70:	f7ff ff88 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000801c 	.word	0x2000801c
 8000b7c:	40003c00 	.word	0x40003c00

08000b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a58      	ldr	r2, [pc, #352]	@ (8000d00 <HAL_SPI_MspInit+0x180>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d153      	bne.n	8000c4a <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	4b58      	ldr	r3, [pc, #352]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba6:	4a57      	ldr	r2, [pc, #348]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bae:	4b55      	ldr	r3, [pc, #340]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a51      	ldr	r2, [pc, #324]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bd2:	23e0      	movs	r3, #224	@ 0xe0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f001 fcb2 	bl	8002558 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000bf4:	4b44      	ldr	r3, [pc, #272]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000bf6:	4a45      	ldr	r2, [pc, #276]	@ (8000d0c <HAL_SPI_MspInit+0x18c>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000bfa:	4b43      	ldr	r3, [pc, #268]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c00:	4b41      	ldr	r3, [pc, #260]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c06:	4b40      	ldr	r3, [pc, #256]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c12:	4b3d      	ldr	r3, [pc, #244]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c18:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c24:	4b38      	ldr	r3, [pc, #224]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c2c:	4836      	ldr	r0, [pc, #216]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c2e:	f001 fa5d 	bl	80020ec <HAL_DMA_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000c38:	f7ff ff24 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a32      	ldr	r2, [pc, #200]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c40:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c42:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <HAL_SPI_MspInit+0x188>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c48:	e056      	b.n	8000cf8 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a30      	ldr	r2, [pc, #192]	@ (8000d10 <HAL_SPI_MspInit+0x190>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d151      	bne.n	8000cf8 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c54:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c58:	4a2a      	ldr	r2, [pc, #168]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c60:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	4a24      	ldr	r2, [pc, #144]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <HAL_SPI_MspInit+0x184>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c96:	2306      	movs	r3, #6
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481c      	ldr	r0, [pc, #112]	@ (8000d14 <HAL_SPI_MspInit+0x194>)
 8000ca2:	f001 fc59 	bl	8002558 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_SPI_MspInit+0x19c>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cdc:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cde:	f001 fa05 	bl	80020ec <HAL_DMA_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8000ce8:	f7ff fecc 	bl	8000a84 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cf2:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <HAL_SPI_MspInit+0x198>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013000 	.word	0x40013000
 8000d04:	40021000 	.word	0x40021000
 8000d08:	20008080 	.word	0x20008080
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	40003c00 	.word	0x40003c00
 8000d14:	48000800 	.word	0x48000800
 8000d18:	200080c8 	.word	0x200080c8
 8000d1c:	4002041c 	.word	0x4002041c

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f001 f83f 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_CS_Pin);
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f001 fd9e 	bl	800290c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <DMA1_Channel2_IRQHandler+0x10>)
 8000dda:	f001 fadd 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20008080 	.word	0x20008080

08000de8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <DMA2_Channel2_IRQHandler+0x10>)
 8000dee:	f001 fad3 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200080c8 	.word	0x200080c8

08000dfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e44:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e4e:	2230      	movs	r2, #48	@ 0x30
 8000e50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e6c:	f004 f972 	bl	8005154 <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e76:	f7ff fe05 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000e8a:	f004 ff77 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e94:	f7ff fdf6 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	@ 0x60
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_TIM2_Init+0xb4>)
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2204      	movs	r2, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000eb0:	f004 faae 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000eba:	f7ff fde3 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ebe:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM2_Init+0xac>)
 8000ec0:	f000 f91c 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20008110 	.word	0x20008110
 8000ed0:	0061a7ff 	.word	0x0061a7ff
 8000ed4:	0030d400 	.word	0x0030d400

08000ed8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efc:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000efe:	4a28      	ldr	r2, [pc, #160]	@ (8000fa0 <MX_TIM3_Init+0xc8>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f22:	481e      	ldr	r0, [pc, #120]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f24:	f004 f916 	bl	8005154 <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f2e:	f7ff fda9 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f42:	f004 ff1b 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f4c:	f7ff fd9a 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	@ 0x60
 8000f52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000f54:	2332      	movs	r3, #50	@ 0x32
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2204      	movs	r2, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f68:	f004 fa52 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f72:	f7ff fd87 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f7e:	f004 fa47 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f88:	f7ff fd7c 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM3_Init+0xc4>)
 8000f8e:	f000 f8b5 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	@ 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000815c 	.word	0x2000815c
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fca:	4a28      	ldr	r2, [pc, #160]	@ (800106c <MX_TIM4_Init+0xc8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fdc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fe0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fee:	481e      	ldr	r0, [pc, #120]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8000ff0:	f004 f8b0 	bl	8005154 <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ffa:	f7ff fd43 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4816      	ldr	r0, [pc, #88]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800100e:	f004 feb5 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001018:	f7ff fd34 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	@ 0x60
 800101e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	@ (8001068 <MX_TIM4_Init+0xc4>)
 8001034:	f004 f9ec 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800103e:	f7ff fd21 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800104a:	f004 f9e1 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001054:	f7ff fd16 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <MX_TIM4_Init+0xc4>)
 800105a:	f000 f84f 	bl	80010fc <HAL_TIM_MspPostInit>

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200081a8 	.word	0x200081a8
 800106c:	40000800 	.word	0x40000800

08001070 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001080:	d10c      	bne.n	800109c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a1a      	ldr	r2, [pc, #104]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800109a:	e022      	b.n	80010e2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10c      	bne.n	80010c0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
}
 80010be:	e010      	b.n	80010e2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_TIM_PWM_MspInit+0x88>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10b      	bne.n	80010e2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_TIM_PWM_MspInit+0x80>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
}
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40000800 	.word	0x40000800

080010fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111c:	d11c      	bne.n	8001158 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a32      	ldr	r2, [pc, #200]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8001136:	2308      	movs	r3, #8
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4827      	ldr	r0, [pc, #156]	@ (80011f0 <HAL_TIM_MspPostInit+0xf4>)
 8001152:	f001 fa01 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001156:	e044      	b.n	80011e2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <HAL_TIM_MspPostInit+0xf8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11d      	bne.n	800119e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 800117a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800118c:	2302      	movs	r3, #2
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <HAL_TIM_MspPostInit+0xfc>)
 8001198:	f001 f9de 	bl	8002558 <HAL_GPIO_Init>
}
 800119c:	e021      	b.n	80011e2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <HAL_TIM_MspPostInit+0x100>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d11c      	bne.n	80011e2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_TIM_MspPostInit+0xf0>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 80011c0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011d2:	2302      	movs	r3, #2
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <HAL_TIM_MspPostInit+0xf4>)
 80011de:	f001 f9bb 	bl	8002558 <HAL_GPIO_Init>
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	40000400 	.word	0x40000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	40000800 	.word	0x40000800

08001200 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <MX_USART2_UART_Init+0x5c>)
 8001208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_USART2_UART_Init+0x58>)
 8001244:	f004 fe22 	bl	8005e8c <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800124e:	f7ff fc19 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200081f4 	.word	0x200081f4
 800125c:	40004400 	.word	0x40004400

08001260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0aa      	sub	sp, #168	@ 0xa8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2284      	movs	r2, #132	@ 0x84
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fb24 	bl	80068ce <memset>
  if(uartHandle->Instance==USART2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a21      	ldr	r2, [pc, #132]	@ (8001310 <HAL_UART_MspInit+0xb0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d13b      	bne.n	8001308 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001294:	2300      	movs	r3, #0
 8001296:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f002 f9af 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a8:	f7ff fbec 	bl	8000a84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	4a18      	ldr	r2, [pc, #96]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_UART_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012dc:	230c      	movs	r3, #12
 80012de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f001 f928 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	37a8      	adds	r7, #168	@ 0xa8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40004400 	.word	0x40004400
 8001314:	40021000 	.word	0x40021000

08001318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001350 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff fd6e 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <LoopForever+0x6>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	@ (8001358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <LoopForever+0xe>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	@ (8001364 <LoopForever+0x16>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f005 facb 	bl	80068e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134a:	f7ff f9c7 	bl	80006dc <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800135c:	08030550 	.word	0x08030550
  ldr r2, =_sbss
 8001360:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001364:	20008280 	.word	0x20008280

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>

0800136a <Inputs_CheckInput>:
 *      Author: Lucas Di Sarra
 */

#include "../Inc/Inputs.h"

uint8_t Inputs_CheckInput(Inputs_HandleTypeDef *inputs, uint8_t input) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
	if (input >= NUM_INPUTS) return ERROR;
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d901      	bls.n	8001380 <Inputs_CheckInput+0x16>
 800137c:	2301      	movs	r3, #1
 800137e:	e079      	b.n	8001474 <Inputs_CheckInput+0x10a>

	HAL_GPIO_WritePin(inputs->sel_gpio_handles[3], inputs->sel_gpio_pins[3], input & 0b1000);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	330c      	adds	r3, #12
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	3306      	adds	r3, #6
 800138e:	8819      	ldrh	r1, [r3, #0]
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	f001 fa9f 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[2], inputs->sel_gpio_pins[2], input & 0b0100);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	3308      	adds	r3, #8
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	3304      	adds	r3, #4
 80013ac:	8819      	ldrh	r1, [r3, #0]
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	f001 fa90 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[1], inputs->sel_gpio_pins[1], input & 0b0010);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	3304      	adds	r3, #4
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	3302      	adds	r3, #2
 80013ca:	8819      	ldrh	r1, [r3, #0]
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	f001 fa81 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], input & 0b0001);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	8819      	ldrh	r1, [r3, #0]
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	f001 fa74 	bl	80028dc <HAL_GPIO_WritePin>

	uint8_t old_state = inputs->states;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	8b1b      	ldrh	r3, [r3, #24]
 80013f8:	73fb      	strb	r3, [r7, #15]

	// Write state changes
	if (HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	889b      	ldrh	r3, [r3, #4]
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f001 fa51 	bl	80028ac <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00d      	beq.n	800142c <Inputs_CheckInput+0xc2>
		inputs->states |= (0x0001 << (uint16_t)input);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	8b1b      	ldrh	r3, [r3, #24]
 8001414:	b21a      	sxth	r2, r3
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	831a      	strh	r2, [r3, #24]
 800142a:	e00e      	b.n	800144a <Inputs_CheckInput+0xe0>
	else
		inputs->states &= 0xFFFF ^ (0x0001 << (uint16_t)input);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8b1b      	ldrh	r3, [r3, #24]
 8001430:	b21a      	sxth	r2, r3
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	b21b      	sxth	r3, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	b21b      	sxth	r3, r3
 8001440:	4013      	ands	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	831a      	strh	r2, [r3, #24]

	// Check if the masked buttons have changed
	if ((old_state & inputs->states_itmask) != (inputs->states & inputs->states_itmask))
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	8b52      	ldrh	r2, [r2, #26]
 8001450:	4013      	ands	r3, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	8b11      	ldrh	r1, [r2, #24]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	8b52      	ldrh	r2, [r2, #26]
 800145a:	400a      	ands	r2, r1
 800145c:	b292      	uxth	r2, r2
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <Inputs_CheckInput+0x108>
		HAL_GPIO_WritePin(inputs->it_gpio_handle, inputs->it_gpio_pin, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6898      	ldr	r0, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	899b      	ldrh	r3, [r3, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f001 fa35 	bl	80028dc <HAL_GPIO_WritePin>

	return SUCCESS;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Inputs_CheckAll>:
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], 0);

	return HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin);
}

uint8_t Inputs_CheckAll(Inputs_HandleTypeDef *inputs) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	inputs->states = 0xFFFF;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148a:	831a      	strh	r2, [r3, #24]
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e007      	b.n	80014a2 <Inputs_CheckAll+0x26>
		Inputs_CheckInput(inputs, i);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff67 	bl	800136a <Inputs_CheckInput>
	for (uint8_t i = 0; i < NUM_INPUTS; i++) {
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d9f4      	bls.n	8001492 <Inputs_CheckAll+0x16>
	}

	return SUCCESS;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e003      	b.n	80014c8 <delay_us+0x16>
		asm("NOP");
 80014c0:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3f6      	bcc.n	80014c0 <delay_us+0xe>
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed (FLIPPED)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 80014f2:	80fb      	strh	r3, [r7, #6]
	//gate_addr++;										// gate is 1 indexed (NORMAL)
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	b25b      	sxtb	r3, r3
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25a      	sxtb	r2, r3
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	105b      	asrs	r3, r3, #1
 8001522:	b25b      	sxtb	r3, r3
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	b25b      	sxtb	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25a      	sxtb	r2, r3
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	015b      	lsls	r3, r3, #5
 8001542:	b25b      	sxtb	r3, r3
 8001544:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b25a      	sxtb	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25a      	sxtb	r2, r3
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	b25b      	sxtb	r3, r3
 8001566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25a      	sxtb	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25a      	sxtb	r2, r3
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	b25b      	sxtb	r3, r3
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b25a      	sxtb	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	105b      	asrs	r3, r3, #1
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	10db      	asrs	r3, r3, #3
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	115b      	asrs	r3, r3, #5
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25a      	sxtb	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b25a      	sxtb	r2, r3
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	11db      	asrs	r3, r3, #7
 8001606:	b25b      	sxtb	r3, r3
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25a      	sxtb	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25a      	sxtb	r2, r3
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	125b      	asrs	r3, r3, #9
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b25b      	sxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b25a      	sxtb	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	603a      	str	r2, [r7, #0]
 8001650:	80fb      	strh	r3, [r7, #6]
 8001652:	460b      	mov	r3, r1
 8001654:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800165c:	d301      	bcc.n	8001662 <get_idx_from_pos+0x1c>
 800165e:	2301      	movs	r3, #1
 8001660:	e014      	b.n	800168c <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	2b29      	cmp	r3, #41	@ 0x29
 8001666:	d901      	bls.n	800166c <get_idx_from_pos+0x26>
 8001668:	2301      	movs	r3, #1
 800166a:	e00f      	b.n	800168c <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	461a      	mov	r2, r3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	441a      	add	r2, r3
 8001674:	0052      	lsls	r2, r2, #1
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b29a      	uxth	r2, r3
 800167c:	88bb      	ldrh	r3, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	3302      	adds	r3, #2
 8001684:	b29a      	uxth	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a8:	461a      	mov	r2, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	f005 f90f 	bl	80068ce <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	e00e      	b.n	80016d4 <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	89fa      	ldrh	r2, [r7, #14]
 80016bc:	212c      	movs	r1, #44	@ 0x2c
 80016be:	fb01 f202 	mul.w	r2, r1, r2
 80016c2:	441a      	add	r2, r3
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff09 	bl	80014e0 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	3301      	adds	r3, #1
 80016d2:	81fb      	strh	r3, [r7, #14]
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80016da:	d3ec      	bcc.n	80016b6 <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	737b      	strb	r3, [r7, #13]
 80016e0:	e030      	b.n	8001744 <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e6:	7b7b      	ldrb	r3, [r7, #13]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	2200      	movs	r2, #0
 80016ee:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001702:	7b7b      	ldrb	r3, [r7, #13]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	2200      	movs	r2, #0
 800170a:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001710:	7b7b      	ldrb	r3, [r7, #13]
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	2200      	movs	r2, #0
 8001718:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800172c:	7b7b      	ldrb	r3, [r7, #13]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	22ff      	movs	r2, #255	@ 0xff
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f005 f8c8 	bl	80068ce <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	3301      	adds	r3, #1
 8001742:	737b      	strb	r3, [r7, #13]
 8001744:	7b7b      	ldrb	r3, [r7, #13]
 8001746:	2b1f      	cmp	r3, #31
 8001748:	d9cb      	bls.n	80016e2 <LS032_Init+0x4a>
	}

	// Flag SPI as Idle
	ls032->spi_state = 0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	72da      	strb	r2, [r3, #11]

	delay_us(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f7ff feab 	bl	80014b2 <delay_us>
	// Need to clear twice for some reason
	LS032_Wipe(ls032);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9a0 	bl	8001aa2 <LS032_Wipe>
	LS032_Wipe(ls032);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f99d 	bl	8001aa2 <LS032_Wipe>
	delay_us(30);
 8001768:	201e      	movs	r0, #30
 800176a:	f7ff fea2 	bl	80014b2 <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69d8      	ldr	r0, [r3, #28]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8c1b      	ldrh	r3, [r3, #32]
 8001776:	2201      	movs	r2, #1
 8001778:	4619      	mov	r1, r3
 800177a:	f001 f8af 	bl	80028dc <HAL_GPIO_WritePin>
	delay_us(30);
 800177e:	201e      	movs	r0, #30
 8001780:	f7ff fe97 	bl	80014b2 <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	8a1b      	ldrh	r3, [r3, #16]
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f003 fd38 	bl	8005204 <HAL_TIM_PWM_Start>
	delay_us(30);
 8001794:	201e      	movs	r0, #30
 8001796:	f7ff fe8c 	bl	80014b2 <delay_us>

	return SUCCESS;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LS032_TX>:

uint8_t LS032_TX(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	7a9b      	ldrb	r3, [r3, #10]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <LS032_TX+0x1a>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e034      	b.n	8001828 <LS032_TX+0x84>

	// Clear update queue
	ls032->update_queued = 0;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6858      	ldr	r0, [r3, #4]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	891b      	ldrh	r3, [r3, #8]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4619      	mov	r1, r3
 80017d4:	f001 f882 	bl	80028dc <HAL_GPIO_WritePin>
	delay_us(3);
 80017d8:	2003      	movs	r0, #3
 80017da:	f7ff fe6a 	bl	80014b2 <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	2364      	movs	r3, #100	@ 0x64
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	f002 fc39 	bl	800405e <HAL_SPI_Transmit>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fe5e 	bl	80014b2 <delay_us>
	if (ret) {
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00c      	beq.n	8001816 <LS032_TX+0x72>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6858      	ldr	r0, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	891b      	ldrh	r3, [r3, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	f001 f868 	bl	80028dc <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	729a      	strb	r2, [r3, #10]
		return ret;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	e008      	b.n	8001828 <LS032_TX+0x84>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6858      	ldr	r0, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	891b      	ldrh	r3, [r3, #8]
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	f001 f85b 	bl	80028dc <HAL_GPIO_WritePin>

	return SUCCESS;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	7a9b      	ldrb	r3, [r3, #10]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <LS032_TX_DMA+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e02f      	b.n	80018aa <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6858      	ldr	r0, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 f83c 	bl	80028dc <HAL_GPIO_WritePin>
	delay_us(3);
 8001864:	2003      	movs	r0, #3
 8001866:	f7ff fe24 	bl	80014b2 <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fd6a 	bl	800434c <HAL_SPI_Transmit_DMA>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fe15 	bl	80014b2 <delay_us>
	if (ret) {
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00c      	beq.n	80018a8 <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6858      	ldr	r0, [r3, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	891b      	ldrh	r3, [r3, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	f001 f81f 	bl	80028dc <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	729a      	strb	r2, [r3, #10]
		return ret;
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	e000      	b.n	80018aa <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <LS032_TX_DMA_CPLT>:

uint8_t LS032_TX_DMA_CPLT(LS032_HandleTypeDef *ls032) {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	// Release the CS
	ls032->spi_state = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6858      	ldr	r0, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	891b      	ldrh	r3, [r3, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f001 f806 	bl	80028dc <HAL_GPIO_WritePin>

	return SUCCESS;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	4608      	mov	r0, r1
 80018e4:	4611      	mov	r1, r2
 80018e6:	461a      	mov	r2, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	72fb      	strb	r3, [r7, #11]
 80018ec:	460b      	mov	r3, r1
 80018ee:	813b      	strh	r3, [r7, #8]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	2b1f      	cmp	r3, #31
 80018f8:	d901      	bls.n	80018fe <LS032_TextReg_SetPos+0x24>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01c      	b.n	8001938 <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001904:	d301      	bcc.n	800190a <LS032_TextReg_SetPos+0x30>
 8001906:	2301      	movs	r3, #1
 8001908:	e016      	b.n	8001938 <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b29      	cmp	r3, #41	@ 0x29
 800190e:	d901      	bls.n	8001914 <LS032_TextReg_SetPos+0x3a>
 8001910:	2301      	movs	r3, #1
 8001912:	e011      	b.n	8001938 <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	893a      	ldrh	r2, [r7, #8]
 8001920:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
 8001950:	4613      	mov	r3, r2
 8001952:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b1f      	cmp	r3, #31
 8001958:	d901      	bls.n	800195e <LS032_TextReg_SetSize+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 800195e:	78bb      	ldrb	r3, [r7, #2]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d901      	bls.n	8001968 <LS032_TextReg_SetSize+0x24>
 8001964:	2301      	movs	r3, #1
 8001966:	e00a      	b.n	800197e <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	78ba      	ldrb	r2, [r7, #2]
 8001974:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LS032_TextReg_SetMode>:

uint8_t LS032_TextReg_SetMode(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t mode) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
 8001996:	4613      	mov	r3, r2
 8001998:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2b1f      	cmp	r3, #31
 800199e:	d901      	bls.n	80019a4 <LS032_TextReg_SetMode+0x1a>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00a      	b.n	80019ba <LS032_TextReg_SetMode+0x30>

	ls032->registers[reg].mode = mode;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	78ba      	ldrb	r2, [r7, #2]
 80019b0:	71da      	strb	r2, [r3, #7]

	ls032->update_queued = 1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LS032_TextReg_SetString>:

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	72fb      	strb	r3, [r7, #11]
 80019d4:	4613      	mov	r3, r2
 80019d6:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	2b1f      	cmp	r3, #31
 80019dc:	d901      	bls.n	80019e2 <LS032_TextReg_SetString+0x1c>
 80019de:	2301      	movs	r3, #1
 80019e0:	e020      	b.n	8001a24 <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	7aba      	ldrb	r2, [r7, #10]
 80019ee:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	22ff      	movs	r2, #255	@ 0xff
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 ff64 	bl	80068ce <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	7aba      	ldrb	r2, [r7, #10]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff86 	bl	8006928 <memcpy>

	ls032->update_queued = 1;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <LS032_UpdateManual>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if (LS032_DrawScene(ls032)) return ERROR;
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f89c 	bl	8001b72 <LS032_DrawScene>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <LS032_UpdateManual+0x18>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e008      	b.n	8001a56 <LS032_UpdateManual+0x2a>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff feee 	bl	8001830 <LS032_TX_DMA>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <LS032_UpdateAsync>:

uint8_t LS032_UpdateAsync(LS032_HandleTypeDef *ls032) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	if (ls032->update_queued == 0) return ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7adb      	ldrb	r3, [r3, #11]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <LS032_UpdateAsync+0x14>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e013      	b.n	8001a9a <LS032_UpdateAsync+0x3c>
	LS032_Clear(ls032);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f827 	bl	8001ac6 <LS032_Clear>
	if (LS032_DrawScene(ls032)) return ERROR;
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f87a 	bl	8001b72 <LS032_DrawScene>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <LS032_UpdateAsync+0x2a>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e008      	b.n	8001a9a <LS032_UpdateAsync+0x3c>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	461a      	mov	r2, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fecc 	bl	8001830 <LS032_TX_DMA>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <LS032_Wipe>:

uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 8001aaa:	2320      	movs	r3, #32
 8001aac:	81bb      	strh	r3, [r7, #12]
	return LS032_TX(ls032, clear_cmd, 2);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fe74 	bl	80017a4 <LS032_TX>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <LS032_Clear>:

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	81fb      	strh	r3, [r7, #14]
 8001ad2:	e00f      	b.n	8001af4 <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	212c      	movs	r1, #44	@ 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	222a      	movs	r2, #42	@ 0x2a
 8001ae6:	21ff      	movs	r1, #255	@ 0xff
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 fef0 	bl	80068ce <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	3301      	adds	r3, #1
 8001af2:	81fb      	strh	r3, [r7, #14]
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001afa:	d3eb      	bcc.n	8001ad4 <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001b06:	b5b0      	push	{r4, r5, r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af02      	add	r7, sp, #8
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	2b1f      	cmp	r3, #31
 8001b16:	d901      	bls.n	8001b1c <LS032_DrawRegister+0x16>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e026      	b.n	8001b6a <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001b26:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001b32:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001b3e:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001b4a:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 8001b56:	68d2      	ldr	r2, [r2, #12]
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4601      	mov	r1, r0
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8d4 	bl	8001d10 <LS032_DrawString>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}

08001b72 <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e00c      	b.n	8001b9a <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffbe 	bl	8001b06 <LS032_DrawRegister>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <LS032_DrawScene+0x22>
			return ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e006      	b.n	8001ba2 <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b1f      	cmp	r3, #31
 8001b9e:	d9ef      	bls.n	8001b80 <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff86 	bl	8001ac6 <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001bba:	2312      	movs	r3, #18
 8001bbc:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	81fb      	strh	r3, [r7, #14]
 8001bc6:	e01c      	b.n	8001c02 <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bcc:	89f9      	ldrh	r1, [r7, #14]
 8001bce:	89bb      	ldrh	r3, [r7, #12]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	212c      	movs	r1, #44	@ 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	440b      	add	r3, r1
 8001bde:	3302      	adds	r3, #2
 8001be0:	18d0      	adds	r0, r2, r3
 8001be2:	89fa      	ldrh	r2, [r7, #14]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00da      	lsls	r2, r3, #3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <LS032_DrawLogo+0x68>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2215      	movs	r2, #21
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f004 fe96 	bl	8006928 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	81fb      	strh	r3, [r7, #14]
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c08:	d3de      	bcc.n	8001bc8 <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0802dc3c 	.word	0x0802dc3c

08001c18 <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	817b      	strh	r3, [r7, #10]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	813b      	strh	r3, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 8001c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d101      	bne.n	8001c3e <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e05d      	b.n	8001cfa <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <LS032_DrawChar+0xec>)
 8001c42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 8001c52:	8a7b      	ldrh	r3, [r7, #18]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04e      	b.n	8001cfa <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d08 <LS032_DrawChar+0xf0>)
 8001c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c64:	8a7b      	ldrh	r3, [r7, #18]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <LS032_DrawChar+0xf4>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	8939      	ldrh	r1, [r7, #8]
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fce0 	bl	8001646 <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	da04      	bge.n	8001c9c <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f1c3 0318 	rsb	r3, r3, #24
 8001c9a:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001c9c:	893b      	ldrh	r3, [r7, #8]
 8001c9e:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001ca2:	7dbb      	ldrb	r3, [r7, #22]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	da04      	bge.n	8001cb2 <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001cb0:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	757b      	strb	r3, [r7, #21]
 8001cb6:	e01b      	b.n	8001cf0 <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	8a3a      	ldrh	r2, [r7, #16]
 8001cbe:	189c      	adds	r4, r3, r2
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <LS032_DrawChar+0xf0>)
 8001cc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	7d79      	ldrb	r1, [r7, #21]
 8001ccc:	7db8      	ldrb	r0, [r7, #22]
 8001cce:	fb00 f101 	mul.w	r1, r0, r1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	7dba      	ldrb	r2, [r7, #22]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f004 fe23 	bl	8006928 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	332c      	adds	r3, #44	@ 0x2c
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001cea:	7d7b      	ldrb	r3, [r7, #21]
 8001cec:	3301      	adds	r3, #1
 8001cee:	757b      	strb	r3, [r7, #21]
 8001cf0:	7d7a      	ldrb	r2, [r7, #21]
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3df      	bcc.n	8001cb8 <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000020 	.word	0x20000020
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	0802dc38 	.word	0x0802dc38

08001d10 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	817b      	strh	r3, [r7, #10]
 8001d22:	460b      	mov	r3, r1
 8001d24:	813b      	strh	r3, [r7, #8]
 8001d26:	4613      	mov	r3, r2
 8001d28:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
 8001d2e:	e025      	b.n	8001d7c <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	79f8      	ldrb	r0, [r7, #7]
 8001d3a:	893a      	ldrh	r2, [r7, #8]
 8001d3c:	8979      	ldrh	r1, [r7, #10]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4603      	mov	r3, r0
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff ff68 	bl	8001c18 <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <LS032_DrawString+0x80>)
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d54:	440b      	add	r3, r1
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <LS032_DrawString+0x84>)
 8001d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d68:	8abb      	ldrh	r3, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	4413      	add	r3, r2
 8001d74:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	75fb      	strb	r3, [r7, #23]
 8001d7c:	7dfa      	ldrb	r2, [r7, #23]
 8001d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3d4      	bcc.n	8001d30 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000020 	.word	0x20000020
 8001d94:	20000030 	.word	0x20000030

08001d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da2:	2003      	movs	r0, #3
 8001da4:	f000 f960 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da8:	200f      	movs	r0, #15
 8001daa:	f000 f80d 	bl	8001dc8 <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	e001      	b.n	8001dbe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dba:	f7fe ffb1 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ddc:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_InitTick+0x70>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_InitTick+0x6c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f96d 	bl	80020d2 <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d809      	bhi.n	8001e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f000 f937 	bl	800207e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e10:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_InitTick+0x74>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e004      	b.n	8001e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e001      	b.n	8001e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000044 	.word	0x20000044
 8001e38:	2000001c 	.word	0x2000001c
 8001e3c:	20000040 	.word	0x20000040

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000044 	.word	0x20000044
 8001e64:	2000827c 	.word	0x2000827c

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	2000827c 	.word	0x2000827c

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000044 	.word	0x20000044

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	@ (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff29 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff3e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff31 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e098      	b.n	8002230 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4b4d      	ldr	r3, [pc, #308]	@ (800223c <HAL_DMA_Init+0x150>)
 8002106:	429a      	cmp	r2, r3
 8002108:	d80f      	bhi.n	800212a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_DMA_Init+0x154>)
 8002112:	4413      	add	r3, r2
 8002114:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_DMA_Init+0x158>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a48      	ldr	r2, [pc, #288]	@ (8002248 <HAL_DMA_Init+0x15c>)
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
 8002128:	e00e      	b.n	8002148 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4b46      	ldr	r3, [pc, #280]	@ (800224c <HAL_DMA_Init+0x160>)
 8002132:	4413      	add	r3, r2
 8002134:	4a43      	ldr	r2, [pc, #268]	@ (8002244 <HAL_DMA_Init+0x158>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	009a      	lsls	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a42      	ldr	r2, [pc, #264]	@ (8002250 <HAL_DMA_Init+0x164>)
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800216c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021a2:	d039      	beq.n	8002218 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	4a27      	ldr	r2, [pc, #156]	@ (8002248 <HAL_DMA_Init+0x15c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d11a      	bne.n	80021e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <HAL_DMA_Init+0x168>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f003 031c 	and.w	r3, r3, #28
 80021ba:	210f      	movs	r1, #15
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	4924      	ldr	r1, [pc, #144]	@ (8002254 <HAL_DMA_Init+0x168>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021c8:	4b22      	ldr	r3, [pc, #136]	@ (8002254 <HAL_DMA_Init+0x168>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	f003 031c 	and.w	r3, r3, #28
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	491d      	ldr	r1, [pc, #116]	@ (8002254 <HAL_DMA_Init+0x168>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
 80021e2:	e019      	b.n	8002218 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <HAL_DMA_Init+0x16c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	f003 031c 	and.w	r3, r3, #28
 80021f0:	210f      	movs	r1, #15
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4917      	ldr	r1, [pc, #92]	@ (8002258 <HAL_DMA_Init+0x16c>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_DMA_Init+0x16c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f003 031c 	and.w	r3, r3, #28
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	4911      	ldr	r1, [pc, #68]	@ (8002258 <HAL_DMA_Init+0x16c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40020407 	.word	0x40020407
 8002240:	bffdfff8 	.word	0xbffdfff8
 8002244:	cccccccd 	.word	0xcccccccd
 8002248:	40020000 	.word	0x40020000
 800224c:	bffdfbf8 	.word	0xbffdfbf8
 8002250:	40020400 	.word	0x40020400
 8002254:	400200a8 	.word	0x400200a8
 8002258:	400204a8 	.word	0x400204a8

0800225c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_DMA_Start_IT+0x20>
 8002278:	2302      	movs	r3, #2
 800227a:	e04b      	b.n	8002314 <HAL_DMA_Start_IT+0xb8>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d13a      	bne.n	8002306 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f91e 	bl	80024f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 020e 	orr.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e00f      	b.n	80022f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 020a 	orr.w	r2, r2, #10
 80022f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e005      	b.n	8002312 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2204      	movs	r2, #4
 8002338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 020e 	bic.w	r2, r2, #14
 8002354:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f003 021c 	and.w	r2, r3, #28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	f003 031c 	and.w	r3, r3, #28
 80023b8:	2204      	movs	r2, #4
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d026      	beq.n	8002412 <HAL_DMA_IRQHandler+0x7a>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d021      	beq.n	8002412 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	f003 021c 	and.w	r2, r3, #28
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2104      	movs	r1, #4
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	2b00      	cmp	r3, #0
 8002406:	d071      	beq.n	80024ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002410:	e06c      	b.n	80024ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f003 031c 	and.w	r3, r3, #28
 800241a:	2202      	movs	r2, #2
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02e      	beq.n	8002484 <HAL_DMA_IRQHandler+0xec>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d029      	beq.n	8002484 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 020a 	bic.w	r2, r2, #10
 800244c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f003 021c 	and.w	r2, r3, #28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2102      	movs	r1, #2
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d038      	beq.n	80024ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002482:	e033      	b.n	80024ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	f003 031c 	and.w	r3, r3, #28
 800248c:	2208      	movs	r2, #8
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02a      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 020e 	bic.w	r2, r2, #14
 80024b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f003 021c 	and.w	r2, r3, #28
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
}
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	f003 021c 	and.w	r2, r3, #28
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d108      	bne.n	800253a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002538:	e007      	b.n	800254a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	60da      	str	r2, [r3, #12]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	e17f      	b.n	8002868 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8171 	beq.w	8002862 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d005      	beq.n	8002598 <HAL_GPIO_Init+0x40>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d130      	bne.n	80025fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ce:	2201      	movs	r2, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0201 	and.w	r2, r3, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b03      	cmp	r3, #3
 8002604:	d118      	bne.n	8002638 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800260c:	2201      	movs	r2, #1
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	f003 0201 	and.w	r2, r3, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d017      	beq.n	8002674 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80ac 	beq.w	8002862 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	4b5f      	ldr	r3, [pc, #380]	@ (8002888 <HAL_GPIO_Init+0x330>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270e:	4a5e      	ldr	r2, [pc, #376]	@ (8002888 <HAL_GPIO_Init+0x330>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6613      	str	r3, [r2, #96]	@ 0x60
 8002716:	4b5c      	ldr	r3, [pc, #368]	@ (8002888 <HAL_GPIO_Init+0x330>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002722:	4a5a      	ldr	r2, [pc, #360]	@ (800288c <HAL_GPIO_Init+0x334>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x242>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4f      	ldr	r2, [pc, #316]	@ (8002890 <HAL_GPIO_Init+0x338>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x23e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4e      	ldr	r2, [pc, #312]	@ (8002894 <HAL_GPIO_Init+0x33c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x23a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4d      	ldr	r2, [pc, #308]	@ (8002898 <HAL_GPIO_Init+0x340>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x236>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4c      	ldr	r2, [pc, #304]	@ (800289c <HAL_GPIO_Init+0x344>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x232>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4b      	ldr	r2, [pc, #300]	@ (80028a0 <HAL_GPIO_Init+0x348>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x22e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4a      	ldr	r2, [pc, #296]	@ (80028a4 <HAL_GPIO_Init+0x34c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x22a>
 800277e:	2306      	movs	r3, #6
 8002780:	e00c      	b.n	800279c <HAL_GPIO_Init+0x244>
 8002782:	2307      	movs	r3, #7
 8002784:	e00a      	b.n	800279c <HAL_GPIO_Init+0x244>
 8002786:	2305      	movs	r3, #5
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x244>
 800278a:	2304      	movs	r3, #4
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x244>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x244>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x244>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x244>
 800279a:	2300      	movs	r3, #0
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ac:	4937      	ldr	r1, [pc, #220]	@ (800288c <HAL_GPIO_Init+0x334>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027de:	4a32      	ldr	r2, [pc, #200]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027e4:	4b30      	ldr	r3, [pc, #192]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002808:	4a27      	ldr	r2, [pc, #156]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002832:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800285c:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	f47f ae78 	bne.w	8002568 <HAL_GPIO_Init+0x10>
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	48000400 	.word	0x48000400
 8002894:	48000800 	.word	0x48000800
 8002898:	48000c00 	.word	0x48000c00
 800289c:	48001000 	.word	0x48001000
 80028a0:	48001400 	.word	0x48001400
 80028a4:	48001800 	.word	0x48001800
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e001      	b.n	80028ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002916:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002922:	4a05      	ldr	r2, [pc, #20]	@ (8002938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe f880 	bl	8000a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <HAL_PWREx_GetVoltageRange+0x18>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002966:	d130      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002968:	4b23      	ldr	r3, [pc, #140]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002974:	d038      	beq.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800297e:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2232      	movs	r2, #50	@ 0x32
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	3301      	adds	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299c:	e002      	b.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b0:	d102      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f2      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b8:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029c4:	d110      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e00f      	b.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d6:	d007      	beq.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d8:	4b07      	ldr	r3, [pc, #28]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029e0:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40007000 	.word	0x40007000
 80029fc:	2000001c 	.word	0x2000001c
 8002a00:	431bde83 	.word	0x431bde83

08002a04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e3ca      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a16:	4b97      	ldr	r3, [pc, #604]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a20:	4b94      	ldr	r3, [pc, #592]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80e4 	beq.w	8002c00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	f040 808b 	bne.w	8002b5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f040 8087 	bne.w	8002b5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e3a2      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	4b82      	ldr	r3, [pc, #520]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_RCC_OscConfig+0x7c>
 8002a76:	4b7f      	ldr	r3, [pc, #508]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7e:	e005      	b.n	8002a8c <HAL_RCC_OscConfig+0x88>
 8002a80:	4b7c      	ldr	r3, [pc, #496]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d223      	bcs.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fd53 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e383      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa4:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a72      	ldr	r2, [pc, #456]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b70      	ldr	r3, [pc, #448]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	496d      	ldr	r1, [pc, #436]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	4968      	ldr	r1, [pc, #416]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
 8002ad6:	e025      	b.n	8002b24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4960      	ldr	r1, [pc, #384]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	495b      	ldr	r1, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fd13 	bl	8003540 <RCC_SetFlashLatencyFromMSIRange>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e343      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b24:	f000 fc4a 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b52      	ldr	r3, [pc, #328]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	4950      	ldr	r1, [pc, #320]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	4a4e      	ldr	r2, [pc, #312]	@ (8002c7c <HAL_RCC_OscConfig+0x278>)
 8002b42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b44:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCC_OscConfig+0x27c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f93d 	bl	8001dc8 <HAL_InitTick>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d052      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	e327      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d032      	beq.n	8002bca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b64:	4b43      	ldr	r3, [pc, #268]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a42      	ldr	r2, [pc, #264]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b70:	f7ff f97a 	bl	8001e68 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b78:	f7ff f976 	bl	8001e68 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e310      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b96:	4b37      	ldr	r3, [pc, #220]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a36      	ldr	r2, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4931      	ldr	r1, [pc, #196]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	492c      	ldr	r1, [pc, #176]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e01a      	b.n	8002c00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f947 	bl	8001e68 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bde:	f7ff f943 	bl	8001e68 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e2dd      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf0:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x1da>
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d074      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x21a>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d10e      	bne.n	8002c36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d064      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d160      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e2ba      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x24a>
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e026      	b.n	8002c9c <HAL_RCC_OscConfig+0x298>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_OscConfig+0x280>
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a02      	ldr	r2, [pc, #8]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e014      	b.n	8002c9c <HAL_RCC_OscConfig+0x298>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	0800695c 	.word	0x0800695c
 8002c7c:	2000001c 	.word	0x2000001c
 8002c80:	20000040 	.word	0x20000040
 8002c84:	4ba0      	ldr	r3, [pc, #640]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9f      	ldr	r2, [pc, #636]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b9d      	ldr	r3, [pc, #628]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a9c      	ldr	r2, [pc, #624]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f8e0 	bl	8001e68 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7ff f8dc 	bl	8001e68 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e276      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cbe:	4b92      	ldr	r3, [pc, #584]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x2a8>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7ff f8cc 	bl	8001e68 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7ff f8c8 	bl	8001e68 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	@ 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e262      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	4b88      	ldr	r3, [pc, #544]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2d0>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d060      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x310>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d119      	bne.n	8002d42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d116      	bne.n	8002d42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d14:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x328>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e23f      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b76      	ldr	r3, [pc, #472]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	4973      	ldr	r1, [pc, #460]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d40:	e040      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff f887 	bl	8001e68 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7ff f883 	bl	8001e68 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e21d      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d70:	4b65      	ldr	r3, [pc, #404]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b62      	ldr	r3, [pc, #392]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	495f      	ldr	r1, [pc, #380]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e018      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b5d      	ldr	r3, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5c      	ldr	r2, [pc, #368]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7ff f863 	bl	8001e68 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7ff f85f 	bl	8001e68 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1f9      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db8:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dde:	4a4a      	ldr	r2, [pc, #296]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7ff f83e 	bl	8001e68 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7ff f83a 	bl	8001e68 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1d4      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e02:	4b41      	ldr	r3, [pc, #260]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <HAL_RCC_OscConfig+0x3ec>
 8002e10:	e01b      	b.n	8002e4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e18:	4a3b      	ldr	r2, [pc, #236]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7ff f821 	bl	8001e68 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f81d 	bl	8001e68 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1b7      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e3c:	4b32      	ldr	r3, [pc, #200]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ef      	bne.n	8002e2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a6 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	4a26      	ldr	r2, [pc, #152]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e74:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <HAL_RCC_OscConfig+0x508>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d118      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e90:	4b1e      	ldr	r3, [pc, #120]	@ (8002f0c <HAL_RCC_OscConfig+0x508>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_RCC_OscConfig+0x508>)
 8002e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe ffe4 	bl	8001e68 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea4:	f7fe ffe0 	bl	8001e68 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e17a      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <HAL_RCC_OscConfig+0x508>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_RCC_OscConfig+0x4d8>
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eda:	e029      	b.n	8002f30 <HAL_RCC_OscConfig+0x52c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d115      	bne.n	8002f10 <HAL_RCC_OscConfig+0x50c>
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	4a03      	ldr	r2, [pc, #12]	@ (8002f08 <HAL_RCC_OscConfig+0x504>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f04:	e014      	b.n	8002f30 <HAL_RCC_OscConfig+0x52c>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	4b9c      	ldr	r3, [pc, #624]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	4a9b      	ldr	r2, [pc, #620]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f20:	4b98      	ldr	r3, [pc, #608]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	4a97      	ldr	r2, [pc, #604]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d016      	beq.n	8002f66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe ff96 	bl	8001e68 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe ff92 	bl	8001e68 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e12a      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f56:	4b8b      	ldr	r3, [pc, #556]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ed      	beq.n	8002f40 <HAL_RCC_OscConfig+0x53c>
 8002f64:	e015      	b.n	8002f92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe ff7f 	bl	8001e68 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe ff7b 	bl	8001e68 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e113      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f84:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ed      	bne.n	8002f6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b7a      	ldr	r3, [pc, #488]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	4a79      	ldr	r2, [pc, #484]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80fe 	beq.w	80031aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f040 80d0 	bne.w	8003158 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fb8:	4b72      	ldr	r3, [pc, #456]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0203 	and.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d130      	bne.n	800302e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d127      	bne.n	800302e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d11f      	bne.n	800302e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ff8:	2a07      	cmp	r2, #7
 8002ffa:	bf14      	ite	ne
 8002ffc:	2201      	movne	r2, #1
 8002ffe:	2200      	moveq	r2, #0
 8003000:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003002:	4293      	cmp	r3, r2
 8003004:	d113      	bne.n	800302e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d109      	bne.n	800302e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d06e      	beq.n	800310c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d069      	beq.n	8003108 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003034:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003040:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0ad      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003050:	4b4c      	ldr	r3, [pc, #304]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a4b      	ldr	r2, [pc, #300]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305c:	f7fe ff04 	bl	8001e68 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe ff00 	bl	8001e68 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e09a      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003076:	4b43      	ldr	r3, [pc, #268]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003082:	4b40      	ldr	r3, [pc, #256]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	4b40      	ldr	r3, [pc, #256]	@ (8003188 <HAL_RCC_OscConfig+0x784>)
 8003088:	4013      	ands	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003092:	3a01      	subs	r2, #1
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800309c:	0212      	lsls	r2, r2, #8
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030a4:	0852      	lsrs	r2, r2, #1
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0552      	lsls	r2, r2, #21
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030b0:	0852      	lsrs	r2, r2, #1
 80030b2:	3a01      	subs	r2, #1
 80030b4:	0652      	lsls	r2, r2, #25
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030bc:	0912      	lsrs	r2, r2, #4
 80030be:	0452      	lsls	r2, r2, #17
 80030c0:	430a      	orrs	r2, r1
 80030c2:	4930      	ldr	r1, [pc, #192]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030e0:	f7fe fec2 	bl	8001e68 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe febe 	bl	8001e68 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e058      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003106:	e050      	b.n	80031aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04f      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d148      	bne.n	80031aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003118:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a16      	ldr	r2, [pc, #88]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800312e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003130:	f7fe fe9a 	bl	8001e68 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fe96 	bl	8001e68 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e030      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x734>
 8003156:	e028      	b.n	80031aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d023      	beq.n	80031a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_RCC_OscConfig+0x780>)
 8003164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fe7d 	bl	8001e68 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003170:	e00c      	b.n	800318c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe fe79 	bl	8001e68 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d905      	bls.n	800318c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e013      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
 8003184:	40021000 	.word	0x40021000
 8003188:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <HAL_RCC_OscConfig+0x7b0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ec      	bne.n	8003172 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_RCC_OscConfig+0x7b0>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	4905      	ldr	r1, [pc, #20]	@ (80031b4 <HAL_RCC_OscConfig+0x7b0>)
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RCC_OscConfig+0x7b4>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	60cb      	str	r3, [r1, #12]
 80031a4:	e001      	b.n	80031aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	feeefffc 	.word	0xfeeefffc

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0e7      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b75      	ldr	r3, [pc, #468]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b72      	ldr	r3, [pc, #456]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4970      	ldr	r1, [pc, #448]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b6e      	ldr	r3, [pc, #440]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cf      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4b66      	ldr	r3, [pc, #408]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003218:	429a      	cmp	r2, r3
 800321a:	d908      	bls.n	800322e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4960      	ldr	r1, [pc, #384]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d04c      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003242:	4b5a      	ldr	r3, [pc, #360]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d121      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0a6      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	4b54      	ldr	r3, [pc, #336]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e09a      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003272:	4b4e      	ldr	r3, [pc, #312]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e08e      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003282:	4b4a      	ldr	r3, [pc, #296]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e086      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4943      	ldr	r1, [pc, #268]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fe fde0 	bl	8001e68 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fddc 	bl	8001e68 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e06e      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b3a      	ldr	r3, [pc, #232]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b31      	ldr	r3, [pc, #196]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d208      	bcs.n	8003302 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	492b      	ldr	r1, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003302:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d210      	bcs.n	8003332 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 0207 	bic.w	r2, r3, #7
 8003318:	4923      	ldr	r1, [pc, #140]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003320:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e036      	b.n	80033a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4918      	ldr	r1, [pc, #96]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335c:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4910      	ldr	r1, [pc, #64]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003370:	f000 f824 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	490b      	ldr	r1, [pc, #44]	@ (80033b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1f8>)
 800338e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fd17 	bl	8001dc8 <HAL_InitTick>
 800339a:	4603      	mov	r3, r0
 800339c:	72fb      	strb	r3, [r7, #11]

  return status;
 800339e:	7afb      	ldrb	r3, [r7, #11]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40021000 	.word	0x40021000
 80033b0:	0800695c 	.word	0x0800695c
 80033b4:	2000001c 	.word	0x2000001c
 80033b8:	20000040 	.word	0x20000040

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	@ 0x24
 80033c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ca:	4b3e      	ldr	r3, [pc, #248]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d4:	4b3b      	ldr	r3, [pc, #236]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x34>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d121      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d11e      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033f0:	4b34      	ldr	r3, [pc, #208]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033fc:	4b31      	ldr	r3, [pc, #196]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e005      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800340c:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003418:	4a2b      	ldr	r2, [pc, #172]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d102      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e004      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d101      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003440:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d134      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800344a:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0xa6>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0xac>
 8003460:	e005      	b.n	800346e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003462:	4b1a      	ldr	r3, [pc, #104]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003464:	617b      	str	r3, [r7, #20]
      break;
 8003466:	e005      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003468:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x110>)
 800346a:	617b      	str	r3, [r7, #20]
      break;
 800346c:	e002      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	617b      	str	r3, [r7, #20]
      break;
 8003472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003474:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	3301      	adds	r3, #1
 8003480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	fb03 f202 	mul.w	r2, r3, r2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0e5b      	lsrs	r3, r3, #25
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	3301      	adds	r3, #1
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034b4:	69bb      	ldr	r3, [r7, #24]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	08006974 	.word	0x08006974
 80034cc:	00f42400 	.word	0x00f42400

080034d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000001c 	.word	0x2000001c

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4904      	ldr	r1, [pc, #16]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	0800696c 	.word	0x0800696c

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003518:	f7ff ffda 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0adb      	lsrs	r3, r3, #11
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	0800696c 	.word	0x0800696c

08003540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800354c:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003558:	f7ff f9f0 	bl	800293c <HAL_PWREx_GetVoltageRange>
 800355c:	6178      	str	r0, [r7, #20]
 800355e:	e014      	b.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	@ 0x58
 800356c:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003578:	f7ff f9e0 	bl	800293c <HAL_PWREx_GetVoltageRange>
 800357c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003590:	d10b      	bne.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b80      	cmp	r3, #128	@ 0x80
 8003596:	d919      	bls.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2ba0      	cmp	r3, #160	@ 0xa0
 800359c:	d902      	bls.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800359e:	2302      	movs	r3, #2
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e013      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a4:	2301      	movs	r3, #1
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e010      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b80      	cmp	r3, #128	@ 0x80
 80035ae:	d902      	bls.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035b0:	2303      	movs	r3, #3
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e00a      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b80      	cmp	r3, #128	@ 0x80
 80035ba:	d102      	bne.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035bc:	2302      	movs	r3, #2
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e004      	b.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b70      	cmp	r3, #112	@ 0x70
 80035c6:	d101      	bne.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c8:	2301      	movs	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 0207 	bic.w	r2, r3, #7
 80035d4:	4909      	ldr	r1, [pc, #36]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035dc:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003608:	2300      	movs	r3, #0
 800360a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800360c:	2300      	movs	r3, #0
 800360e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003618:	2b00      	cmp	r3, #0
 800361a:	d041      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003620:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003624:	d02a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003626:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800362a:	d824      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800362c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003636:	d81e      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003640:	d010      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003642:	e018      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003644:	4b86      	ldr	r3, [pc, #536]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a85      	ldr	r2, [pc, #532]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003650:	e015      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fa8b 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003662:	e00c      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3320      	adds	r3, #32
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fb76 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	74fb      	strb	r3, [r7, #19]
      break;
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800367c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003684:	4b76      	ldr	r3, [pc, #472]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003692:	4973      	ldr	r1, [pc, #460]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800369a:	e001      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d041      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b4:	d02a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ba:	d824      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c6:	d81e      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d0:	d010      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036d2:	e018      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d4:	4b62      	ldr	r3, [pc, #392]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a61      	ldr	r2, [pc, #388]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e0:	e015      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fa43 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f2:	e00c      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3320      	adds	r3, #32
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb2e 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003704:	e003      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	74fb      	strb	r3, [r7, #19]
      break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800370c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003714:	4b52      	ldr	r3, [pc, #328]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003722:	494f      	ldr	r1, [pc, #316]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800372a:	e001      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a0 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4a40      	ldr	r2, [pc, #256]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
 8003764:	4b3e      	ldr	r3, [pc, #248]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003770:	2301      	movs	r3, #1
 8003772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003774:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3a      	ldr	r2, [pc, #232]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003780:	f7fe fb72 	bl	8001e68 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003786:	e009      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fe fb6e 	bl	8001e68 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	74fb      	strb	r3, [r7, #19]
        break;
 800379a:	e005      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379c:	4b31      	ldr	r3, [pc, #196]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d15c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d019      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037cc:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d8:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	4a20      	ldr	r2, [pc, #128]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f8:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe fb2d 	bl	8001e68 <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003810:	e00b      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe fb29 	bl	8001e68 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d902      	bls.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	74fb      	strb	r3, [r7, #19]
            break;
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ec      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383e:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800384e:	4904      	ldr	r1, [pc, #16]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003856:	e009      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	74bb      	strb	r3, [r7, #18]
 800385c:	e006      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7c7b      	ldrb	r3, [r7, #17]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4ba1      	ldr	r3, [pc, #644]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003876:	4aa0      	ldr	r2, [pc, #640]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4b9b      	ldr	r3, [pc, #620]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f023 0203 	bic.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	4997      	ldr	r1, [pc, #604]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ac:	4b92      	ldr	r3, [pc, #584]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f023 020c 	bic.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	498f      	ldr	r1, [pc, #572]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ce:	4b8a      	ldr	r3, [pc, #552]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	4986      	ldr	r1, [pc, #536]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f0:	4b81      	ldr	r3, [pc, #516]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	497e      	ldr	r1, [pc, #504]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003912:	4b79      	ldr	r3, [pc, #484]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	4975      	ldr	r1, [pc, #468]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003934:	4b70      	ldr	r3, [pc, #448]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	496d      	ldr	r1, [pc, #436]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003956:	4b68      	ldr	r3, [pc, #416]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	4964      	ldr	r1, [pc, #400]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003978:	4b5f      	ldr	r3, [pc, #380]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	495c      	ldr	r1, [pc, #368]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800399a:	4b57      	ldr	r3, [pc, #348]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	4953      	ldr	r1, [pc, #332]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039bc:	4b4e      	ldr	r3, [pc, #312]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ca:	494b      	ldr	r1, [pc, #300]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039de:	4b46      	ldr	r3, [pc, #280]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	4942      	ldr	r1, [pc, #264]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d028      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a00:	4b3d      	ldr	r3, [pc, #244]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a0e:	493a      	ldr	r1, [pc, #232]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
 8003a2c:	e011      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f898 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a5e:	4b26      	ldr	r3, [pc, #152]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4922      	ldr	r1, [pc, #136]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003a84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a88:	60d3      	str	r3, [r2, #12]
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f869 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d031      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003abc:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	490b      	ldr	r1, [pc, #44]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ada:	d10f      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f846 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	74bb      	strb	r3, [r7, #18]
 8003af6:	e013      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003af8:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3320      	adds	r3, #32
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f925 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b2c:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3a:	490d      	ldr	r1, [pc, #52]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b5c:	4904      	ldr	r1, [pc, #16]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b82:	4b75      	ldr	r3, [pc, #468]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b8e:	4b72      	ldr	r3, [pc, #456]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0203 	and.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10d      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d047      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e044      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d018      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x86>
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d825      	bhi.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x62>
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d009      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x74>
 8003bd4:	e020      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bd6:	4b60      	ldr	r3, [pc, #384]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be6:	e01a      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003be8:	4b5b      	ldr	r3, [pc, #364]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf8:	e013      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfa:	4b57      	ldr	r3, [pc, #348]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c06:	4b54      	ldr	r3, [pc, #336]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c16:	e006      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e004      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	430b      	orrs	r3, r1
 8003c44:	4944      	ldr	r1, [pc, #272]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d17d      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c50:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a40      	ldr	r2, [pc, #256]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe f904 	bl	8001e68 <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c62:	e009      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c64:	f7fe f900 	bl	8001e68 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	73fb      	strb	r3, [r7, #15]
        break;
 8003c76:	e005      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c78:	4b37      	ldr	r3, [pc, #220]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ef      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d160      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d111      	bne.n	8003cb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c90:	4b31      	ldr	r3, [pc, #196]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	0211      	lsls	r1, r2, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	0912      	lsrs	r2, r2, #4
 8003ca8:	0452      	lsls	r2, r2, #17
 8003caa:	430a      	orrs	r2, r1
 8003cac:	492a      	ldr	r1, [pc, #168]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e027      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d112      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cba:	4b27      	ldr	r3, [pc, #156]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003cc2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	0211      	lsls	r1, r2, #8
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6912      	ldr	r2, [r2, #16]
 8003cd0:	0852      	lsrs	r2, r2, #1
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	0552      	lsls	r2, r2, #21
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	491f      	ldr	r1, [pc, #124]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]
 8003cde:	e011      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ce8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6952      	ldr	r2, [r2, #20]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0652      	lsls	r2, r2, #25
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	4916      	ldr	r1, [pc, #88]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d04:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a13      	ldr	r2, [pc, #76]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe f8aa 	bl	8001e68 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d16:	e009      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d18:	f7fe f8a6 	bl	8001e68 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	73fb      	strb	r3, [r7, #15]
          break;
 8003d2a:	e005      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	4904      	ldr	r1, [pc, #16]	@ (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d76:	4b67      	ldr	r3, [pc, #412]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10d      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d047      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
 8003da6:	e044      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d018      	beq.n	8003de2 <RCCEx_PLLSAI2_Config+0x86>
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d825      	bhi.n	8003e00 <RCCEx_PLLSAI2_Config+0xa4>
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <RCCEx_PLLSAI2_Config+0x62>
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d009      	beq.n	8003dd0 <RCCEx_PLLSAI2_Config+0x74>
 8003dbc:	e020      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dbe:	4b55      	ldr	r3, [pc, #340]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dce:	e01a      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd0:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d116      	bne.n	8003e0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de0:	e013      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de2:	4b4c      	ldr	r3, [pc, #304]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dee:	4b49      	ldr	r3, [pc, #292]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dfe:	e006      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e004      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e16:	4b3f      	ldr	r3, [pc, #252]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	4939      	ldr	r1, [pc, #228]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d167      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e38:	4b36      	ldr	r3, [pc, #216]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fe f810 	bl	8001e68 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e4a:	e009      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e4c:	f7fe f80c 	bl	8001e68 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d902      	bls.n	8003e60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e5e:	e005      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e60:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ef      	bne.n	8003e4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d14a      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e78:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	0912      	lsrs	r2, r2, #4
 8003e90:	0452      	lsls	r2, r2, #17
 8003e92:	430a      	orrs	r2, r1
 8003e94:	491f      	ldr	r1, [pc, #124]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	614b      	str	r3, [r1, #20]
 8003e9a:	e011      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ea4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	0211      	lsls	r1, r2, #8
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6912      	ldr	r2, [r2, #16]
 8003eb2:	0852      	lsrs	r2, r2, #1
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0652      	lsls	r2, r2, #25
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4916      	ldr	r1, [pc, #88]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ec0:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd ffcc 	bl	8001e68 <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ed2:	e009      	b.n	8003ee8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ed4:	f7fd ffc8 	bl	8001e68 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d902      	bls.n	8003ee8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ee6:	e005      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ef      	beq.n	8003ed4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4904      	ldr	r1, [pc, #16]	@ (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e095      	b.n	8004056 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3a:	d009      	beq.n	8003f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
 8003f42:	e005      	b.n	8003f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fe08 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f90:	d902      	bls.n	8003f98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e002      	b.n	8003f9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fa6:	d007      	beq.n	8003fb8 <HAL_SPI_Init+0xa0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	ea42 0103 	orr.w	r1, r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f003 0204 	and.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b088      	sub	sp, #32
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406e:	f7fd fefb 	bl	8001e68 <HAL_GetTick>
 8004072:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	e15c      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_Transmit+0x36>
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e154      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Transmit+0x48>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e14d      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d10f      	bne.n	800411a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004118:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d007      	beq.n	8004138 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004140:	d952      	bls.n	80041e8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit+0xf2>
 800414a:	8b7b      	ldrh	r3, [r7, #26]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d145      	bne.n	80041dc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	1c9a      	adds	r2, r3, #2
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004174:	e032      	b.n	80041dc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d112      	bne.n	80041aa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	1c9a      	adds	r2, r3, #2
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a8:	e018      	b.n	80041dc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041aa:	f7fd fe5d 	bl	8001e68 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d803      	bhi.n	80041c2 <HAL_SPI_Transmit+0x164>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Transmit+0x16a>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0b2      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1c7      	bne.n	8004176 <HAL_SPI_Transmit+0x118>
 80041e6:	e083      	b.n	80042f0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SPI_Transmit+0x198>
 80041f0:	8b7b      	ldrh	r3, [r7, #26]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d177      	bne.n	80042e6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d912      	bls.n	8004226 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b02      	subs	r3, #2
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004224:	e05f      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800424c:	e04b      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d12b      	bne.n	80042b4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d912      	bls.n	800428c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b02      	subs	r3, #2
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800428a:	e02c      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042b2:	e018      	b.n	80042e6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b4:	f7fd fdd8 	bl	8001e68 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d803      	bhi.n	80042cc <HAL_SPI_Transmit+0x26e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_Transmit+0x274>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e02d      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ae      	bne.n	800424e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fee7 	bl	80050c8 <SPI_EndRxTxTransaction>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004340:	2300      	movs	r3, #0
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	e0d4      	b.n	8004514 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_Transmit_DMA+0x2a>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0cc      	b.n	8004514 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_SPI_Transmit_DMA+0x3c>
 8004384:	2302      	movs	r3, #2
 8004386:	e0c5      	b.n	8004514 <HAL_SPI_Transmit_DMA+0x1c8>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043da:	d10f      	bne.n	80043fc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	4a46      	ldr	r2, [pc, #280]	@ (800451c <HAL_SPI_Transmit_DMA+0x1d0>)
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	4a45      	ldr	r2, [pc, #276]	@ (8004520 <HAL_SPI_Transmit_DMA+0x1d4>)
 800440a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	4a44      	ldr	r2, [pc, #272]	@ (8004524 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004412:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	2200      	movs	r2, #0
 800441a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800442a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004434:	d82d      	bhi.n	8004492 <HAL_SPI_Transmit_DMA+0x146>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	d127      	bne.n	8004492 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800445e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800446e:	e010      	b.n	8004492 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	b29b      	uxth	r3, r3
 800448a:	3301      	adds	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	4619      	mov	r1, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044aa:	f7fd fed7 	bl	800225c <HAL_DMA_Start_IT>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b8:	f043 0210 	orr.w	r2, r3, #16
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e023      	b.n	8004514 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	d007      	beq.n	80044ea <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0220 	orr.w	r2, r2, #32
 8004500:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0202 	orr.w	r2, r2, #2
 8004510:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08004d49 	.word	0x08004d49
 8004520:	08004b6b 	.word	0x08004b6b
 8004524:	08004d9d 	.word	0x08004d9d

08004528 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
 8004544:	e105      	b.n	8004752 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d110      	bne.n	8004570 <HAL_SPI_Receive_DMA+0x48>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004556:	d10b      	bne.n	8004570 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2204      	movs	r2, #4
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8fe 	bl	8004768 <HAL_SPI_TransmitReceive_DMA>
 800456c:	4603      	mov	r3, r0
 800456e:	e0f0      	b.n	8004752 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Receive_DMA+0x54>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0e8      	b.n	8004752 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_SPI_Receive_DMA+0x66>
 800458a:	2302      	movs	r3, #2
 800458c:	e0e1      	b.n	8004752 <HAL_SPI_Receive_DMA+0x22a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2204      	movs	r2, #4
 800459a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045da:	d10f      	bne.n	80045fc <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800460a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004614:	d908      	bls.n	8004628 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	e042      	b.n	80046ae <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004636:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004642:	d134      	bne.n	80046ae <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004652:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800465a:	b29b      	uxth	r3, r3
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004672:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004686:	e012      	b.n	80046ae <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004696:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800469e:	b29b      	uxth	r3, r3
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	4a2a      	ldr	r2, [pc, #168]	@ (800475c <HAL_SPI_Receive_DMA+0x234>)
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ba:	4a29      	ldr	r2, [pc, #164]	@ (8004760 <HAL_SPI_Receive_DMA+0x238>)
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c2:	4a28      	ldr	r2, [pc, #160]	@ (8004764 <HAL_SPI_Receive_DMA+0x23c>)
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	2200      	movs	r2, #0
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	4619      	mov	r1, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046e8:	f7fd fdb8 	bl	800225c <HAL_DMA_Start_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e023      	b.n	8004752 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004714:	2b40      	cmp	r3, #64	@ 0x40
 8004716:	d007      	beq.n	8004728 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0220 	orr.w	r2, r2, #32
 800473e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	08004d65 	.word	0x08004d65
 8004760:	08004c11 	.word	0x08004c11
 8004764:	08004d9d 	.word	0x08004d9d

08004768 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800477c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d00c      	beq.n	80047a4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004790:	d106      	bne.n	80047a0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_SPI_TransmitReceive_DMA+0x38>
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d001      	beq.n	80047a4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
 80047a2:	e158      	b.n	8004a56 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e14d      	b.n	8004a56 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_SPI_TransmitReceive_DMA+0x60>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e146      	b.n	8004a56 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d003      	beq.n	80047e4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	887a      	ldrh	r2, [r7, #2]
 8004806:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	887a      	ldrh	r2, [r7, #2]
 800480e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800482c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004836:	d908      	bls.n	800484a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	e06f      	b.n	800492a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004858:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004864:	d126      	bne.n	80048b4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004880:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004890:	e010      	b.n	80048b4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048a0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d134      	bne.n	800492a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d111      	bne.n	8004904 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004902:	e012      	b.n	800492a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004912:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	b29b      	uxth	r3, r3
 8004920:	3301      	adds	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b04      	cmp	r3, #4
 8004934:	d108      	bne.n	8004948 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	4a49      	ldr	r2, [pc, #292]	@ (8004a60 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	4a48      	ldr	r2, [pc, #288]	@ (8004a64 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8004944:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004946:	e007      	b.n	8004958 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	4a46      	ldr	r2, [pc, #280]	@ (8004a68 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004954:	4a45      	ldr	r2, [pc, #276]	@ (8004a6c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	4a44      	ldr	r2, [pc, #272]	@ (8004a70 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800495e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	2200      	movs	r2, #0
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	4619      	mov	r1, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004980:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004982:	f7fd fc6b 	bl	800225c <HAL_DMA_Start_IT>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e058      	b.n	8004a56 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	2200      	movs	r2, #0
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	2200      	movs	r2, #0
 80049ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	2200      	movs	r2, #0
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4619      	mov	r1, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049ec:	f7fd fc36 	bl	800225c <HAL_DMA_Start_IT>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fa:	f043 0210 	orr.w	r2, r3, #16
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e023      	b.n	8004a56 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d007      	beq.n	8004a2c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0220 	orr.w	r2, r2, #32
 8004a42:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0202 	orr.w	r2, r2, #2
 8004a52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08004d65 	.word	0x08004d65
 8004a64:	08004c11 	.word	0x08004c11
 8004a68:	08004d81 	.word	0x08004d81
 8004a6c:	08004cb9 	.word	0x08004cb9
 8004a70:	08004d9d 	.word	0x08004d9d

08004a74 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00f      	beq.n	8004aa8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fc45 	bl	800231c <HAL_DMA_Abort>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9c:	f043 0210 	orr.w	r2, r3, #16
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fd fc31 	bl	800231c <HAL_DMA_Abort>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	f043 0210 	orr.w	r2, r3, #16
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0203 	bic.w	r2, r2, #3
 8004ade:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b78:	f7fd f976 	bl	8001e68 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d03b      	beq.n	8004c04 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0220 	bic.w	r2, r2, #32
 8004b9a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0202 	bic.w	r2, r2, #2
 8004baa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	2164      	movs	r1, #100	@ 0x64
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f000 fa89 	bl	80050c8 <SPI_EndRxTxTransaction>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f7ff ffaa 	bl	8004b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c02:	e002      	b.n	8004c0a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c04:	6978      	ldr	r0, [r7, #20]
 8004c06:	f7fb ff2f 	bl	8000a68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fd f923 	bl	8001e68 <HAL_GetTick>
 8004c22:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d03c      	beq.n	8004cac <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0220 	bic.w	r2, r2, #32
 8004c40:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <SPI_DMAReceiveCplt+0x56>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d108      	bne.n	8004c66 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0203 	bic.w	r2, r2, #3
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	e007      	b.n	8004c76 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	2164      	movs	r1, #100	@ 0x64
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f9cc 	bl	8005018 <SPI_EndRxTransaction>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff ff56 	bl	8004b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004caa:	e002      	b.n	8004cb2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7ff ff20 	bl	8004af2 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc6:	f7fd f8cf 	bl	8001e68 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d030      	beq.n	8004d3c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0220 	bic.w	r2, r2, #32
 8004ce8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	2164      	movs	r1, #100	@ 0x64
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f9ea 	bl	80050c8 <SPI_EndRxTxTransaction>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0203 	bic.w	r2, r2, #3
 8004d14:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ff0e 	bl	8004b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d3a:	e002      	b.n	8004d42 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fee2 	bl	8004b06 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fedf 	bl	8004b1a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fedb 	bl	8004b2e <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff fed7 	bl	8004b42 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0203 	bic.w	r2, r2, #3
 8004db8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dbe:	f043 0210 	orr.w	r2, r3, #16
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fec1 	bl	8004b56 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dec:	f7fd f83c 	bl	8001e68 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dfc:	f7fd f834 	bl	8001e68 <HAL_GetTick>
 8004e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e02:	4b39      	ldr	r3, [pc, #228]	@ (8004ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	015b      	lsls	r3, r3, #5
 8004e08:	0d1b      	lsrs	r3, r3, #20
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e12:	e054      	b.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d050      	beq.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e1c:	f7fd f824 	bl	8001e68 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d902      	bls.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d13d      	bne.n	8004eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4a:	d111      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e54:	d004      	beq.n	8004e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5e:	d107      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e78:	d10f      	bne.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e017      	b.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d19b      	bne.n	8004e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000001c 	.word	0x2000001c

08004eec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	@ 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004efe:	f7fc ffb3 	bl	8001e68 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f0e:	f7fc ffab 	bl	8001e68 <HAL_GetTick>
 8004f12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005014 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	0d1b      	lsrs	r3, r3, #20
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f34:	e060      	b.n	8004ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f3c:	d107      	bne.n	8004f4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d050      	beq.n	8004ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f56:	f7fc ff87 	bl	8001e68 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d902      	bls.n	8004f6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d13d      	bne.n	8004fe8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f84:	d111      	bne.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f8e:	d004      	beq.n	8004f9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f98:	d107      	bne.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb2:	d10f      	bne.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e010      	b.n	800500a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d196      	bne.n	8004f36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	@ 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000001c 	.word	0x2000001c

08005018 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800502c:	d111      	bne.n	8005052 <SPI_EndRxTransaction+0x3a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005036:	d004      	beq.n	8005042 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005040:	d107      	bne.n	8005052 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	2180      	movs	r1, #128	@ 0x80
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff febd 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e023      	b.n	80050c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005080:	d11d      	bne.n	80050be <SPI_EndRxTransaction+0xa6>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508a:	d004      	beq.n	8005096 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d113      	bne.n	80050be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ff22 	bl	8004eec <SPI_WaitFifoStateUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e000      	b.n	80050c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff ff03 	bl	8004eec <SPI_WaitFifoStateUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e027      	b.n	800514c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	2180      	movs	r1, #128	@ 0x80
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fe68 	bl	8004ddc <SPI_WaitFlagStateUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e014      	b.n	800514c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fedc 	bl	8004eec <SPI_WaitFifoStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e000      	b.n	800514c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb ff78 	bl	8001070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fa50 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x24>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e03c      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d109      	bne.n	8005242 <HAL_TIM_PWM_Start+0x3e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e02f      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x58>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e022      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x72>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e015      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x8c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e09c      	b.n	80053e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0xb6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b8:	e023      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0xc6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c8:	e01b      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xd6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xe6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xf6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fd10 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a35      	ldr	r2, [pc, #212]	@ (80053ec <HAL_TIM_PWM_Start+0x1e8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a34      	ldr	r2, [pc, #208]	@ (80053f0 <HAL_TIM_PWM_Start+0x1ec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a32      	ldr	r2, [pc, #200]	@ (80053f4 <HAL_TIM_PWM_Start+0x1f0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a31      	ldr	r2, [pc, #196]	@ (80053f8 <HAL_TIM_PWM_Start+0x1f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2f      	ldr	r2, [pc, #188]	@ (80053fc <HAL_TIM_PWM_Start+0x1f8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_Start+0x142>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_TIM_PWM_Start+0x144>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800535a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	@ (80053ec <HAL_TIM_PWM_Start+0x1e8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01d      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536e:	d018      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a22      	ldr	r2, [pc, #136]	@ (8005400 <HAL_TIM_PWM_Start+0x1fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <HAL_TIM_PWM_Start+0x200>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <HAL_TIM_PWM_Start+0x204>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_TIM_PWM_Start+0x1ec>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <HAL_TIM_PWM_Start+0x1f0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d115      	bne.n	80053ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b18      	ldr	r3, [pc, #96]	@ (800540c <HAL_TIM_PWM_Start+0x208>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b06      	cmp	r3, #6
 80053b2:	d015      	beq.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ba:	d011      	beq.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e008      	b.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e000      	b.n	80053e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ff      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b14      	cmp	r3, #20
 800543a:	f200 80f0 	bhi.w	800561e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800543e:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005499 	.word	0x08005499
 8005448:	0800561f 	.word	0x0800561f
 800544c:	0800561f 	.word	0x0800561f
 8005450:	0800561f 	.word	0x0800561f
 8005454:	080054d9 	.word	0x080054d9
 8005458:	0800561f 	.word	0x0800561f
 800545c:	0800561f 	.word	0x0800561f
 8005460:	0800561f 	.word	0x0800561f
 8005464:	0800551b 	.word	0x0800551b
 8005468:	0800561f 	.word	0x0800561f
 800546c:	0800561f 	.word	0x0800561f
 8005470:	0800561f 	.word	0x0800561f
 8005474:	0800555b 	.word	0x0800555b
 8005478:	0800561f 	.word	0x0800561f
 800547c:	0800561f 	.word	0x0800561f
 8005480:	0800561f 	.word	0x0800561f
 8005484:	0800559d 	.word	0x0800559d
 8005488:	0800561f 	.word	0x0800561f
 800548c:	0800561f 	.word	0x0800561f
 8005490:	0800561f 	.word	0x0800561f
 8005494:	080055dd 	.word	0x080055dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f970 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6999      	ldr	r1, [r3, #24]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      break;
 80054d6:	e0a5      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f9e0 	bl	80058a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      break;
 8005518:	e084      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fa49 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]
      break;
 8005558:	e064      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fab1 	bl	8005ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	61da      	str	r2, [r3, #28]
      break;
 800559a:	e043      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fafa 	bl	8005b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055da:	e023      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fb3e 	bl	8005c64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800561c:	e002      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
      break;
 8005622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a46      	ldr	r2, [pc, #280]	@ (8005764 <TIM_Base_SetConfig+0x12c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a43      	ldr	r2, [pc, #268]	@ (8005768 <TIM_Base_SetConfig+0x130>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a42      	ldr	r2, [pc, #264]	@ (800576c <TIM_Base_SetConfig+0x134>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a41      	ldr	r2, [pc, #260]	@ (8005770 <TIM_Base_SetConfig+0x138>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a40      	ldr	r2, [pc, #256]	@ (8005774 <TIM_Base_SetConfig+0x13c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a35      	ldr	r2, [pc, #212]	@ (8005764 <TIM_Base_SetConfig+0x12c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01f      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a32      	ldr	r2, [pc, #200]	@ (8005768 <TIM_Base_SetConfig+0x130>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a31      	ldr	r2, [pc, #196]	@ (800576c <TIM_Base_SetConfig+0x134>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <TIM_Base_SetConfig+0x138>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005774 <TIM_Base_SetConfig+0x13c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005778 <TIM_Base_SetConfig+0x140>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2d      	ldr	r2, [pc, #180]	@ (800577c <TIM_Base_SetConfig+0x144>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x9a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <TIM_Base_SetConfig+0x148>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a16      	ldr	r2, [pc, #88]	@ (8005764 <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00f      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <TIM_Base_SetConfig+0x13c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a17      	ldr	r2, [pc, #92]	@ (8005778 <TIM_Base_SetConfig+0x140>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d007      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a16      	ldr	r2, [pc, #88]	@ (800577c <TIM_Base_SetConfig+0x144>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a15      	ldr	r2, [pc, #84]	@ (8005780 <TIM_Base_SetConfig+0x148>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d103      	bne.n	8005738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d105      	bne.n	8005756 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f023 0201 	bic.w	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	611a      	str	r2, [r3, #16]
  }
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0201 	bic.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a2c      	ldr	r2, [pc, #176]	@ (8005890 <TIM_OC1_SetConfig+0x10c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005894 <TIM_OC1_SetConfig+0x110>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005898 <TIM_OC1_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a29      	ldr	r2, [pc, #164]	@ (800589c <TIM_OC1_SetConfig+0x118>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <TIM_OC1_SetConfig+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10c      	bne.n	800581e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0308 	bic.w	r3, r3, #8
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <TIM_OC1_SetConfig+0x10c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00f      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <TIM_OC1_SetConfig+0x110>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <TIM_OC1_SetConfig+0x114>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a18      	ldr	r2, [pc, #96]	@ (800589c <TIM_OC1_SetConfig+0x118>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <TIM_OC1_SetConfig+0x11c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d111      	bne.n	800586a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 0210 	bic.w	r2, r3, #16
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0320 	bic.w	r3, r3, #32
 80058f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a28      	ldr	r2, [pc, #160]	@ (80059a4 <TIM_OC2_SetConfig+0x100>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC2_SetConfig+0x6c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a27      	ldr	r2, [pc, #156]	@ (80059a8 <TIM_OC2_SetConfig+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10d      	bne.n	800592c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <TIM_OC2_SetConfig+0x100>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <TIM_OC2_SetConfig+0x104>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <TIM_OC2_SetConfig+0x108>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <TIM_OC2_SetConfig+0x10c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <TIM_OC2_SetConfig+0x110>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d113      	bne.n	800597c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800595a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <TIM_OC3_SetConfig+0xfc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x6a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a26      	ldr	r2, [pc, #152]	@ (8005ab8 <TIM_OC3_SetConfig+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <TIM_OC3_SetConfig+0xfc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00f      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <TIM_OC3_SetConfig+0x100>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <TIM_OC3_SetConfig+0x104>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <TIM_OC3_SetConfig+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <TIM_OC3_SetConfig+0x10c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d113      	bne.n	8005a8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <TIM_OC4_SetConfig+0xc0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00f      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC4_SetConfig+0xc4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_OC4_SetConfig+0xc8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_OC4_SetConfig+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <TIM_OC4_SetConfig+0xd0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d109      	bne.n	8005b60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <TIM_OC5_SetConfig+0xb4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <TIM_OC5_SetConfig+0xb8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_OC5_SetConfig+0xbc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <TIM_OC5_SetConfig+0xc0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <TIM_OC5_SetConfig+0xc4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d109      	bne.n	8005c2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	051b      	lsls	r3, r3, #20
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <TIM_OC6_SetConfig+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <TIM_OC6_SetConfig+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a16      	ldr	r2, [pc, #88]	@ (8005d24 <TIM_OC6_SetConfig+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <TIM_OC6_SetConfig+0xc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <TIM_OC6_SetConfig+0xc8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e068      	b.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01d      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e06:	d018      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a14      	ldr	r2, [pc, #80]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40014000 	.word	0x40014000

08005e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e040      	b.n	8005f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb f9d6 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2224      	movs	r2, #36	@ 0x24
 8005eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fae0 	bl	8006498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f825 	bl	8005f28 <UART_SetConfig>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e01b      	b.n	8005f20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fb5f 	bl	80065dc <UART_CheckIdleState>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f2c:	b08a      	sub	sp, #40	@ 0x28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4ba4      	ldr	r3, [pc, #656]	@ (80061e8 <UART_SetConfig+0x2c0>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a99      	ldr	r2, [pc, #612]	@ (80061ec <UART_SetConfig+0x2c4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f90:	4313      	orrs	r3, r2
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a90      	ldr	r2, [pc, #576]	@ (80061f0 <UART_SetConfig+0x2c8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d126      	bne.n	8006000 <UART_SetConfig+0xd8>
 8005fb2:	4b90      	ldr	r3, [pc, #576]	@ (80061f4 <UART_SetConfig+0x2cc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d81b      	bhi.n	8005ff8 <UART_SetConfig+0xd0>
 8005fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <UART_SetConfig+0xa0>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fde:	e116      	b.n	800620e <UART_SetConfig+0x2e6>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fe6:	e112      	b.n	800620e <UART_SetConfig+0x2e6>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fee:	e10e      	b.n	800620e <UART_SetConfig+0x2e6>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff6:	e10a      	b.n	800620e <UART_SetConfig+0x2e6>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffe:	e106      	b.n	800620e <UART_SetConfig+0x2e6>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a7c      	ldr	r2, [pc, #496]	@ (80061f8 <UART_SetConfig+0x2d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d138      	bne.n	800607c <UART_SetConfig+0x154>
 800600a:	4b7a      	ldr	r3, [pc, #488]	@ (80061f4 <UART_SetConfig+0x2cc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b0c      	cmp	r3, #12
 8006016:	d82d      	bhi.n	8006074 <UART_SetConfig+0x14c>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0xf8>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006055 	.word	0x08006055
 8006024:	08006075 	.word	0x08006075
 8006028:	08006075 	.word	0x08006075
 800602c:	08006075 	.word	0x08006075
 8006030:	08006065 	.word	0x08006065
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
 800603c:	08006075 	.word	0x08006075
 8006040:	0800605d 	.word	0x0800605d
 8006044:	08006075 	.word	0x08006075
 8006048:	08006075 	.word	0x08006075
 800604c:	08006075 	.word	0x08006075
 8006050:	0800606d 	.word	0x0800606d
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605a:	e0d8      	b.n	800620e <UART_SetConfig+0x2e6>
 800605c:	2302      	movs	r3, #2
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006062:	e0d4      	b.n	800620e <UART_SetConfig+0x2e6>
 8006064:	2304      	movs	r3, #4
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e0d0      	b.n	800620e <UART_SetConfig+0x2e6>
 800606c:	2308      	movs	r3, #8
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006072:	e0cc      	b.n	800620e <UART_SetConfig+0x2e6>
 8006074:	2310      	movs	r3, #16
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607a:	e0c8      	b.n	800620e <UART_SetConfig+0x2e6>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5e      	ldr	r2, [pc, #376]	@ (80061fc <UART_SetConfig+0x2d4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d125      	bne.n	80060d2 <UART_SetConfig+0x1aa>
 8006086:	4b5b      	ldr	r3, [pc, #364]	@ (80061f4 <UART_SetConfig+0x2cc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006090:	2b30      	cmp	r3, #48	@ 0x30
 8006092:	d016      	beq.n	80060c2 <UART_SetConfig+0x19a>
 8006094:	2b30      	cmp	r3, #48	@ 0x30
 8006096:	d818      	bhi.n	80060ca <UART_SetConfig+0x1a2>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d00a      	beq.n	80060b2 <UART_SetConfig+0x18a>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d814      	bhi.n	80060ca <UART_SetConfig+0x1a2>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <UART_SetConfig+0x182>
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d008      	beq.n	80060ba <UART_SetConfig+0x192>
 80060a8:	e00f      	b.n	80060ca <UART_SetConfig+0x1a2>
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b0:	e0ad      	b.n	800620e <UART_SetConfig+0x2e6>
 80060b2:	2302      	movs	r3, #2
 80060b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b8:	e0a9      	b.n	800620e <UART_SetConfig+0x2e6>
 80060ba:	2304      	movs	r3, #4
 80060bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c0:	e0a5      	b.n	800620e <UART_SetConfig+0x2e6>
 80060c2:	2308      	movs	r3, #8
 80060c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c8:	e0a1      	b.n	800620e <UART_SetConfig+0x2e6>
 80060ca:	2310      	movs	r3, #16
 80060cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d0:	e09d      	b.n	800620e <UART_SetConfig+0x2e6>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006200 <UART_SetConfig+0x2d8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d125      	bne.n	8006128 <UART_SetConfig+0x200>
 80060dc:	4b45      	ldr	r3, [pc, #276]	@ (80061f4 <UART_SetConfig+0x2cc>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060e8:	d016      	beq.n	8006118 <UART_SetConfig+0x1f0>
 80060ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80060ec:	d818      	bhi.n	8006120 <UART_SetConfig+0x1f8>
 80060ee:	2b80      	cmp	r3, #128	@ 0x80
 80060f0:	d00a      	beq.n	8006108 <UART_SetConfig+0x1e0>
 80060f2:	2b80      	cmp	r3, #128	@ 0x80
 80060f4:	d814      	bhi.n	8006120 <UART_SetConfig+0x1f8>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <UART_SetConfig+0x1d8>
 80060fa:	2b40      	cmp	r3, #64	@ 0x40
 80060fc:	d008      	beq.n	8006110 <UART_SetConfig+0x1e8>
 80060fe:	e00f      	b.n	8006120 <UART_SetConfig+0x1f8>
 8006100:	2300      	movs	r3, #0
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006106:	e082      	b.n	800620e <UART_SetConfig+0x2e6>
 8006108:	2302      	movs	r3, #2
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610e:	e07e      	b.n	800620e <UART_SetConfig+0x2e6>
 8006110:	2304      	movs	r3, #4
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006116:	e07a      	b.n	800620e <UART_SetConfig+0x2e6>
 8006118:	2308      	movs	r3, #8
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e076      	b.n	800620e <UART_SetConfig+0x2e6>
 8006120:	2310      	movs	r3, #16
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e072      	b.n	800620e <UART_SetConfig+0x2e6>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a35      	ldr	r2, [pc, #212]	@ (8006204 <UART_SetConfig+0x2dc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d12a      	bne.n	8006188 <UART_SetConfig+0x260>
 8006132:	4b30      	ldr	r3, [pc, #192]	@ (80061f4 <UART_SetConfig+0x2cc>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800613c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006140:	d01a      	beq.n	8006178 <UART_SetConfig+0x250>
 8006142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006146:	d81b      	bhi.n	8006180 <UART_SetConfig+0x258>
 8006148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800614c:	d00c      	beq.n	8006168 <UART_SetConfig+0x240>
 800614e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006152:	d815      	bhi.n	8006180 <UART_SetConfig+0x258>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <UART_SetConfig+0x238>
 8006158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615c:	d008      	beq.n	8006170 <UART_SetConfig+0x248>
 800615e:	e00f      	b.n	8006180 <UART_SetConfig+0x258>
 8006160:	2300      	movs	r3, #0
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006166:	e052      	b.n	800620e <UART_SetConfig+0x2e6>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616e:	e04e      	b.n	800620e <UART_SetConfig+0x2e6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006176:	e04a      	b.n	800620e <UART_SetConfig+0x2e6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617e:	e046      	b.n	800620e <UART_SetConfig+0x2e6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006186:	e042      	b.n	800620e <UART_SetConfig+0x2e6>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <UART_SetConfig+0x2c4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d13a      	bne.n	8006208 <UART_SetConfig+0x2e0>
 8006192:	4b18      	ldr	r3, [pc, #96]	@ (80061f4 <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006198:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061a0:	d01a      	beq.n	80061d8 <UART_SetConfig+0x2b0>
 80061a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061a6:	d81b      	bhi.n	80061e0 <UART_SetConfig+0x2b8>
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ac:	d00c      	beq.n	80061c8 <UART_SetConfig+0x2a0>
 80061ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b2:	d815      	bhi.n	80061e0 <UART_SetConfig+0x2b8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <UART_SetConfig+0x298>
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061bc:	d008      	beq.n	80061d0 <UART_SetConfig+0x2a8>
 80061be:	e00f      	b.n	80061e0 <UART_SetConfig+0x2b8>
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c6:	e022      	b.n	800620e <UART_SetConfig+0x2e6>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ce:	e01e      	b.n	800620e <UART_SetConfig+0x2e6>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d6:	e01a      	b.n	800620e <UART_SetConfig+0x2e6>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061de:	e016      	b.n	800620e <UART_SetConfig+0x2e6>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e6:	e012      	b.n	800620e <UART_SetConfig+0x2e6>
 80061e8:	efff69f3 	.word	0xefff69f3
 80061ec:	40008000 	.word	0x40008000
 80061f0:	40013800 	.word	0x40013800
 80061f4:	40021000 	.word	0x40021000
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40004800 	.word	0x40004800
 8006200:	40004c00 	.word	0x40004c00
 8006204:	40005000 	.word	0x40005000
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a9f      	ldr	r2, [pc, #636]	@ (8006490 <UART_SetConfig+0x568>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d17a      	bne.n	800630e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006218:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800621c:	2b08      	cmp	r3, #8
 800621e:	d824      	bhi.n	800626a <UART_SetConfig+0x342>
 8006220:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <UART_SetConfig+0x300>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800624d 	.word	0x0800624d
 800622c:	0800626b 	.word	0x0800626b
 8006230:	08006255 	.word	0x08006255
 8006234:	0800626b 	.word	0x0800626b
 8006238:	0800625b 	.word	0x0800625b
 800623c:	0800626b 	.word	0x0800626b
 8006240:	0800626b 	.word	0x0800626b
 8006244:	0800626b 	.word	0x0800626b
 8006248:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fd f94c 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8006250:	61f8      	str	r0, [r7, #28]
        break;
 8006252:	e010      	b.n	8006276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b8f      	ldr	r3, [pc, #572]	@ (8006494 <UART_SetConfig+0x56c>)
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e00d      	b.n	8006276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fd f8af 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800625e:	61f8      	str	r0, [r7, #28]
        break;
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006266:	61fb      	str	r3, [r7, #28]
        break;
 8006268:	e005      	b.n	8006276 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80fb 	beq.w	8006474 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	429a      	cmp	r2, r3
 800628c:	d305      	bcc.n	800629a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062a0:	e0e8      	b.n	8006474 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2200      	movs	r2, #0
 80062a6:	461c      	mov	r4, r3
 80062a8:	4615      	mov	r5, r2
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	022b      	lsls	r3, r5, #8
 80062b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062b8:	0222      	lsls	r2, r4, #8
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	6849      	ldr	r1, [r1, #4]
 80062be:	0849      	lsrs	r1, r1, #1
 80062c0:	2000      	movs	r0, #0
 80062c2:	4688      	mov	r8, r1
 80062c4:	4681      	mov	r9, r0
 80062c6:	eb12 0a08 	adds.w	sl, r2, r8
 80062ca:	eb43 0b09 	adc.w	fp, r3, r9
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062dc:	4650      	mov	r0, sl
 80062de:	4659      	mov	r1, fp
 80062e0:	f7f9 ff72 	bl	80001c8 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4613      	mov	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062f2:	d308      	bcc.n	8006306 <UART_SetConfig+0x3de>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062fa:	d204      	bcs.n	8006306 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e0b6      	b.n	8006474 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800630c:	e0b2      	b.n	8006474 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006316:	d15e      	bne.n	80063d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006318:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800631c:	2b08      	cmp	r3, #8
 800631e:	d828      	bhi.n	8006372 <UART_SetConfig+0x44a>
 8006320:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <UART_SetConfig+0x400>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800634d 	.word	0x0800634d
 800632c:	08006355 	.word	0x08006355
 8006330:	0800635d 	.word	0x0800635d
 8006334:	08006373 	.word	0x08006373
 8006338:	08006363 	.word	0x08006363
 800633c:	08006373 	.word	0x08006373
 8006340:	08006373 	.word	0x08006373
 8006344:	08006373 	.word	0x08006373
 8006348:	0800636b 	.word	0x0800636b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fd f8cc 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8006350:	61f8      	str	r0, [r7, #28]
        break;
 8006352:	e014      	b.n	800637e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006354:	f7fd f8de 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8006358:	61f8      	str	r0, [r7, #28]
        break;
 800635a:	e010      	b.n	800637e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800635c:	4b4d      	ldr	r3, [pc, #308]	@ (8006494 <UART_SetConfig+0x56c>)
 800635e:	61fb      	str	r3, [r7, #28]
        break;
 8006360:	e00d      	b.n	800637e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006362:	f7fd f82b 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 8006366:	61f8      	str	r0, [r7, #28]
        break;
 8006368:	e009      	b.n	800637e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800636e:	61fb      	str	r3, [r7, #28]
        break;
 8006370:	e005      	b.n	800637e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800637c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d077      	beq.n	8006474 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	005a      	lsls	r2, r3, #1
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	441a      	add	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b0f      	cmp	r3, #15
 800639e:	d916      	bls.n	80063ce <UART_SetConfig+0x4a6>
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a6:	d212      	bcs.n	80063ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f023 030f 	bic.w	r3, r3, #15
 80063b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	b29a      	uxth	r2, r3
 80063be:	8afb      	ldrh	r3, [r7, #22]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	8afa      	ldrh	r2, [r7, #22]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e052      	b.n	8006474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063d4:	e04e      	b.n	8006474 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d827      	bhi.n	800642e <UART_SetConfig+0x506>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x4bc>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006419 	.word	0x08006419
 80063f0:	0800642f 	.word	0x0800642f
 80063f4:	0800641f 	.word	0x0800641f
 80063f8:	0800642f 	.word	0x0800642f
 80063fc:	0800642f 	.word	0x0800642f
 8006400:	0800642f 	.word	0x0800642f
 8006404:	08006427 	.word	0x08006427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006408:	f7fd f86e 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 800640c:	61f8      	str	r0, [r7, #28]
        break;
 800640e:	e014      	b.n	800643a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fd f880 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8006414:	61f8      	str	r0, [r7, #28]
        break;
 8006416:	e010      	b.n	800643a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006418:	4b1e      	ldr	r3, [pc, #120]	@ (8006494 <UART_SetConfig+0x56c>)
 800641a:	61fb      	str	r3, [r7, #28]
        break;
 800641c:	e00d      	b.n	800643a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641e:	f7fc ffcd 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 8006422:	61f8      	str	r0, [r7, #28]
        break;
 8006424:	e009      	b.n	800643a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642a:	61fb      	str	r3, [r7, #28]
        break;
 800642c:	e005      	b.n	800643a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006438:	bf00      	nop
    }

    if (pclk != 0U)
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d019      	beq.n	8006474 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	085a      	lsrs	r2, r3, #1
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	441a      	add	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	d909      	bls.n	800646e <UART_SetConfig+0x546>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006460:	d205      	bcs.n	800646e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e002      	b.n	8006474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006480:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	@ 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648e:	bf00      	nop
 8006490:	40008000 	.word	0x40008000
 8006494:	00f42400 	.word	0x00f42400

08006498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01a      	beq.n	80065ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006596:	d10a      	bne.n	80065ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b098      	sub	sp, #96	@ 0x60
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065ec:	f7fb fc3c 	bl	8001e68 <HAL_GetTick>
 80065f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d12e      	bne.n	800665e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006608:	2200      	movs	r2, #0
 800660a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f88c 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d021      	beq.n	800665e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006638:	647b      	str	r3, [r7, #68]	@ 0x44
 800663a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800663e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e062      	b.n	8006724 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b04      	cmp	r3, #4
 800666a:	d149      	bne.n	8006700 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f856 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d03c      	beq.n	8006700 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	623b      	str	r3, [r7, #32]
   return(result);
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e6      	bne.n	8006686 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d8:	61fa      	str	r2, [r7, #28]
 80066da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	617b      	str	r3, [r7, #20]
   return(result);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e011      	b.n	8006724 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3758      	adds	r7, #88	@ 0x58
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673c:	e04f      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d04b      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006746:	f7fb fb8f 	bl	8001e68 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <UART_WaitOnFlagUntilTimeout+0x30>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e04e      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d037      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d034      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d031      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d110      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f838 	bl	8006806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2208      	movs	r2, #8
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e029      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b8:	d111      	bne.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f81e 	bl	8006806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e00f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d0a0      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006806:	b480      	push	{r7}
 8006808:	b095      	sub	sp, #84	@ 0x54
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682c:	643b      	str	r3, [r7, #64]	@ 0x40
 800682e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3308      	adds	r3, #8
 8006846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006878:	2b01      	cmp	r3, #1
 800687a:	d118      	bne.n	80068ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	60bb      	str	r3, [r7, #8]
   return(result);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 0310 	bic.w	r3, r3, #16
 8006890:	647b      	str	r3, [r7, #68]	@ 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6979      	ldr	r1, [r7, #20]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	613b      	str	r3, [r7, #16]
   return(result);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068c2:	bf00      	nop
 80068c4:	3754      	adds	r7, #84	@ 0x54
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <memset>:
 80068ce:	4402      	add	r2, r0
 80068d0:	4603      	mov	r3, r0
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d100      	bne.n	80068d8 <memset+0xa>
 80068d6:	4770      	bx	lr
 80068d8:	f803 1b01 	strb.w	r1, [r3], #1
 80068dc:	e7f9      	b.n	80068d2 <memset+0x4>
	...

080068e0 <__libc_init_array>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006918 <__libc_init_array+0x38>)
 80068e4:	4c0d      	ldr	r4, [pc, #52]	@ (800691c <__libc_init_array+0x3c>)
 80068e6:	1b64      	subs	r4, r4, r5
 80068e8:	10a4      	asrs	r4, r4, #2
 80068ea:	2600      	movs	r6, #0
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	d109      	bne.n	8006904 <__libc_init_array+0x24>
 80068f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006920 <__libc_init_array+0x40>)
 80068f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006924 <__libc_init_array+0x44>)
 80068f4:	f000 f826 	bl	8006944 <_init>
 80068f8:	1b64      	subs	r4, r4, r5
 80068fa:	10a4      	asrs	r4, r4, #2
 80068fc:	2600      	movs	r6, #0
 80068fe:	42a6      	cmp	r6, r4
 8006900:	d105      	bne.n	800690e <__libc_init_array+0x2e>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	f855 3b04 	ldr.w	r3, [r5], #4
 8006908:	4798      	blx	r3
 800690a:	3601      	adds	r6, #1
 800690c:	e7ee      	b.n	80068ec <__libc_init_array+0xc>
 800690e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006912:	4798      	blx	r3
 8006914:	3601      	adds	r6, #1
 8006916:	e7f2      	b.n	80068fe <__libc_init_array+0x1e>
 8006918:	08030548 	.word	0x08030548
 800691c:	08030548 	.word	0x08030548
 8006920:	08030548 	.word	0x08030548
 8006924:	0803054c 	.word	0x0803054c

08006928 <memcpy>:
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	4770      	bx	lr
 8006934:	b510      	push	{r4, lr}
 8006936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693e:	4291      	cmp	r1, r2
 8006940:	d1f9      	bne.n	8006936 <memcpy+0xe>
 8006942:	bd10      	pop	{r4, pc}

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
