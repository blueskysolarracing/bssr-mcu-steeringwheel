
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000641c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00029c24  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080301d0  080301d0  00032098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080301d0  080301d0  000311d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080301d8  080301d8  00032098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080301d8  080301d8  000311d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080301dc  080301dc  000311dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080301e0  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008280  20000098  08030278  00032098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008318  08030278  00032318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014105  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1f  00000000  00000000  000461cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000490f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e20  00000000  00000000  0004a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256f5  00000000  00000000  0004b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001779b  00000000  00000000  00070835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e43b0  00000000  00000000  00087fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005068  00000000  00000000  0016c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0017142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006594 	.word	0x08006594

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08006594 	.word	0x08006594

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_DMA_Init+0x60>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <MX_DMA_Init+0x60>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_DMA_Init+0x60>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <MX_DMA_Init+0x60>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ce:	4a0f      	ldr	r2, [pc, #60]	@ (800060c <MX_DMA_Init+0x60>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <MX_DMA_Init+0x60>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	200c      	movs	r0, #12
 80005e8:	f001 fcf3 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f001 fd0c 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2039      	movs	r0, #57	@ 0x39
 80005f8:	f001 fceb 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80005fc:	2039      	movs	r0, #57	@ 0x39
 80005fe:	f001 fd04 	bl	800200a <HAL_NVIC_EnableIRQ>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b53      	ldr	r3, [pc, #332]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a52      	ldr	r2, [pc, #328]	@ (8000774 <MX_GPIO_Init+0x164>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b4d      	ldr	r3, [pc, #308]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a4c      	ldr	r2, [pc, #304]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b4a      	ldr	r3, [pc, #296]	@ (8000774 <MX_GPIO_Init+0x164>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a46      	ldr	r2, [pc, #280]	@ (8000774 <MX_GPIO_Init+0x164>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b44      	ldr	r3, [pc, #272]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a40      	ldr	r2, [pc, #256]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <MX_GPIO_Init+0x164>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b3b      	ldr	r3, [pc, #236]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a3a      	ldr	r2, [pc, #232]	@ (8000774 <MX_GPIO_Init+0x164>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <MX_GPIO_Init+0x164>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	4835      	ldr	r0, [pc, #212]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006a4:	f002 f886 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80006a8:	2200      	movs	r2, #0
 80006aa:	f640 4116 	movw	r1, #3094	@ 0xc16
 80006ae:	4833      	ldr	r0, [pc, #204]	@ (800077c <MX_GPIO_Init+0x16c>)
 80006b0:	f002 f880 	bl	80027b4 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	4831      	ldr	r0, [pc, #196]	@ (8000780 <MX_GPIO_Init+0x170>)
 80006ba:	f002 f87b 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	482e      	ldr	r0, [pc, #184]	@ (800077c <MX_GPIO_Init+0x16c>)
 80006c4:	f002 f876 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006c8:	2310      	movs	r3, #16
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006cc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4826      	ldr	r0, [pc, #152]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006de:	f001 fea7 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80006e2:	2320      	movs	r3, #32
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	481f      	ldr	r0, [pc, #124]	@ (8000778 <MX_GPIO_Init+0x168>)
 80006fa:	f001 fe99 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	481a      	ldr	r0, [pc, #104]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000712:	f001 fe8d 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 8000716:	f640 4316 	movw	r3, #3094	@ 0xc16
 800071a:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000730:	f001 fe7e 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000734:	2304      	movs	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	@ (8000780 <MX_GPIO_Init+0x170>)
 800074c:	f001 fe70 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_GPIO_Init+0x16c>)
 8000768:	f001 fe62 	bl	8002430 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000800 	.word	0x48000800
 800077c:	48000400 	.word	0x48000400
 8000780:	48000c00 	.word	0x48000c00

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	48b5      	ldr	r0, [pc, #724]	@ (8000a68 <main+0x2e4>)
 8000792:	f002 f80f 	bl	80027b4 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f001 faa9 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f98d 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f7ff ff37 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a2:	f7ff ff03 	bl	80005ac <MX_DMA_Init>
  MX_SPI1_Init();
 80007a6:	f000 f9eb 	bl	8000b80 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007aa:	f000 fa23 	bl	8000bf4 <MX_SPI3_Init>
  MX_TIM2_Init();
 80007ae:	f000 fbdf 	bl	8000f70 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007b2:	f000 fc9f 	bl	80010f4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 fdcb 	bl	8001350 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007ba:	f000 fc35 	bl	8001028 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 500;
 80007be:	4bab      	ldr	r3, [pc, #684]	@ (8000a6c <main+0x2e8>)
 80007c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	48a9      	ldr	r0, [pc, #676]	@ (8000a70 <main+0x2ec>)
 80007ca:	f003 fedd 	bl	8004588 <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 5000;
 80007ce:	4ba7      	ldr	r3, [pc, #668]	@ (8000a6c <main+0x2e8>)
 80007d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80007d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007d6:	2108      	movs	r1, #8
 80007d8:	48a5      	ldr	r0, [pc, #660]	@ (8000a70 <main+0x2ec>)
 80007da:	f003 fed5 	bl	8004588 <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80007de:	4ba5      	ldr	r3, [pc, #660]	@ (8000a74 <main+0x2f0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007e4:	2104      	movs	r1, #4
 80007e6:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <main+0x2f4>)
 80007e8:	f003 fece 	bl	8004588 <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80007ec:	4ba1      	ldr	r3, [pc, #644]	@ (8000a74 <main+0x2f0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007f2:	2108      	movs	r1, #8
 80007f4:	48a0      	ldr	r0, [pc, #640]	@ (8000a78 <main+0x2f4>)
 80007f6:	f003 fec7 	bl	8004588 <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80007fa:	4ba0      	ldr	r3, [pc, #640]	@ (8000a7c <main+0x2f8>)
 80007fc:	4aa0      	ldr	r2, [pc, #640]	@ (8000a80 <main+0x2fc>)
 80007fe:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 8000800:	4b9e      	ldr	r3, [pc, #632]	@ (8000a7c <main+0x2f8>)
 8000802:	4aa0      	ldr	r2, [pc, #640]	@ (8000a84 <main+0x300>)
 8000804:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 8000806:	4b9d      	ldr	r3, [pc, #628]	@ (8000a7c <main+0x2f8>)
 8000808:	2204      	movs	r2, #4
 800080a:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 800080c:	4b9b      	ldr	r3, [pc, #620]	@ (8000a7c <main+0x2f8>)
 800080e:	4a9e      	ldr	r2, [pc, #632]	@ (8000a88 <main+0x304>)
 8000810:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 8000812:	4b9a      	ldr	r3, [pc, #616]	@ (8000a7c <main+0x2f8>)
 8000814:	2204      	movs	r2, #4
 8000816:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 8000818:	4b98      	ldr	r3, [pc, #608]	@ (8000a7c <main+0x2f8>)
 800081a:	4a93      	ldr	r2, [pc, #588]	@ (8000a68 <main+0x2e4>)
 800081c:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 800081e:	4b97      	ldr	r3, [pc, #604]	@ (8000a7c <main+0x2f8>)
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000824:	4b95      	ldr	r3, [pc, #596]	@ (8000a7c <main+0x2f8>)
 8000826:	4a90      	ldr	r2, [pc, #576]	@ (8000a68 <main+0x2e4>)
 8000828:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 800082a:	4b94      	ldr	r3, [pc, #592]	@ (8000a7c <main+0x2f8>)
 800082c:	2210      	movs	r2, #16
 800082e:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 8000830:	4b92      	ldr	r3, [pc, #584]	@ (8000a7c <main+0x2f8>)
 8000832:	4a96      	ldr	r2, [pc, #600]	@ (8000a8c <main+0x308>)
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000836:	4b96      	ldr	r3, [pc, #600]	@ (8000a90 <main+0x30c>)
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	4b90      	ldr	r3, [pc, #576]	@ (8000a7c <main+0x2f8>)
 800083c:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 800083e:	4b8f      	ldr	r3, [pc, #572]	@ (8000a7c <main+0x2f8>)
 8000840:	4a94      	ldr	r2, [pc, #592]	@ (8000a94 <main+0x310>)
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
 800084a:	e012      	b.n	8000872 <main+0xee>
		ls032.registers[i].str = ls032_registers_text[i];
 800084c:	f897 2407 	ldrb.w	r2, [r7, #1031]	@ 0x407
 8000850:	4b8a      	ldr	r3, [pc, #552]	@ (8000a7c <main+0x2f8>)
 8000852:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000854:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	4419      	add	r1, r3
 800085c:	4613      	mov	r3, r2
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	4a8d      	ldr	r2, [pc, #564]	@ (8000a98 <main+0x314>)
 8000864:	4413      	add	r3, r2
 8000866:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 8000868:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 800086c:	3301      	adds	r3, #1
 800086e:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
 8000872:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 8000876:	2b1f      	cmp	r3, #31
 8000878:	d9e8      	bls.n	800084c <main+0xc8>

	if (LS032_Init(&ls032)) {
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <main+0x2f8>)
 800087c:	f000 ff4f 	bl	800171e <LS032_Init>
		// TODO: Error Handle
	}

	// SET UP THE INPUTS LIBRARY
	inputs.sel_gpio_handles = input_sel_gpio_ports;
 8000880:	4b86      	ldr	r3, [pc, #536]	@ (8000a9c <main+0x318>)
 8000882:	4a87      	ldr	r2, [pc, #540]	@ (8000aa0 <main+0x31c>)
 8000884:	611a      	str	r2, [r3, #16]
	inputs.sel_gpio_pins = input_sel_gpio_pins;
 8000886:	4b85      	ldr	r3, [pc, #532]	@ (8000a9c <main+0x318>)
 8000888:	4a86      	ldr	r2, [pc, #536]	@ (8000aa4 <main+0x320>)
 800088a:	615a      	str	r2, [r3, #20]
	inputs.it_gpio_handle = INPUT_IT_GPIO_Port;
 800088c:	4b83      	ldr	r3, [pc, #524]	@ (8000a9c <main+0x318>)
 800088e:	4a86      	ldr	r2, [pc, #536]	@ (8000aa8 <main+0x324>)
 8000890:	609a      	str	r2, [r3, #8]
	inputs.it_gpio_pin = INPUT_IT_Pin;
 8000892:	4b82      	ldr	r3, [pc, #520]	@ (8000a9c <main+0x318>)
 8000894:	2220      	movs	r2, #32
 8000896:	819a      	strh	r2, [r3, #12]
	inputs.state_gpio_handle = INPUT_STATE_GPIO_Port;
 8000898:	4b80      	ldr	r3, [pc, #512]	@ (8000a9c <main+0x318>)
 800089a:	4a73      	ldr	r2, [pc, #460]	@ (8000a68 <main+0x2e4>)
 800089c:	601a      	str	r2, [r3, #0]
	inputs.state_gpio_pin = INPUT_STATE_Pin;
 800089e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a9c <main+0x318>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	809a      	strh	r2, [r3, #4]
	inputs.states = 0x0000;
 80008a4:	4b7d      	ldr	r3, [pc, #500]	@ (8000a9c <main+0x318>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	831a      	strh	r2, [r3, #24]
	inputs.states_itmask = 0xFFFF;
 80008aa:	4b7c      	ldr	r3, [pc, #496]	@ (8000a9c <main+0x318>)
 80008ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b0:	835a      	strh	r2, [r3, #26]

	LS032_DrawLogo(&ls032);
 80008b2:	4872      	ldr	r0, [pc, #456]	@ (8000a7c <main+0x2f8>)
 80008b4:	f001 f924 	bl	8001b00 <LS032_DrawLogo>
	//LS032_Update(&ls032);

	uint8_t tmp_num = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3406 	strb.w	r3, [r7, #1030]	@ 0x406
	char speed_letters[255];
	char speed_bars_1[255];
	char speed_bars_2[255];
	char *speed_units = "KM/H";
 80008be:	4b7b      	ldr	r3, [pc, #492]	@ (8000aac <main+0x328>)
 80008c0:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
	char inputs_vis[255];

	memset(speed_bars_1, '/', 255);
 80008c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80008c8:	22ff      	movs	r2, #255	@ 0xff
 80008ca:	212f      	movs	r1, #47	@ 0x2f
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 f9e3 	bl	8005c98 <memset>
	memset(speed_bars_2, '\\', 255);
 80008d2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80008d6:	22ff      	movs	r2, #255	@ 0xff
 80008d8:	215c      	movs	r1, #92	@ 0x5c
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 f9dc 	bl	8005c98 <memset>

	LS032_TextReg_SetPos(&ls032, 0x02, 380, 26);
 80008e0:	231a      	movs	r3, #26
 80008e2:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80008e6:	2102      	movs	r1, #2
 80008e8:	4864      	ldr	r0, [pc, #400]	@ (8000a7c <main+0x2f8>)
 80008ea:	f000 ffed 	bl	80018c8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x02, 3);
 80008ee:	2203      	movs	r2, #3
 80008f0:	2102      	movs	r1, #2
 80008f2:	4862      	ldr	r0, [pc, #392]	@ (8000a7c <main+0x2f8>)
 80008f4:	f001 f81d 	bl	8001932 <LS032_TextReg_SetSize>

	LS032_TextReg_SetString(&ls032, 0x03, strlen(speed_units), speed_units);
 80008f8:	f8d7 0400 	ldr.w	r0, [r7, #1024]	@ 0x400
 80008fc:	f7ff fc68 	bl	80001d0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b2da      	uxtb	r2, r3
 8000904:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8000908:	2103      	movs	r1, #3
 800090a:	485c      	ldr	r0, [pc, #368]	@ (8000a7c <main+0x2f8>)
 800090c:	f001 f834 	bl	8001978 <LS032_TextReg_SetString>
	LS032_TextReg_SetPos(&ls032, 0x03, 420, 24);
 8000910:	2318      	movs	r3, #24
 8000912:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000916:	2103      	movs	r1, #3
 8000918:	4858      	ldr	r0, [pc, #352]	@ (8000a7c <main+0x2f8>)
 800091a:	f000 ffd5 	bl	80018c8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x03, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	2103      	movs	r1, #3
 8000922:	4856      	ldr	r0, [pc, #344]	@ (8000a7c <main+0x2f8>)
 8000924:	f001 f805 	bl	8001932 <LS032_TextReg_SetSize>

	LS032_TextReg_SetPos(&ls032, 0x00, 0, 30);
 8000928:	231e      	movs	r3, #30
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	4853      	ldr	r0, [pc, #332]	@ (8000a7c <main+0x2f8>)
 8000930:	f000 ffca 	bl	80018c8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x00, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	2100      	movs	r1, #0
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <main+0x2f8>)
 800093a:	f000 fffa 	bl	8001932 <LS032_TextReg_SetSize>
	LS032_TextReg_SetPos(&ls032, 0x01, 0, 34);
 800093e:	2322      	movs	r3, #34	@ 0x22
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	484d      	ldr	r0, [pc, #308]	@ (8000a7c <main+0x2f8>)
 8000946:	f000 ffbf 	bl	80018c8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x01, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	484b      	ldr	r0, [pc, #300]	@ (8000a7c <main+0x2f8>)
 8000950:	f000 ffef 	bl	8001932 <LS032_TextReg_SetSize>

	LS032_TextReg_SetPos(&ls032, 0x04, 00, 0);
 8000954:	2300      	movs	r3, #0
 8000956:	2200      	movs	r2, #0
 8000958:	2104      	movs	r1, #4
 800095a:	4848      	ldr	r0, [pc, #288]	@ (8000a7c <main+0x2f8>)
 800095c:	f000 ffb4 	bl	80018c8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x04, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	2104      	movs	r1, #4
 8000964:	4845      	ldr	r0, [pc, #276]	@ (8000a7c <main+0x2f8>)
 8000966:	f000 ffe4 	bl	8001932 <LS032_TextReg_SetSize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(speed_letters, "%d", tmp_num);
 800096a:	f897 2406 	ldrb.w	r2, [r7, #1030]	@ 0x406
 800096e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000972:	494f      	ldr	r1, [pc, #316]	@ (8000ab0 <main+0x32c>)
 8000974:	4618      	mov	r0, r3
 8000976:	f005 f96d 	bl	8005c54 <siprintf>

	  LS032_Clear(&ls032);
 800097a:	4840      	ldr	r0, [pc, #256]	@ (8000a7c <main+0x2f8>)
 800097c:	f001 f84e 	bl	8001a1c <LS032_Clear>

	  LS032_TextReg_SetString(&ls032, 0x02, strlen(speed_letters), speed_letters);
 8000980:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fc23 	bl	80001d0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b2da      	uxtb	r2, r3
 800098e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8000992:	2102      	movs	r1, #2
 8000994:	4839      	ldr	r0, [pc, #228]	@ (8000a7c <main+0x2f8>)
 8000996:	f000 ffef 	bl	8001978 <LS032_TextReg_SetString>

	  LS032_TextReg_SetPos(&ls032, 0x00, (tmp_num % 5)*4, 30);
 800099a:	f897 2406 	ldrb.w	r2, [r7, #1030]	@ 0x406
 800099e:	4b45      	ldr	r3, [pc, #276]	@ (8000ab4 <main+0x330>)
 80009a0:	fba3 1302 	umull	r1, r3, r3, r2
 80009a4:	0899      	lsrs	r1, r3, #2
 80009a6:	460b      	mov	r3, r1
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	231e      	movs	r3, #30
 80009b6:	2100      	movs	r1, #0
 80009b8:	4830      	ldr	r0, [pc, #192]	@ (8000a7c <main+0x2f8>)
 80009ba:	f000 ff85 	bl	80018c8 <LS032_TextReg_SetPos>
	  LS032_TextReg_SetPos(&ls032, 0x01, (tmp_num % 5)*4, 34);
 80009be:	f897 2406 	ldrb.w	r2, [r7, #1030]	@ 0x406
 80009c2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <main+0x330>)
 80009c4:	fba3 1302 	umull	r1, r3, r3, r2
 80009c8:	0899      	lsrs	r1, r3, #2
 80009ca:	460b      	mov	r3, r1
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	2322      	movs	r3, #34	@ 0x22
 80009da:	2101      	movs	r1, #1
 80009dc:	4827      	ldr	r0, [pc, #156]	@ (8000a7c <main+0x2f8>)
 80009de:	f000 ff73 	bl	80018c8 <LS032_TextReg_SetPos>
	  LS032_TextReg_SetString(&ls032, 0x00, tmp_num/5, speed_bars_1);
 80009e2:	f897 3406 	ldrb.w	r3, [r7, #1030]	@ 0x406
 80009e6:	4a33      	ldr	r2, [pc, #204]	@ (8000ab4 <main+0x330>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009f4:	2100      	movs	r1, #0
 80009f6:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <main+0x2f8>)
 80009f8:	f000 ffbe 	bl	8001978 <LS032_TextReg_SetString>
	  LS032_TextReg_SetString(&ls032, 0x01, tmp_num/5, speed_bars_2);
 80009fc:	f897 3406 	ldrb.w	r3, [r7, #1030]	@ 0x406
 8000a00:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab4 <main+0x330>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a0e:	2101      	movs	r1, #1
 8000a10:	481a      	ldr	r0, [pc, #104]	@ (8000a7c <main+0x2f8>)
 8000a12:	f000 ffb1 	bl	8001978 <LS032_TextReg_SetString>

	  // Check and write the inputs:
	  sprintf(inputs_vis, "%d", Inputs_CheckZero(&inputs));
 8000a16:	4821      	ldr	r0, [pc, #132]	@ (8000a9c <main+0x318>)
 8000a18:	f000 fd4f 	bl	80014ba <Inputs_CheckZero>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	463b      	mov	r3, r7
 8000a22:	4923      	ldr	r1, [pc, #140]	@ (8000ab0 <main+0x32c>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 f915 	bl	8005c54 <siprintf>
	  LS032_TextReg_SetString(&ls032, 0x04, strlen(inputs_vis), inputs_vis);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fbcf 	bl	80001d0 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	463b      	mov	r3, r7
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <main+0x2f8>)
 8000a3c:	f000 ff9c 	bl	8001978 <LS032_TextReg_SetString>


	  LS032_UpdateAsync(&ls032);
 8000a40:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <main+0x2f8>)
 8000a42:	f000 ffcc 	bl	80019de <LS032_UpdateAsync>

	  tmp_num += 1;
 8000a46:	f897 3406 	ldrb.w	r3, [r7, #1030]	@ 0x406
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f887 3406 	strb.w	r3, [r7, #1030]	@ 0x406
	  if (tmp_num > 99)
 8000a50:	f897 3406 	ldrb.w	r3, [r7, #1030]	@ 0x406
 8000a54:	2b63      	cmp	r3, #99	@ 0x63
 8000a56:	d902      	bls.n	8000a5e <main+0x2da>
		  tmp_num = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3406 	strb.w	r3, [r7, #1030]	@ 0x406

	  HAL_Delay(30);
 8000a5e:	201e      	movs	r0, #30
 8000a60:	f001 f9b8 	bl	8001dd4 <HAL_Delay>
	  sprintf(speed_letters, "%d", tmp_num);
 8000a64:	e781      	b.n	800096a <main+0x1e6>
 8000a66:	bf00      	nop
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	40000800 	.word	0x40000800
 8000a70:	200080f8 	.word	0x200080f8
 8000a74:	40000400 	.word	0x40000400
 8000a78:	200080ac 	.word	0x200080ac
 8000a7c:	200000b4 	.word	0x200000b4
 8000a80:	20007f68 	.word	0x20007f68
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	20008060 	.word	0x20008060
 8000a8c:	200000e4 	.word	0x200000e4
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20005d08 	.word	0x20005d08
 8000a98:	20005f08 	.word	0x20005f08
 8000a9c:	20007ee8 	.word	0x20007ee8
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	080065ac 	.word	0x080065ac
 8000ab0:	080065b4 	.word	0x080065b4
 8000ab4:	cccccccd 	.word	0xcccccccd

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b096      	sub	sp, #88	@ 0x58
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2244      	movs	r2, #68	@ 0x44
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 f8e6 	bl	8005c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ada:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ade:	f001 fe8f 	bl	8002800 <HAL_PWREx_ControlVoltageScaling>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae8:	f000 f844 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	2303      	movs	r3, #3
 8000afc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b02:	2308      	movs	r3, #8
 8000b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b06:	2307      	movs	r3, #7
 8000b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fec8 	bl	80028ac <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f827 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fa90 	bl	8003064 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b4a:	f000 f813 	bl	8000b74 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3758      	adds	r7, #88	@ 0x58
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_SPI_TxCpltCallback>:
      __NOP();
  }
}

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
//	ls032.spi_state = 0;
//	HAL_GPIO_WritePin(ls032.cs_gpio_handle, ls032.cs_gpio_pin, GPIO_PIN_RESET);
	LS032_TX_DMA_CPLT(&ls032);
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <HAL_SPI_TxCpltCallback+0x18>)
 8000b62:	f000 fe9d 	bl	80018a0 <LS032_TX_DMA_CPLT>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000b86:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf0 <MX_SPI1_Init+0x70>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000b98:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_SPI1_Init+0x6c>)
 8000bd8:	f003 f8f2 	bl	8003dc0 <HAL_SPI_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000be2:	f7ff ffc7 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20007f04 	.word	0x20007f04
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <MX_SPI3_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c0c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c10:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_SPI3_Init+0x74>)
 8000c56:	f003 f8b3 	bl	8003dc0 <HAL_SPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000c60:	f7ff ff88 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20007f68 	.word	0x20007f68
 8000c6c:	40003c00 	.word	0x40003c00

08000c70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a58      	ldr	r2, [pc, #352]	@ (8000df0 <HAL_SPI_MspInit+0x180>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d153      	bne.n	8000d3a <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c92:	4b58      	ldr	r3, [pc, #352]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c96:	4a57      	ldr	r2, [pc, #348]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c9e:	4b55      	ldr	r3, [pc, #340]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b52      	ldr	r3, [pc, #328]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a51      	ldr	r2, [pc, #324]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cc2:	23e0      	movs	r3, #224	@ 0xe0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce0:	f001 fba6 	bl	8002430 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ce4:	4b44      	ldr	r3, [pc, #272]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000ce6:	4a45      	ldr	r2, [pc, #276]	@ (8000dfc <HAL_SPI_MspInit+0x18c>)
 8000ce8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000cea:	4b43      	ldr	r3, [pc, #268]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf0:	4b41      	ldr	r3, [pc, #260]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	4b40      	ldr	r3, [pc, #256]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d02:	4b3d      	ldr	r3, [pc, #244]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d08:	4b3b      	ldr	r3, [pc, #236]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d14:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d1c:	4836      	ldr	r0, [pc, #216]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d1e:	f001 f98f 	bl	8002040 <HAL_DMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000d28:	f7ff ff24 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a32      	ldr	r2, [pc, #200]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d30:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d32:	4a31      	ldr	r2, [pc, #196]	@ (8000df8 <HAL_SPI_MspInit+0x188>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d38:	e056      	b.n	8000de8 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a30      	ldr	r2, [pc, #192]	@ (8000e00 <HAL_SPI_MspInit+0x190>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d151      	bne.n	8000de8 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d44:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <HAL_SPI_MspInit+0x184>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d86:	2306      	movs	r3, #6
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481c      	ldr	r0, [pc, #112]	@ (8000e04 <HAL_SPI_MspInit+0x194>)
 8000d92:	f001 fb4d 	bl	8002430 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000d98:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <HAL_SPI_MspInit+0x19c>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dcc:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000dce:	f001 f937 	bl	8002040 <HAL_DMA_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8000dd8:	f7ff fecc 	bl	8000b74 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000de2:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <HAL_SPI_MspInit+0x198>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	@ 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40013000 	.word	0x40013000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	20007fcc 	.word	0x20007fcc
 8000dfc:	4002001c 	.word	0x4002001c
 8000e00:	40003c00 	.word	0x40003c00
 8000e04:	48000800 	.word	0x48000800
 8000e08:	20008014 	.word	0x20008014
 8000e0c:	4002041c 	.word	0x4002041c

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	4a08      	ldr	r2, [pc, #32]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 ff71 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DMA1_Channel2_IRQHandler+0x10>)
 8000ebe:	f001 f9d7 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20007fcc 	.word	0x20007fcc

08000ecc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <DMA2_Channel2_IRQHandler+0x10>)
 8000ed2:	f001 f9cd 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20008014 	.word	0x20008014

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f004 feca 	bl	8005ca8 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20018000 	.word	0x20018000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	2000805c 	.word	0x2000805c
 8000f48:	20008318 	.word	0x20008318

08000f4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_TIM2_Init+0xac>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_TIM2_Init+0xac>)
 8000f9e:	2230      	movs	r2, #48	@ 0x30
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_TIM2_Init+0xac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_TIM2_Init+0xac>)
 8000faa:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <MX_TIM2_Init+0xb0>)
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <MX_TIM2_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_TIM2_Init+0xac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fba:	4818      	ldr	r0, [pc, #96]	@ (800101c <MX_TIM2_Init+0xac>)
 8000fbc:	f003 fa8c 	bl	80044d8 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fc6:	f7ff fdd5 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4810      	ldr	r0, [pc, #64]	@ (800101c <MX_TIM2_Init+0xac>)
 8000fda:	f004 f891 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fe4:	f7ff fdc6 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	@ 0x60
 8000fea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_TIM2_Init+0xb4>)
 8000fee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <MX_TIM2_Init+0xac>)
 8001000:	f003 fbc8 	bl	8004794 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800100a:	f7ff fdb3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800100e:	4803      	ldr	r0, [pc, #12]	@ (800101c <MX_TIM2_Init+0xac>)
 8001010:	f000 f91c 	bl	800124c <HAL_TIM_MspPostInit>

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20008060 	.word	0x20008060
 8001020:	0061a7ff 	.word	0x0061a7ff
 8001024:	0030d400 	.word	0x0030d400

08001028 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <MX_TIM3_Init+0xc4>)
 800104e:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <MX_TIM3_Init+0xc8>)
 8001050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <MX_TIM3_Init+0xc4>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <MX_TIM3_Init+0xc4>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800105e:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <MX_TIM3_Init+0xc4>)
 8001060:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <MX_TIM3_Init+0xc4>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <MX_TIM3_Init+0xc4>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001072:	481e      	ldr	r0, [pc, #120]	@ (80010ec <MX_TIM3_Init+0xc4>)
 8001074:	f003 fa30 	bl	80044d8 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800107e:	f7ff fd79 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4816      	ldr	r0, [pc, #88]	@ (80010ec <MX_TIM3_Init+0xc4>)
 8001092:	f004 f835 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800109c:	f7ff fd6a 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	@ 0x60
 80010a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80010a4:	2332      	movs	r3, #50	@ 0x32
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2204      	movs	r2, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_TIM3_Init+0xc4>)
 80010b8:	f003 fb6c 	bl	8004794 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80010c2:	f7ff fd57 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2208      	movs	r2, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM3_Init+0xc4>)
 80010ce:	f003 fb61 	bl	8004794 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80010d8:	f7ff fd4c 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM3_Init+0xc4>)
 80010de:	f000 f8b5 	bl	800124c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200080ac 	.word	0x200080ac
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 800111a:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <MX_TIM4_Init+0xc8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 800112c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001130:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800113e:	481e      	ldr	r0, [pc, #120]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 8001140:	f003 f9ca 	bl	80044d8 <HAL_TIM_PWM_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800114a:	f7ff fd13 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4816      	ldr	r0, [pc, #88]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 800115e:	f003 ffcf 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001168:	f7ff fd04 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116c:	2360      	movs	r3, #96	@ 0x60
 800116e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 8001184:	f003 fb06 	bl	8004794 <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800118e:	f7ff fcf1 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 800119a:	f003 fafb 	bl	8004794 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80011a4:	f7ff fce6 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM4_Init+0xc4>)
 80011aa:	f000 f84f 	bl	800124c <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200080f8 	.word	0x200080f8
 80011bc:	40000800 	.word	0x40000800

080011c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011d0:	d10c      	bne.n	80011ec <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011ea:	e022      	b.n	8001232 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <HAL_TIM_PWM_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10c      	bne.n	8001210 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
}
 800120e:	e010      	b.n	8001232 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <HAL_TIM_PWM_MspInit+0x88>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10b      	bne.n	8001232 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6593      	str	r3, [r2, #88]	@ 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_TIM_PWM_MspInit+0x80>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40000400 	.word	0x40000400
 8001248:	40000800 	.word	0x40000800

0800124c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800126c:	d11c      	bne.n	80012a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a32      	ldr	r2, [pc, #200]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8001286:	2308      	movs	r3, #8
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4827      	ldr	r0, [pc, #156]	@ (8001340 <HAL_TIM_MspPostInit+0xf4>)
 80012a2:	f001 f8c5 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012a6:	e044      	b.n	8001332 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <HAL_TIM_MspPostInit+0xf8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11d      	bne.n	80012ee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a21      	ldr	r2, [pc, #132]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 80012ca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012dc:	2302      	movs	r3, #2
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <HAL_TIM_MspPostInit+0xfc>)
 80012e8:	f001 f8a2 	bl	8002430 <HAL_GPIO_Init>
}
 80012ec:	e021      	b.n	8001332 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a16      	ldr	r2, [pc, #88]	@ (800134c <HAL_TIM_MspPostInit+0x100>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d11c      	bne.n	8001332 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <HAL_TIM_MspPostInit+0xf0>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8001310:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001322:	2302      	movs	r3, #2
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <HAL_TIM_MspPostInit+0xf4>)
 800132e:	f001 f87f 	bl	8002430 <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400
 8001344:	40000400 	.word	0x40000400
 8001348:	48000800 	.word	0x48000800
 800134c:	40000800 	.word	0x40000800

08001350 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <MX_USART2_UART_Init+0x5c>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001394:	f003 ff3c 	bl	8005210 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800139e:	f7ff fbe9 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20008144 	.word	0x20008144
 80013ac:	40004400 	.word	0x40004400

080013b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0aa      	sub	sp, #168	@ 0xa8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2284      	movs	r2, #132	@ 0x84
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fc61 	bl	8005c98 <memset>
  if(uartHandle->Instance==USART2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_UART_MspInit+0xb0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13b      	bne.n	8001458 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 f85b 	bl	80034a8 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f8:	f7ff fbbc 	bl	8000b74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001406:	6593      	str	r3, [r2, #88]	@ 0x58
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800142c:	230c      	movs	r3, #12
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001444:	2307      	movs	r3, #7
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001454:	f000 ffec 	bl	8002430 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	37a8      	adds	r7, #168	@ 0xa8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff fd6e 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f004 fc0d 	bl	8005cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f973 	bl	8000784 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80014ac:	080301e0 	.word	0x080301e0
  ldr r2, =_sbss
 80014b0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80014b4:	20008318 	.word	0x20008318

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <Inputs_CheckZero>:
		HAL_GPIO_WritePin(inputs->it_gpio_handle, inputs->it_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t Inputs_CheckZero(Inputs_HandleTypeDef *inputs) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[3], inputs->sel_gpio_pins[3], 0);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	330c      	adds	r3, #12
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	3306      	adds	r3, #6
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	f001 f96d 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[2], inputs->sel_gpio_pins[2], 0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	3308      	adds	r3, #8
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	3304      	adds	r3, #4
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	f001 f961 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[1], inputs->sel_gpio_pins[1], 0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	3304      	adds	r3, #4
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	3302      	adds	r3, #2
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	f001 f955 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inputs->sel_gpio_handles[0], inputs->sel_gpio_pins[0], 0);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	f001 f94b 	bl	80027b4 <HAL_GPIO_WritePin>

	return HAL_GPIO_ReadPin(inputs->state_gpio_handle, inputs->state_gpio_pin);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	889b      	ldrh	r3, [r3, #4]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f001 f92b 	bl	8002784 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e003      	b.n	800154e <delay_us+0x16>
		asm("NOP");
 8001546:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3f6      	bcc.n	8001546 <delay_us+0xe>
	}
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	6039      	str	r1, [r7, #0]
 8001570:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed (FLIPPED)
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 8001578:	80fb      	strh	r3, [r7, #6]
	//gate_addr++;										// gate is 1 indexed (NORMAL)
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b25b      	sxtb	r3, r3
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b25b      	sxtb	r3, r3
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b25b      	sxtb	r3, r3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	105b      	asrs	r3, r3, #1
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25a      	sxtb	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b25a      	sxtb	r2, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	b25b      	sxtb	r3, r3
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b25a      	sxtb	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25a      	sxtb	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	105b      	asrs	r3, r3, #1
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	b25b      	sxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b25a      	sxtb	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25a      	sxtb	r2, r3
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	10db      	asrs	r3, r3, #3
 800164c:	b25b      	sxtb	r3, r3
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25a      	sxtb	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25a      	sxtb	r2, r3
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	115b      	asrs	r3, r3, #5
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	b25b      	sxtb	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b25a      	sxtb	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25a      	sxtb	r2, r3
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	11db      	asrs	r3, r3, #7
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b25a      	sxtb	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	125b      	asrs	r3, r3, #9
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	603a      	str	r2, [r7, #0]
 80016d6:	80fb      	strh	r3, [r7, #6]
 80016d8:	460b      	mov	r3, r1
 80016da:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80016e2:	d301      	bcc.n	80016e8 <get_idx_from_pos+0x1c>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e014      	b.n	8001712 <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	2b29      	cmp	r3, #41	@ 0x29
 80016ec:	d901      	bls.n	80016f2 <get_idx_from_pos+0x26>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	461a      	mov	r2, r3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	441a      	add	r2, r3
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	b29a      	uxth	r2, r3
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	b29b      	uxth	r3, r3
 8001708:	3302      	adds	r3, #2
 800170a:	b29a      	uxth	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172e:	461a      	mov	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	f004 fab1 	bl	8005c98 <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001736:	2300      	movs	r3, #0
 8001738:	81fb      	strh	r3, [r7, #14]
 800173a:	e00e      	b.n	800175a <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	89fa      	ldrh	r2, [r7, #14]
 8001742:	212c      	movs	r1, #44	@ 0x2c
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	441a      	add	r2, r3
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff09 	bl	8001566 <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	3301      	adds	r3, #1
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001760:	d3ec      	bcc.n	800173c <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001762:	2300      	movs	r3, #0
 8001764:	737b      	strb	r3, [r7, #13]
 8001766:	e030      	b.n	80017ca <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176c:	7b7b      	ldrb	r3, [r7, #13]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	7b7b      	ldrb	r3, [r7, #13]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	2200      	movs	r2, #0
 800179e:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b2:	7b7b      	ldrb	r3, [r7, #13]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	22ff      	movs	r2, #255	@ 0xff
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fa6a 	bl	8005c98 <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	3301      	adds	r3, #1
 80017c8:	737b      	strb	r3, [r7, #13]
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	d9cb      	bls.n	8001768 <LS032_Init+0x4a>
	}

	// Flag SPI as Idle
	ls032->spi_state = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	729a      	strb	r2, [r3, #10]
	ls032->update_queued = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	72da      	strb	r2, [r3, #11]

	delay_us(30);
 80017dc:	201e      	movs	r0, #30
 80017de:	f7ff feab 	bl	8001538 <delay_us>
	// Need to clear twice for some reason
	//LS032_Wipe(ls032);
	//LS032_Wipe(ls032);
	delay_us(30);
 80017e2:	201e      	movs	r0, #30
 80017e4:	f7ff fea8 	bl	8001538 <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69d8      	ldr	r0, [r3, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	8c1b      	ldrh	r3, [r3, #32]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4619      	mov	r1, r3
 80017f4:	f000 ffde 	bl	80027b4 <HAL_GPIO_WritePin>
	delay_us(30);
 80017f8:	201e      	movs	r0, #30
 80017fa:	f7ff fe9d 	bl	8001538 <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	8a1b      	ldrh	r3, [r3, #16]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f002 febd 	bl	8004588 <HAL_TIM_PWM_Start>
	delay_us(30);
 800180e:	201e      	movs	r0, #30
 8001810:	f7ff fe92 	bl	8001538 <delay_us>
	return SUCCESS;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <LS032_TX_DMA>:

uint8_t LS032_TX_DMA(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	4613      	mov	r3, r2
 800182a:	80fb      	strh	r3, [r7, #6]
	if (ls032->spi_state != 0) return ERROR;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	7a9b      	ldrb	r3, [r3, #10]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <LS032_TX_DMA+0x1a>
 8001834:	2301      	movs	r3, #1
 8001836:	e02f      	b.n	8001898 <LS032_TX_DMA+0x7a>

	// Clear update queue
	ls032->update_queued = 0;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	72da      	strb	r2, [r3, #11]

	uint8_t ret = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6858      	ldr	r0, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	891b      	ldrh	r3, [r3, #8]
 800184a:	2201      	movs	r2, #1
 800184c:	4619      	mov	r1, r3
 800184e:	f000 ffb1 	bl	80027b4 <HAL_GPIO_WritePin>
	delay_us(3);
 8001852:	2003      	movs	r0, #3
 8001854:	f7ff fe70 	bl	8001538 <delay_us>
	ret = HAL_SPI_Transmit_DMA(ls032->spi_handle, pData, len);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	88fa      	ldrh	r2, [r7, #6]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fb51 	bl	8003f08 <HAL_SPI_Transmit_DMA>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
	ls032->spi_state = 1; // Flag SPI as BUSY
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	729a      	strb	r2, [r3, #10]
	delay_us(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fe61 	bl	8001538 <delay_us>
	if (ret) {
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <LS032_TX_DMA+0x78>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f000 ff94 	bl	80027b4 <HAL_GPIO_WritePin>
		ls032->spi_state = 0;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	729a      	strb	r2, [r3, #10]
		return ret;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	e000      	b.n	8001898 <LS032_TX_DMA+0x7a>
	}

	return SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LS032_TX_DMA_CPLT>:

uint8_t LS032_TX_DMA_CPLT(LS032_HandleTypeDef *ls032) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	// Release the CS
	ls032->spi_state = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6858      	ldr	r0, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	891b      	ldrh	r3, [r3, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	f000 ff7b 	bl	80027b4 <HAL_GPIO_WritePin>

	return SUCCESS;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	72fb      	strb	r3, [r7, #11]
 80018da:	460b      	mov	r3, r1
 80018dc:	813b      	strh	r3, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	d901      	bls.n	80018ec <LS032_TextReg_SetPos+0x24>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e01c      	b.n	8001926 <LS032_TextReg_SetPos+0x5e>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 80018ec:	893b      	ldrh	r3, [r7, #8]
 80018ee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80018f2:	d301      	bcc.n	80018f8 <LS032_TextReg_SetPos+0x30>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e016      	b.n	8001926 <LS032_TextReg_SetPos+0x5e>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2b29      	cmp	r3, #41	@ 0x29
 80018fc:	d901      	bls.n	8001902 <LS032_TextReg_SetPos+0x3a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e011      	b.n	8001926 <LS032_TextReg_SetPos+0x5e>

	ls032->registers[reg].pos_x = pos_x;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	809a      	strh	r2, [r3, #4]

	ls032->update_queued = 1;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	4613      	mov	r3, r2
 8001940:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	2b1f      	cmp	r3, #31
 8001946:	d901      	bls.n	800194c <LS032_TextReg_SetSize+0x1a>
 8001948:	2301      	movs	r3, #1
 800194a:	e00f      	b.n	800196c <LS032_TextReg_SetSize+0x3a>
	if (size >= NUM_ALPHNUM_SIZES) return ERROR;
 800194c:	78bb      	ldrb	r3, [r7, #2]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d901      	bls.n	8001956 <LS032_TextReg_SetSize+0x24>
 8001952:	2301      	movs	r3, #1
 8001954:	e00a      	b.n	800196c <LS032_TextReg_SetSize+0x3a>

	ls032->registers[reg].size = size;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	78ba      	ldrb	r2, [r7, #2]
 8001962:	719a      	strb	r2, [r3, #6]

	ls032->update_queued = 1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LS032_TextReg_SetString>:

	ls032->update_queued = 1;
	return SUCCESS;
}

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	72fb      	strb	r3, [r7, #11]
 8001986:	4613      	mov	r3, r2
 8001988:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	2b1f      	cmp	r3, #31
 800198e:	d901      	bls.n	8001994 <LS032_TextReg_SetString+0x1c>
 8001990:	2301      	movs	r3, #1
 8001992:	e020      	b.n	80019d6 <LS032_TextReg_SetString+0x5e>

	ls032->registers[reg].len = len;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	7aba      	ldrb	r2, [r7, #10]
 80019a0:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	22ff      	movs	r2, #255	@ 0xff
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f970 	bl	8005c98 <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	7aba      	ldrb	r2, [r7, #10]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 f999 	bl	8005d00 <memcpy>

	ls032->update_queued = 1;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	72da      	strb	r2, [r3, #11]
	return SUCCESS;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <LS032_UpdateAsync>:
uint8_t LS032_UpdateManual(LS032_HandleTypeDef *ls032) {
	if (LS032_DrawScene(ls032)) return ERROR;
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
}

uint8_t LS032_UpdateAsync(LS032_HandleTypeDef *ls032) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	if (ls032->update_queued == 0) return ERROR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7adb      	ldrb	r3, [r3, #11]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <LS032_UpdateAsync+0x14>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e010      	b.n	8001a14 <LS032_UpdateAsync+0x36>
	if (LS032_DrawScene(ls032)) return ERROR;
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f868 	bl	8001ac8 <LS032_DrawScene>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <LS032_UpdateAsync+0x24>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e008      	b.n	8001a14 <LS032_UpdateAsync+0x36>
	return LS032_TX_DMA(ls032, ls032->vram, ls032->vram_len);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff06 	bl	800181e <LS032_TX_DMA>
 8001a12:	4603      	mov	r3, r0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <LS032_Clear>:
uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
	uint8_t clear_cmd[2] = {0x20, 0x00};
	return LS032_TX_DMA(ls032, clear_cmd, 2);
}

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	81fb      	strh	r3, [r7, #14]
 8001a28:	e00f      	b.n	8001a4a <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	212c      	movs	r1, #44	@ 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	3302      	adds	r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	222a      	movs	r2, #42	@ 0x2a
 8001a3c:	21ff      	movs	r1, #255	@ 0xff
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 f92a 	bl	8005c98 <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	3301      	adds	r3, #1
 8001a48:	81fb      	strh	r3, [r7, #14]
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001a50:	d3eb      	bcc.n	8001a2a <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b1f      	cmp	r3, #31
 8001a6c:	d901      	bls.n	8001a72 <LS032_DrawRegister+0x16>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e026      	b.n	8001ac0 <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001a7c:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001a88:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001a94:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001aa0:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	9201      	str	r2, [sp, #4]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8d3 	bl	8001c64 <LS032_DrawString>
 8001abe:	4603      	mov	r3, r0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdb0      	pop	{r4, r5, r7, pc}

08001ac8 <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e00c      	b.n	8001af0 <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffbe 	bl	8001a5c <LS032_DrawRegister>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <LS032_DrawScene+0x22>
			return ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e006      	b.n	8001af8 <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	d9ef      	bls.n	8001ad6 <LS032_DrawScene+0xe>
	}

	return SUCCESS;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff87 	bl	8001a1c <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 8001b12:	230a      	movs	r3, #10
 8001b14:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	81fb      	strh	r3, [r7, #14]
 8001b1a:	e01c      	b.n	8001b56 <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b20:	89f9      	ldrh	r1, [r7, #14]
 8001b22:	89bb      	ldrh	r3, [r7, #12]
 8001b24:	440b      	add	r3, r1
 8001b26:	212c      	movs	r1, #44	@ 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	440b      	add	r3, r1
 8001b32:	3302      	adds	r3, #2
 8001b34:	18d0      	adds	r0, r2, r3
 8001b36:	89fa      	ldrh	r2, [r7, #14]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00da      	lsls	r2, r3, #3
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <LS032_DrawLogo+0x68>)
 8001b46:	4413      	add	r3, r2
 8001b48:	2215      	movs	r2, #21
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f004 f8d8 	bl	8005d00 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	3301      	adds	r3, #1
 8001b54:	81fb      	strh	r3, [r7, #14]
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b5c:	d3de      	bcc.n	8001b1c <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	0802d898 	.word	0x0802d898

08001b6c <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 8001b86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d101      	bne.n	8001b92 <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e05d      	b.n	8001c4e <LS032_DrawChar+0xe2>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <LS032_DrawChar+0xec>)
 8001b96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 8001ba6:	8a7b      	ldrh	r3, [r7, #18]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04e      	b.n	8001c4e <LS032_DrawChar+0xe2>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c5c <LS032_DrawChar+0xf0>)
 8001bb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = ALPHNUM_HEIGHTS[size];
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <LS032_DrawChar+0xf4>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 8001bcc:	f107 0210 	add.w	r2, r7, #16
 8001bd0:	8939      	ldrh	r1, [r7, #8]
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd79 	bl	80016cc <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	da04      	bge.n	8001bf0 <LS032_DrawChar+0x84>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 8001be6:	897b      	ldrh	r3, [r7, #10]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f1c3 0318 	rsb	r3, r3, #24
 8001bee:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001bf0:	893b      	ldrh	r3, [r7, #8]
 8001bf2:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 8001bf6:	7dbb      	ldrb	r3, [r7, #22]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da04      	bge.n	8001c06 <LS032_DrawChar+0x9a>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001bfc:	893b      	ldrh	r3, [r7, #8]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8001c04:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	757b      	strb	r3, [r7, #21]
 8001c0a:	e01b      	b.n	8001c44 <LS032_DrawChar+0xd8>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	8a3a      	ldrh	r2, [r7, #16]
 8001c12:	189c      	adds	r4, r3, r2
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <LS032_DrawChar+0xf0>)
 8001c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	7d79      	ldrb	r1, [r7, #21]
 8001c20:	7db8      	ldrb	r0, [r7, #22]
 8001c22:	fb00 f101 	mul.w	r1, r0, r1
 8001c26:	440b      	add	r3, r1
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	7dba      	ldrb	r2, [r7, #22]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f004 f865 	bl	8005d00 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 8001c36:	8a3b      	ldrh	r3, [r7, #16]
 8001c38:	332c      	adds	r3, #44	@ 0x2c
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001c3e:	7d7b      	ldrb	r3, [r7, #21]
 8001c40:	3301      	adds	r3, #1
 8001c42:	757b      	strb	r3, [r7, #21]
 8001c44:	7d7a      	ldrb	r2, [r7, #21]
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3df      	bcc.n	8001c0c <LS032_DrawChar+0xa0>
	}
	return SUCCESS;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000020 	.word	0x20000020
 8001c5c:	20000030 	.word	0x20000030
 8001c60:	0802d894 	.word	0x0802d894

08001c64 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	817b      	strh	r3, [r7, #10]
 8001c76:	460b      	mov	r3, r1
 8001c78:	813b      	strh	r3, [r7, #8]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	e025      	b.n	8001cd0 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	79f8      	ldrb	r0, [r7, #7]
 8001c8e:	893a      	ldrh	r2, [r7, #8]
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4603      	mov	r3, r0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff ff68 	bl	8001b6c <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)(str[i])];
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <LS032_DrawString+0x80>)
 8001ca0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ca8:	440b      	add	r3, r1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <LS032_DrawString+0x84>)
 8001cb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cbc:	8abb      	ldrh	r3, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	7dfa      	ldrb	r2, [r7, #23]
 8001cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3d4      	bcc.n	8001c84 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000020 	.word	0x20000020
 8001ce8:	20000030 	.word	0x20000030

08001cec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f000 f960 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfc:	200f      	movs	r0, #15
 8001cfe:	f000 f80d 	bl	8001d1c <HAL_InitTick>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	e001      	b.n	8001d12 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d0e:	f7ff f87f 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_InitTick+0x6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <HAL_InitTick+0x70>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_InitTick+0x6c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f96d 	bl	8002026 <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10f      	bne.n	8001d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d809      	bhi.n	8001d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f937 	bl	8001fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_InitTick+0x74>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e004      	b.n	8001d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e001      	b.n	8001d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000044 	.word	0x20000044
 8001d8c:	2000001c 	.word	0x2000001c
 8001d90:	20000040 	.word	0x20000040

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000044 	.word	0x20000044
 8001db8:	200081cc 	.word	0x200081cc

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200081cc 	.word	0x200081cc

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000044 	.word	0x20000044

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	@ 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e098      	b.n	8002184 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4b4d      	ldr	r3, [pc, #308]	@ (8002190 <HAL_DMA_Init+0x150>)
 800205a:	429a      	cmp	r2, r3
 800205c:	d80f      	bhi.n	800207e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <HAL_DMA_Init+0x154>)
 8002066:	4413      	add	r3, r2
 8002068:	4a4b      	ldr	r2, [pc, #300]	@ (8002198 <HAL_DMA_Init+0x158>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a48      	ldr	r2, [pc, #288]	@ (800219c <HAL_DMA_Init+0x15c>)
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
 800207c:	e00e      	b.n	800209c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	4b46      	ldr	r3, [pc, #280]	@ (80021a0 <HAL_DMA_Init+0x160>)
 8002086:	4413      	add	r3, r2
 8002088:	4a43      	ldr	r2, [pc, #268]	@ (8002198 <HAL_DMA_Init+0x158>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a42      	ldr	r2, [pc, #264]	@ (80021a4 <HAL_DMA_Init+0x164>)
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020f6:	d039      	beq.n	800216c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_DMA_Init+0x15c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11a      	bne.n	8002138 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002102:	4b29      	ldr	r3, [pc, #164]	@ (80021a8 <HAL_DMA_Init+0x168>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f003 031c 	and.w	r3, r3, #28
 800210e:	210f      	movs	r1, #15
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	4924      	ldr	r1, [pc, #144]	@ (80021a8 <HAL_DMA_Init+0x168>)
 8002118:	4013      	ands	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800211c:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <HAL_DMA_Init+0x168>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	f003 031c 	and.w	r3, r3, #28
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	491d      	ldr	r1, [pc, #116]	@ (80021a8 <HAL_DMA_Init+0x168>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
 8002136:	e019      	b.n	800216c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002138:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <HAL_DMA_Init+0x16c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002140:	f003 031c 	and.w	r3, r3, #28
 8002144:	210f      	movs	r1, #15
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4917      	ldr	r1, [pc, #92]	@ (80021ac <HAL_DMA_Init+0x16c>)
 800214e:	4013      	ands	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_DMA_Init+0x16c>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f003 031c 	and.w	r3, r3, #28
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	4911      	ldr	r1, [pc, #68]	@ (80021ac <HAL_DMA_Init+0x16c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40020407 	.word	0x40020407
 8002194:	bffdfff8 	.word	0xbffdfff8
 8002198:	cccccccd 	.word	0xcccccccd
 800219c:	40020000 	.word	0x40020000
 80021a0:	bffdfbf8 	.word	0xbffdfbf8
 80021a4:	40020400 	.word	0x40020400
 80021a8:	400200a8 	.word	0x400200a8
 80021ac:	400204a8 	.word	0x400204a8

080021b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Start_IT+0x20>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e04b      	b.n	8002268 <HAL_DMA_Start_IT+0xb8>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d13a      	bne.n	800225a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f8e0 	bl	80023ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 020e 	orr.w	r2, r2, #14
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00f      	b.n	8002248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 020a 	orr.w	r2, r2, #10
 8002246:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e005      	b.n	8002266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	f003 031c 	and.w	r3, r3, #28
 8002290:	2204      	movs	r2, #4
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d026      	beq.n	80022ea <HAL_DMA_IRQHandler+0x7a>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d021      	beq.n	80022ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f003 021c 	and.w	r2, r3, #28
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	2104      	movs	r1, #4
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d071      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022e8:	e06c      	b.n	80023c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f003 031c 	and.w	r3, r3, #28
 80022f2:	2202      	movs	r2, #2
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02e      	beq.n	800235c <HAL_DMA_IRQHandler+0xec>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d029      	beq.n	800235c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 020a 	bic.w	r2, r2, #10
 8002324:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 021c 	and.w	r2, r3, #28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2102      	movs	r1, #2
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d038      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800235a:	e033      	b.n	80023c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f003 031c 	and.w	r3, r3, #28
 8002364:	2208      	movs	r2, #8
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02a      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x156>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d025      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 020e 	bic.w	r2, r2, #14
 8002388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f003 021c 	and.w	r2, r3, #28
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
}
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	f003 021c 	and.w	r2, r3, #28
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f202 	lsl.w	r2, r1, r2
 80023ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d108      	bne.n	8002412 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002410:	e007      	b.n	8002422 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243e:	e17f      	b.n	8002740 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8171 	beq.w	800273a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d005      	beq.n	8002470 <HAL_GPIO_Init+0x40>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d130      	bne.n	80024d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a6:	2201      	movs	r2, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 0201 	and.w	r2, r3, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d118      	bne.n	8002510 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80ac 	beq.w	800273a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <HAL_GPIO_Init+0x330>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002760 <HAL_GPIO_Init+0x330>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80025ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002760 <HAL_GPIO_Init+0x330>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002764 <HAL_GPIO_Init+0x334>)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x242>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	@ (8002768 <HAL_GPIO_Init+0x338>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x23e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4e      	ldr	r2, [pc, #312]	@ (800276c <HAL_GPIO_Init+0x33c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x23a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4d      	ldr	r2, [pc, #308]	@ (8002770 <HAL_GPIO_Init+0x340>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x236>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4c      	ldr	r2, [pc, #304]	@ (8002774 <HAL_GPIO_Init+0x344>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x232>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4b      	ldr	r2, [pc, #300]	@ (8002778 <HAL_GPIO_Init+0x348>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x22e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_GPIO_Init+0x34c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x22a>
 8002656:	2306      	movs	r3, #6
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x244>
 800265a:	2307      	movs	r3, #7
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x244>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x244>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x244>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x244>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x244>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x244>
 8002672:	2300      	movs	r3, #0
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002684:	4937      	ldr	r1, [pc, #220]	@ (8002764 <HAL_GPIO_Init+0x334>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002692:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <HAL_GPIO_Init+0x350>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b6:	4a32      	ldr	r2, [pc, #200]	@ (8002780 <HAL_GPIO_Init+0x350>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026bc:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <HAL_GPIO_Init+0x350>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e0:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <HAL_GPIO_Init+0x350>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e6:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <HAL_GPIO_Init+0x350>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270a:	4a1d      	ldr	r2, [pc, #116]	@ (8002780 <HAL_GPIO_Init+0x350>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <HAL_GPIO_Init+0x350>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002734:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_GPIO_Init+0x350>)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f ae78 	bne.w	8002440 <HAL_GPIO_Init+0x10>
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40010000 	.word	0x40010000
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	48000c00 	.word	0x48000c00
 8002774:	48001000 	.word	0x48001000
 8002778:	48001400 	.word	0x48001400
 800277c:	48001800 	.word	0x48001800
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e001      	b.n	80027a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <HAL_PWREx_GetVoltageRange+0x18>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40007000 	.word	0x40007000

08002800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800280e:	d130      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281c:	d038      	beq.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002826:	4a1e      	ldr	r2, [pc, #120]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2232      	movs	r2, #50	@ 0x32
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	4a1b      	ldr	r2, [pc, #108]	@ (80028a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	3301      	adds	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002844:	e002      	b.n	800284c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3b01      	subs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002858:	d102      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f2      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286c:	d110      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e00f      	b.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287e:	d007      	beq.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002880:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002888:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800288e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000
 80028a4:	2000001c 	.word	0x2000001c
 80028a8:	431bde83 	.word	0x431bde83

080028ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e3ca      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b97      	ldr	r3, [pc, #604]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b94      	ldr	r3, [pc, #592]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80e4 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4a>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	f040 808b 	bne.w	8002a04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 8087 	bne.w	8002a04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x62>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e3a2      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_RCC_OscConfig+0x7c>
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002926:	e005      	b.n	8002934 <HAL_RCC_OscConfig+0x88>
 8002928:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	4293      	cmp	r3, r2
 8002936:	d223      	bcs.n	8002980 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fd53 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e383      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a72      	ldr	r2, [pc, #456]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	496d      	ldr	r1, [pc, #436]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4968      	ldr	r1, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
 800297e:	e025      	b.n	80029cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b63      	ldr	r3, [pc, #396]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4960      	ldr	r1, [pc, #384]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	495b      	ldr	r1, [pc, #364]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fd13 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e343      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029cc:	f000 fc4a 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	4950      	ldr	r1, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_RCC_OscConfig+0x278>)
 80029ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f993 	bl	8001d1c <HAL_InitTick>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d052      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	e327      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d032      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a0c:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a18:	f7ff f9d0 	bl	8001dbc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a20:	f7ff f9cc 	bl	8001dbc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e310      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a32:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4931      	ldr	r1, [pc, #196]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	492c      	ldr	r1, [pc, #176]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e01a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a29      	ldr	r2, [pc, #164]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f99d 	bl	8001dbc <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a86:	f7ff f999 	bl	8001dbc <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e2dd      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x1da>
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d074      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x21a>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d10e      	bne.n	8002ade <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d10b      	bne.n	8002ade <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d064      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d160      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e2ba      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x24a>
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x298>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002afe:	d115      	bne.n	8002b2c <HAL_RCC_OscConfig+0x280>
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x298>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	080065b8 	.word	0x080065b8
 8002b24:	2000001c 	.word	0x2000001c
 8002b28:	20000040 	.word	0x20000040
 8002b2c:	4ba0      	ldr	r3, [pc, #640]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a9f      	ldr	r2, [pc, #636]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b9d      	ldr	r3, [pc, #628]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a9c      	ldr	r2, [pc, #624]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f936 	bl	8001dbc <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff f932 	bl	8001dbc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e276      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b66:	4b92      	ldr	r3, [pc, #584]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2a8>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff f922 	bl	8001dbc <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f91e 	bl	8001dbc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	@ 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e262      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8e:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d0>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d060      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x310>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d116      	bne.n	8002bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbc:	4b7c      	ldr	r3, [pc, #496]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x328>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e23f      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b76      	ldr	r3, [pc, #472]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	4973      	ldr	r1, [pc, #460]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be8:	e040      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d023      	beq.n	8002c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6e      	ldr	r2, [pc, #440]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7ff f8dd 	bl	8001dbc <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7ff f8d9 	bl	8001dbc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e21d      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	4b65      	ldr	r3, [pc, #404]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	495f      	ldr	r1, [pc, #380]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
 8002c38:	e018      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7ff f8b9 	bl	8001dbc <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7ff f8b5 	bl	8001dbc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1f9      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01c      	beq.n	8002cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c80:	4b4b      	ldr	r3, [pc, #300]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c86:	4a4a      	ldr	r2, [pc, #296]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff f894 	bl	8001dbc <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff f890 	bl	8001dbc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1d4      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCC_OscConfig+0x3ec>
 8002cb8:	e01b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7ff f877 	bl	8001dbc <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7ff f873 	bl	8001dbc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1b7      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	4b32      	ldr	r3, [pc, #200]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ef      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a6 	beq.w	8002e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d1c:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d118      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d38:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d44:	f7ff f83a 	bl	8001dbc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4c:	f7ff f836 	bl	8001dbc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e17a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4d8>
 8002d72:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d82:	e029      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d115      	bne.n	8002db8 <HAL_RCC_OscConfig+0x50c>
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	4a03      	ldr	r2, [pc, #12]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	4b9c      	ldr	r3, [pc, #624]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a9b      	ldr	r2, [pc, #620]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc8:	4b98      	ldr	r3, [pc, #608]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	4a97      	ldr	r2, [pc, #604]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe ffec 	bl	8001dbc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe ffe8 	bl	8001dbc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e12a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ed      	beq.n	8002de8 <HAL_RCC_OscConfig+0x53c>
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe ffd5 	bl	8001dbc <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe ffd1 	bl	8001dbc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e113      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2c:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ed      	bne.n	8002e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	4a79      	ldr	r2, [pc, #484]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80fe 	beq.w	8003052 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	f040 80d0 	bne.w	8003000 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e60:	4b72      	ldr	r3, [pc, #456]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d130      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d127      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11f      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ea0:	2a07      	cmp	r2, #7
 8002ea2:	bf14      	ite	ne
 8002ea4:	2201      	movne	r2, #1
 8002ea6:	2200      	moveq	r2, #0
 8002ea8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d113      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d06e      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d069      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ad      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f04:	f7fe ff5a 	bl	8001dbc <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ff56 	bl	8001dbc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e09a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1e:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2a:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <HAL_RCC_OscConfig+0x784>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f44:	0212      	lsls	r2, r2, #8
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f4c:	0852      	lsrs	r2, r2, #1
 8002f4e:	3a01      	subs	r2, #1
 8002f50:	0552      	lsls	r2, r2, #21
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f58:	0852      	lsrs	r2, r2, #1
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0652      	lsls	r2, r2, #25
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f64:	0912      	lsrs	r2, r2, #4
 8002f66:	0452      	lsls	r2, r2, #17
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4930      	ldr	r1, [pc, #192]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f70:	4b2e      	ldr	r3, [pc, #184]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f88:	f7fe ff18 	bl	8001dbc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe ff14 	bl	8001dbc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e058      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa2:	4b22      	ldr	r3, [pc, #136]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fae:	e050      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04f      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d148      	bne.n	8003052 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fcc:	4b17      	ldr	r3, [pc, #92]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a16      	ldr	r2, [pc, #88]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fd8:	f7fe fef0 	bl	8001dbc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe feec 	bl	8001dbc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e030      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x734>
 8002ffe:	e028      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d023      	beq.n	800304e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fed3 	bl	8001dbc <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e00c      	b.n	8003034 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fecf 	bl	8001dbc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d905      	bls.n	8003034 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
 800302c:	40021000 	.word	0x40021000
 8003030:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ec      	bne.n	800301a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4905      	ldr	r1, [pc, #20]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_OscConfig+0x7b4>)
 8003048:	4013      	ands	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	e001      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	feeefffc 	.word	0xfeeefffc

08003064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0e7      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b75      	ldr	r3, [pc, #468]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b72      	ldr	r3, [pc, #456]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4970      	ldr	r1, [pc, #448]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b6e      	ldr	r3, [pc, #440]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cf      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d908      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b63      	ldr	r3, [pc, #396]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4960      	ldr	r1, [pc, #384]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04c      	beq.n	800317c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0a6      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b54      	ldr	r3, [pc, #336]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311a:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e08e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312a:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e086      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b46      	ldr	r3, [pc, #280]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4943      	ldr	r1, [pc, #268]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fe fe36 	bl	8001dbc <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fe32 	bl	8001dbc <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e06e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	492b      	ldr	r1, [pc, #172]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031aa:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d210      	bcs.n	80031da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4923      	ldr	r1, [pc, #140]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e036      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4918      	ldr	r1, [pc, #96]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003204:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4910      	ldr	r1, [pc, #64]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003218:	f000 f824 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x1f4>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a09      	ldr	r2, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1f8>)
 8003236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_ClockConfig+0x1fc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fd6d 	bl	8001d1c <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
 8003244:	72fb      	strb	r3, [r7, #11]

  return status;
 8003246:	7afb      	ldrb	r3, [r7, #11]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40022000 	.word	0x40022000
 8003254:	40021000 	.word	0x40021000
 8003258:	080065b8 	.word	0x080065b8
 800325c:	2000001c 	.word	0x2000001c
 8003260:	20000040 	.word	0x20000040

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003298:	4b34      	ldr	r3, [pc, #208]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a4:	4b31      	ldr	r3, [pc, #196]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d134      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xa6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xac>
 8003308:	e005      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800330a:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 800330c:	617b      	str	r3, [r7, #20]
      break;
 800330e:	e005      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 8003312:	617b      	str	r3, [r7, #20]
      break;
 8003314:	e002      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331c:	4b13      	ldr	r3, [pc, #76]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800332a:	4b10      	ldr	r3, [pc, #64]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	fb03 f202 	mul.w	r2, r3, r2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	0e5b      	lsrs	r3, r3, #25
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	3301      	adds	r3, #1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800335c:	69bb      	ldr	r3, [r7, #24]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	@ 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	080065d0 	.word	0x080065d0
 8003374:	00f42400 	.word	0x00f42400

08003378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000001c 	.word	0x2000001c

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080065c8 	.word	0x080065c8

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c0:	f7ff ffda 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4904      	ldr	r1, [pc, #16]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	080065c8 	.word	0x080065c8

080033e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff f9f0 	bl	80027e4 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	e014      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	@ 0x58
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff f9e0 	bl	80027e4 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b1e      	ldr	r3, [pc, #120]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003438:	d10b      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	@ 0x80
 800343e:	d919      	bls.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2ba0      	cmp	r3, #160	@ 0xa0
 8003444:	d902      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e013      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e010      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	@ 0x80
 8003456:	d902      	bls.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003458:	2303      	movs	r3, #3
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e00a      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b80      	cmp	r3, #128	@ 0x80
 8003462:	d102      	bne.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003464:	2302      	movs	r3, #2
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e004      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b70      	cmp	r3, #112	@ 0x70
 800346e:	d101      	bne.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003470:	2301      	movs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 0207 	bic.w	r2, r3, #7
 800347c:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003484:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40022000 	.word	0x40022000

080034a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b0:	2300      	movs	r3, #0
 80034b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d041      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034cc:	d02a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d2:	d824      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034de:	d81e      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e8:	d010      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ea:	e018      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ec:	4b86      	ldr	r3, [pc, #536]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a85      	ldr	r2, [pc, #532]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f8:	e015      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fa8b 	bl	8003a1c <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800350a:	e00c      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3320      	adds	r3, #32
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fb76 	bl	8003c04 <RCCEx_PLLSAI2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	74fb      	strb	r3, [r7, #19]
      break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352c:	4b76      	ldr	r3, [pc, #472]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800353a:	4973      	ldr	r1, [pc, #460]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d041      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800355c:	d02a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800355e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003562:	d824      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800356a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800356e:	d81e      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003578:	d010      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800357a:	e018      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800357c:	4b62      	ldr	r3, [pc, #392]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a61      	ldr	r2, [pc, #388]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003586:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003588:	e015      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fa43 	bl	8003a1c <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800359a:	e00c      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3320      	adds	r3, #32
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fb2e 	bl	8003c04 <RCCEx_PLLSAI2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	74fb      	strb	r3, [r7, #19]
      break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035bc:	4b52      	ldr	r3, [pc, #328]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ca:	494f      	ldr	r1, [pc, #316]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035d2:	e001      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a0 	beq.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	4a40      	ldr	r2, [pc, #256]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	@ 0x58
 800360c:	4b3e      	ldr	r3, [pc, #248]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003618:	2301      	movs	r3, #1
 800361a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361c:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3a      	ldr	r2, [pc, #232]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003628:	f7fe fbc8 	bl	8001dbc <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe fbc4 	bl	8001dbc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	74fb      	strb	r3, [r7, #19]
        break;
 8003642:	e005      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003644:	4b31      	ldr	r3, [pc, #196]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ef      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d15c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003656:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003660:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01f      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	d019      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003674:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003680:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	4a20      	ldr	r2, [pc, #128]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036a0:	4a19      	ldr	r2, [pc, #100]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe fb83 	bl	8001dbc <HAL_GetTick>
 80036b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	e00b      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fe fb7f 	bl	8001dbc <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d902      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	74fb      	strb	r3, [r7, #19]
            break;
 80036d0:	e006      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ec      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f6:	4904      	ldr	r1, [pc, #16]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036fe:	e009      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003714:	7c7b      	ldrb	r3, [r7, #17]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4ba1      	ldr	r3, [pc, #644]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	4aa0      	ldr	r2, [pc, #640]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003732:	4b9b      	ldr	r3, [pc, #620]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f023 0203 	bic.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	4997      	ldr	r1, [pc, #604]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003754:	4b92      	ldr	r3, [pc, #584]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f023 020c 	bic.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003762:	498f      	ldr	r1, [pc, #572]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003776:	4b8a      	ldr	r3, [pc, #552]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4986      	ldr	r1, [pc, #536]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003798:	4b81      	ldr	r3, [pc, #516]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	497e      	ldr	r1, [pc, #504]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ba:	4b79      	ldr	r3, [pc, #484]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c8:	4975      	ldr	r1, [pc, #468]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037dc:	4b70      	ldr	r3, [pc, #448]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	496d      	ldr	r1, [pc, #436]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fe:	4b68      	ldr	r3, [pc, #416]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	4964      	ldr	r1, [pc, #400]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003820:	4b5f      	ldr	r3, [pc, #380]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	495c      	ldr	r1, [pc, #368]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	4953      	ldr	r1, [pc, #332]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003864:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	494b      	ldr	r1, [pc, #300]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003886:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4942      	ldr	r1, [pc, #264]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d028      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a8:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b6:	493a      	ldr	r1, [pc, #232]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c6:	d106      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c8:	4b35      	ldr	r3, [pc, #212]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a34      	ldr	r2, [pc, #208]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80038ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d2:	60d3      	str	r3, [r2, #12]
 80038d4:	e011      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038de:	d10c      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f898 	bl	8003a1c <RCCEx_PLLSAI1_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d028      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003906:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4922      	ldr	r1, [pc, #136]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003924:	d106      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800392c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003930:	60d3      	str	r3, [r2, #12]
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f869 	bl	8003a1c <RCCEx_PLLSAI1_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d031      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003972:	490b      	ldr	r1, [pc, #44]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003982:	d10f      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f846 	bl	8003a1c <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	74bb      	strb	r3, [r7, #18]
 800399e:	e013      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80039a0:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3320      	adds	r3, #32
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f925 	bl	8003c04 <RCCEx_PLLSAI2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d4:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e2:	490d      	ldr	r1, [pc, #52]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a04:	4904      	ldr	r1, [pc, #16]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a2a:	4b75      	ldr	r3, [pc, #468]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a36:	4b72      	ldr	r3, [pc, #456]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10d      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
       ||
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d047      	beq.n	8003af2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e044      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d018      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x86>
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d825      	bhi.n	8003ac0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x62>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d009      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x74>
 8003a7c:	e020      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7e:	4b60      	ldr	r3, [pc, #384]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8e:	e01a      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a90:	4b5b      	ldr	r3, [pc, #364]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa0:	e013      	b.n	8003aca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aa2:	4b57      	ldr	r3, [pc, #348]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aae:	4b54      	ldr	r3, [pc, #336]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003abe:	e006      	b.n	8003ace <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e004      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	430b      	orrs	r3, r1
 8003aec:	4944      	ldr	r1, [pc, #272]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d17d      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a40      	ldr	r2, [pc, #256]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe f95a 	bl	8001dbc <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b0a:	e009      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b0c:	f7fe f956 	bl	8001dbc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1e:	e005      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b20:	4b37      	ldr	r3, [pc, #220]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ef      	bne.n	8003b0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d160      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b38:	4b31      	ldr	r3, [pc, #196]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
 8003b48:	0211      	lsls	r1, r2, #8
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68d2      	ldr	r2, [r2, #12]
 8003b4e:	0912      	lsrs	r2, r2, #4
 8003b50:	0452      	lsls	r2, r2, #17
 8003b52:	430a      	orrs	r2, r1
 8003b54:	492a      	ldr	r1, [pc, #168]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	610b      	str	r3, [r1, #16]
 8003b5a:	e027      	b.n	8003bac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d112      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b62:	4b27      	ldr	r3, [pc, #156]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6912      	ldr	r2, [r2, #16]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0552      	lsls	r2, r2, #21
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	491f      	ldr	r1, [pc, #124]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
 8003b86:	e011      	b.n	8003bac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b88:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6952      	ldr	r2, [r2, #20]
 8003b9e:	0852      	lsrs	r2, r2, #1
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	0652      	lsls	r2, r2, #25
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	4916      	ldr	r1, [pc, #88]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bac:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a13      	ldr	r2, [pc, #76]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe f900 	bl	8001dbc <HAL_GetTick>
 8003bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bbe:	e009      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bc0:	f7fe f8fc 	bl	8001dbc <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d902      	bls.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bd2:	e005      	b.n	8003be0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ef      	beq.n	8003bc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4904      	ldr	r1, [pc, #16]	@ (8003c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000

08003c04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c12:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c1e:	4b67      	ldr	r3, [pc, #412]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
       ||
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c36:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
       ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d047      	beq.n	8003cda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e044      	b.n	8003cda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d018      	beq.n	8003c8a <RCCEx_PLLSAI2_Config+0x86>
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d825      	bhi.n	8003ca8 <RCCEx_PLLSAI2_Config+0xa4>
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <RCCEx_PLLSAI2_Config+0x62>
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d009      	beq.n	8003c78 <RCCEx_PLLSAI2_Config+0x74>
 8003c64:	e020      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c66:	4b55      	ldr	r3, [pc, #340]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c76:	e01a      	b.n	8003cae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c78:	4b50      	ldr	r3, [pc, #320]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c88:	e013      	b.n	8003cb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c96:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ca6:	e006      	b.n	8003cb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e004      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	4939      	ldr	r1, [pc, #228]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d167      	bne.n	8003db0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ce0:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a35      	ldr	r2, [pc, #212]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fe f866 	bl	8001dbc <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cf2:	e009      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cf4:	f7fe f862 	bl	8001dbc <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	73fb      	strb	r3, [r7, #15]
        break;
 8003d06:	e005      	b.n	8003d14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d08:	4b2c      	ldr	r3, [pc, #176]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ef      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d14a      	bne.n	8003db0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d20:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	0912      	lsrs	r2, r2, #4
 8003d38:	0452      	lsls	r2, r2, #17
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	491f      	ldr	r1, [pc, #124]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	614b      	str	r3, [r1, #20]
 8003d42:	e011      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6892      	ldr	r2, [r2, #8]
 8003d54:	0211      	lsls	r1, r2, #8
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6912      	ldr	r2, [r2, #16]
 8003d5a:	0852      	lsrs	r2, r2, #1
 8003d5c:	3a01      	subs	r2, #1
 8003d5e:	0652      	lsls	r2, r2, #25
 8003d60:	430a      	orrs	r2, r1
 8003d62:	4916      	ldr	r1, [pc, #88]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d68:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fe f822 	bl	8001dbc <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d7c:	f7fe f81e 	bl	8001dbc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d90:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ef      	beq.n	8003d7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4904      	ldr	r1, [pc, #16]	@ (8003dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e095      	b.n	8003efe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de2:	d009      	beq.n	8003df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
 8003dea:	e005      	b.n	8003df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc ff2c 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e38:	d902      	bls.n	8003e40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e002      	b.n	8003e46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e4e:	d007      	beq.n	8003e60 <HAL_SPI_Init+0xa0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea2:	ea42 0103 	orr.w	r1, r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	f003 0204 	and.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0d4      	b.n	80040d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit_DMA+0x2a>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0cc      	b.n	80040d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_SPI_Transmit_DMA+0x3c>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e0c5      	b.n	80040d0 <HAL_SPI_Transmit_DMA+0x1c8>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f96:	d10f      	bne.n	8003fb8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	4a46      	ldr	r2, [pc, #280]	@ (80040d8 <HAL_SPI_Transmit_DMA+0x1d0>)
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	4a45      	ldr	r2, [pc, #276]	@ (80040dc <HAL_SPI_Transmit_DMA+0x1d4>)
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	4a44      	ldr	r2, [pc, #272]	@ (80040e0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003fce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fe6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ff0:	d82d      	bhi.n	800404e <HAL_SPI_Transmit_DMA+0x146>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d127      	bne.n	800404e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800401a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800402a:	e010      	b.n	800404e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800403a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004040:	b29b      	uxth	r3, r3
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	3301      	adds	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	4619      	mov	r1, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004064:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004066:	f7fe f8a3 	bl	80021b0 <HAL_DMA_Start_IT>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	f043 0210 	orr.w	r2, r3, #16
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e023      	b.n	80040d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	d007      	beq.n	80040a6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0220 	orr.w	r2, r2, #32
 80040bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0202 	orr.w	r2, r2, #2
 80040cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080041b3 	.word	0x080041b3
 80040dc:	0800410d 	.word	0x0800410d
 80040e0:	080041cf 	.word	0x080041cf

080040e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800411a:	f7fd fe4f 	bl	8001dbc <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d03b      	beq.n	80041a6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0220 	bic.w	r2, r2, #32
 800413c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0202 	bic.w	r2, r2, #2
 800414c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	2164      	movs	r1, #100	@ 0x64
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	f000 f97a 	bl	800444c <SPI_EndRxTxTransaction>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff ffaa 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041a4:	e002      	b.n	80041ac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7fc fcd6 	bl	8000b58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff ff8f 	bl	80040e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0203 	bic.w	r2, r2, #3
 80041ea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f0:	f043 0210 	orr.w	r2, r3, #16
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff ff79 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004220:	f7fd fdcc 	bl	8001dbc <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004230:	f7fd fdc4 	bl	8001dbc <HAL_GetTick>
 8004234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004236:	4b39      	ldr	r3, [pc, #228]	@ (800431c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	0d1b      	lsrs	r3, r3, #20
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	e054      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d050      	beq.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004250:	f7fd fdb4 	bl	8001dbc <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	429a      	cmp	r2, r3
 800425e:	d902      	bls.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d13d      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d111      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004288:	d004      	beq.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	d107      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ac:	d10f      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e017      	b.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d19b      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000001c 	.word	0x2000001c

08004320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004332:	f7fd fd43 	bl	8001dbc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	4413      	add	r3, r2
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004342:	f7fd fd3b 	bl	8001dbc <HAL_GetTick>
 8004346:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004350:	4b3d      	ldr	r3, [pc, #244]	@ (8004448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	0d1b      	lsrs	r3, r3, #20
 8004360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004368:	e060      	b.n	800442c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004370:	d107      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004380:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d050      	beq.n	800442c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800438a:	f7fd fd17 	bl	8001dbc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	429a      	cmp	r2, r3
 8004398:	d902      	bls.n	80043a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d13d      	bne.n	800441c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043b8:	d111      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c2:	d004      	beq.n	80043ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d107      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e6:	d10f      	bne.n	8004408 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004406:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e010      	b.n	800443e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3b01      	subs	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d196      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	@ 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000001c 	.word	0x2000001c

0800444c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff ff5b 	bl	8004320 <SPI_WaitFifoStateUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e027      	b.n	80044d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	2180      	movs	r1, #128	@ 0x80
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff fec0 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e014      	b.n	80044d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff ff34 	bl	8004320 <SPI_WaitFifoStateUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e000      	b.n	80044d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e049      	b.n	800457e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fe5e 	bl	80011c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f000 fa50 	bl	80049bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start+0x24>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e03c      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x3e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e02f      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x58>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e022      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d109      	bne.n	80045fa <HAL_TIM_PWM_Start+0x72>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e015      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x8c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e008      	b.n	8004626 <HAL_TIM_PWM_Start+0x9e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e09c      	b.n	8004768 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0xb6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	e023      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0xc6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800464c:	e01b      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xd6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800465c:	e013      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xe6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800466c:	e00b      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b10      	cmp	r3, #16
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xf6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800467c:	e003      	b.n	8004686 <HAL_TIM_PWM_Start+0xfe>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd10 	bl	80050b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a35      	ldr	r2, [pc, #212]	@ (8004770 <HAL_TIM_PWM_Start+0x1e8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a34      	ldr	r2, [pc, #208]	@ (8004774 <HAL_TIM_PWM_Start+0x1ec>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <HAL_TIM_PWM_Start+0x1f0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a31      	ldr	r2, [pc, #196]	@ (800477c <HAL_TIM_PWM_Start+0x1f4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x13e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004780 <HAL_TIM_PWM_Start+0x1f8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_Start+0x142>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_TIM_PWM_Start+0x144>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a22      	ldr	r2, [pc, #136]	@ (8004770 <HAL_TIM_PWM_Start+0x1e8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f2:	d018      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a22      	ldr	r2, [pc, #136]	@ (8004784 <HAL_TIM_PWM_Start+0x1fc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	@ (8004788 <HAL_TIM_PWM_Start+0x200>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_TIM_PWM_Start+0x204>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <HAL_TIM_PWM_Start+0x1ec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_PWM_Start+0x19e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	@ (8004778 <HAL_TIM_PWM_Start+0x1f0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d115      	bne.n	8004752 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <HAL_TIM_PWM_Start+0x208>)
 800472e:	4013      	ands	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d015      	beq.n	8004764 <HAL_TIM_PWM_Start+0x1dc>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473e:	d011      	beq.n	8004764 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	e008      	b.n	8004764 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e000      	b.n	8004766 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	00010007 	.word	0x00010007

08004794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e0ff      	b.n	80049b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b14      	cmp	r3, #20
 80047be:	f200 80f0 	bhi.w	80049a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047c2:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	080049a3 	.word	0x080049a3
 80047d0:	080049a3 	.word	0x080049a3
 80047d4:	080049a3 	.word	0x080049a3
 80047d8:	0800485d 	.word	0x0800485d
 80047dc:	080049a3 	.word	0x080049a3
 80047e0:	080049a3 	.word	0x080049a3
 80047e4:	080049a3 	.word	0x080049a3
 80047e8:	0800489f 	.word	0x0800489f
 80047ec:	080049a3 	.word	0x080049a3
 80047f0:	080049a3 	.word	0x080049a3
 80047f4:	080049a3 	.word	0x080049a3
 80047f8:	080048df 	.word	0x080048df
 80047fc:	080049a3 	.word	0x080049a3
 8004800:	080049a3 	.word	0x080049a3
 8004804:	080049a3 	.word	0x080049a3
 8004808:	08004921 	.word	0x08004921
 800480c:	080049a3 	.word	0x080049a3
 8004810:	080049a3 	.word	0x080049a3
 8004814:	080049a3 	.word	0x080049a3
 8004818:	08004961 	.word	0x08004961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f970 	bl	8004b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0208 	orr.w	r2, r2, #8
 8004836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0204 	bic.w	r2, r2, #4
 8004846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6999      	ldr	r1, [r3, #24]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	619a      	str	r2, [r3, #24]
      break;
 800485a:	e0a5      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f9e0 	bl	8004c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6999      	ldr	r1, [r3, #24]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	021a      	lsls	r2, r3, #8
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	619a      	str	r2, [r3, #24]
      break;
 800489c:	e084      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fa49 	bl	8004d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0208 	orr.w	r2, r2, #8
 80048b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0204 	bic.w	r2, r2, #4
 80048c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69d9      	ldr	r1, [r3, #28]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	61da      	str	r2, [r3, #28]
      break;
 80048dc:	e064      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fab1 	bl	8004e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69d9      	ldr	r1, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	61da      	str	r2, [r3, #28]
      break;
 800491e:	e043      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fafa 	bl	8004f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0208 	orr.w	r2, r2, #8
 800493a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0204 	bic.w	r2, r2, #4
 800494a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800495e:	e023      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb3e 	bl	8004fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	021a      	lsls	r2, r3, #8
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049a0:	e002      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
      break;
 80049a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop

080049bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a46      	ldr	r2, [pc, #280]	@ (8004ae8 <TIM_Base_SetConfig+0x12c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a43      	ldr	r2, [pc, #268]	@ (8004aec <TIM_Base_SetConfig+0x130>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a42      	ldr	r2, [pc, #264]	@ (8004af0 <TIM_Base_SetConfig+0x134>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a41      	ldr	r2, [pc, #260]	@ (8004af4 <TIM_Base_SetConfig+0x138>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a40      	ldr	r2, [pc, #256]	@ (8004af8 <TIM_Base_SetConfig+0x13c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a35      	ldr	r2, [pc, #212]	@ (8004ae8 <TIM_Base_SetConfig+0x12c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1c:	d01b      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a32      	ldr	r2, [pc, #200]	@ (8004aec <TIM_Base_SetConfig+0x130>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d017      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a31      	ldr	r2, [pc, #196]	@ (8004af0 <TIM_Base_SetConfig+0x134>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a30      	ldr	r2, [pc, #192]	@ (8004af4 <TIM_Base_SetConfig+0x138>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00f      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2f      	ldr	r2, [pc, #188]	@ (8004af8 <TIM_Base_SetConfig+0x13c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2e      	ldr	r2, [pc, #184]	@ (8004afc <TIM_Base_SetConfig+0x140>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2d      	ldr	r2, [pc, #180]	@ (8004b00 <TIM_Base_SetConfig+0x144>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <TIM_Base_SetConfig+0x148>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ae8 <TIM_Base_SetConfig+0x12c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0xf8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a18      	ldr	r2, [pc, #96]	@ (8004af8 <TIM_Base_SetConfig+0x13c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0xf8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <TIM_Base_SetConfig+0x140>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0xf8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <TIM_Base_SetConfig+0x144>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0xf8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a15      	ldr	r2, [pc, #84]	@ (8004b04 <TIM_Base_SetConfig+0x148>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
  }
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 0201 	bic.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 0302 	bic.w	r3, r3, #2
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2c      	ldr	r2, [pc, #176]	@ (8004c14 <TIM_OC1_SetConfig+0x10c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00f      	beq.n	8004b88 <TIM_OC1_SetConfig+0x80>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c18 <TIM_OC1_SetConfig+0x110>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_OC1_SetConfig+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2a      	ldr	r2, [pc, #168]	@ (8004c1c <TIM_OC1_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_OC1_SetConfig+0x80>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a29      	ldr	r2, [pc, #164]	@ (8004c20 <TIM_OC1_SetConfig+0x118>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC1_SetConfig+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a28      	ldr	r2, [pc, #160]	@ (8004c24 <TIM_OC1_SetConfig+0x11c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10c      	bne.n	8004ba2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0308 	bic.w	r3, r3, #8
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <TIM_OC1_SetConfig+0x10c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_OC1_SetConfig+0xc2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <TIM_OC1_SetConfig+0x110>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_OC1_SetConfig+0xc2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <TIM_OC1_SetConfig+0x114>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_OC1_SetConfig+0xc2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <TIM_OC1_SetConfig+0x118>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_OC1_SetConfig+0xc2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	@ (8004c24 <TIM_OC1_SetConfig+0x11c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d111      	bne.n	8004bee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 0210 	bic.w	r2, r3, #16
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0320 	bic.w	r3, r3, #32
 8004c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a28      	ldr	r2, [pc, #160]	@ (8004d28 <TIM_OC2_SetConfig+0x100>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC2_SetConfig+0x6c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a27      	ldr	r2, [pc, #156]	@ (8004d2c <TIM_OC2_SetConfig+0x104>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10d      	bne.n	8004cb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <TIM_OC2_SetConfig+0x100>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_OC2_SetConfig+0xb0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <TIM_OC2_SetConfig+0x104>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_OC2_SetConfig+0xb0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d30 <TIM_OC2_SetConfig+0x108>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC2_SetConfig+0xb0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1a      	ldr	r2, [pc, #104]	@ (8004d34 <TIM_OC2_SetConfig+0x10c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC2_SetConfig+0xb0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <TIM_OC2_SetConfig+0x110>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d113      	bne.n	8004d00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <TIM_OC3_SetConfig+0xfc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC3_SetConfig+0x6a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a26      	ldr	r2, [pc, #152]	@ (8004e3c <TIM_OC3_SetConfig+0x100>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10d      	bne.n	8004dc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e38 <TIM_OC3_SetConfig+0xfc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_OC3_SetConfig+0xae>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e3c <TIM_OC3_SetConfig+0x100>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_OC3_SetConfig+0xae>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e40 <TIM_OC3_SetConfig+0x104>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC3_SetConfig+0xae>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <TIM_OC3_SetConfig+0x108>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC3_SetConfig+0xae>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <TIM_OC3_SetConfig+0x10c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d113      	bne.n	8004e12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <TIM_OC4_SetConfig+0xc0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_OC4_SetConfig+0x84>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <TIM_OC4_SetConfig+0xc4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_OC4_SetConfig+0x84>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <TIM_OC4_SetConfig+0xc8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_OC4_SetConfig+0x84>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <TIM_OC4_SetConfig+0xcc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_OC4_SetConfig+0x84>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a14      	ldr	r2, [pc, #80]	@ (8004f1c <TIM_OC4_SetConfig+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d109      	bne.n	8004ee4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800

08004f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <TIM_OC5_SetConfig+0xb4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00f      	beq.n	8004f9a <TIM_OC5_SetConfig+0x7a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <TIM_OC5_SetConfig+0xb8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_OC5_SetConfig+0x7a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a15      	ldr	r2, [pc, #84]	@ (8004fdc <TIM_OC5_SetConfig+0xbc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_OC5_SetConfig+0x7a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <TIM_OC5_SetConfig+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC5_SetConfig+0x7a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a13      	ldr	r2, [pc, #76]	@ (8004fe4 <TIM_OC5_SetConfig+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d109      	bne.n	8004fae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800502e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	051b      	lsls	r3, r3, #20
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a18      	ldr	r2, [pc, #96]	@ (80050a0 <TIM_OC6_SetConfig+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00f      	beq.n	8005064 <TIM_OC6_SetConfig+0x7c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <TIM_OC6_SetConfig+0xbc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_OC6_SetConfig+0x7c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <TIM_OC6_SetConfig+0xc0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_OC6_SetConfig+0x7c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <TIM_OC6_SetConfig+0xc4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC6_SetConfig+0x7c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a14      	ldr	r2, [pc, #80]	@ (80050b0 <TIM_OC6_SetConfig+0xc8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800506a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e068      	b.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2e      	ldr	r2, [pc, #184]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2d      	ldr	r2, [pc, #180]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1e      	ldr	r2, [pc, #120]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d018      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a18      	ldr	r2, [pc, #96]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10c      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40014000 	.word	0x40014000

08005210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e040      	b.n	80052a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc f8bc 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	@ 0x24
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fae0 	bl	800581c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f825 	bl	80052ac <UART_SetConfig>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e01b      	b.n	80052a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800527a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800528a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb5f 	bl	8005960 <UART_CheckIdleState>
 80052a2:	4603      	mov	r3, r0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b0:	b08a      	sub	sp, #40	@ 0x28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4ba4      	ldr	r3, [pc, #656]	@ (800556c <UART_SetConfig+0x2c0>)
 80052dc:	4013      	ands	r3, r2
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a99      	ldr	r2, [pc, #612]	@ (8005570 <UART_SetConfig+0x2c4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	4313      	orrs	r3, r2
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a90      	ldr	r2, [pc, #576]	@ (8005574 <UART_SetConfig+0x2c8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d126      	bne.n	8005384 <UART_SetConfig+0xd8>
 8005336:	4b90      	ldr	r3, [pc, #576]	@ (8005578 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b03      	cmp	r3, #3
 8005342:	d81b      	bhi.n	800537c <UART_SetConfig+0xd0>
 8005344:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <UART_SetConfig+0xa0>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	0800535d 	.word	0x0800535d
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005362:	e116      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536a:	e112      	b.n	8005592 <UART_SetConfig+0x2e6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005372:	e10e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800537a:	e10a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005382:	e106      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a7c      	ldr	r2, [pc, #496]	@ (800557c <UART_SetConfig+0x2d0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d138      	bne.n	8005400 <UART_SetConfig+0x154>
 800538e:	4b7a      	ldr	r3, [pc, #488]	@ (8005578 <UART_SetConfig+0x2cc>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d82d      	bhi.n	80053f8 <UART_SetConfig+0x14c>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <UART_SetConfig+0xf8>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080053f9 	.word	0x080053f9
 80053bc:	080053f9 	.word	0x080053f9
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053de:	e0d8      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053e0:	2302      	movs	r3, #2
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e6:	e0d4      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ee:	e0d0      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f6:	e0cc      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fe:	e0c8      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5e      	ldr	r2, [pc, #376]	@ (8005580 <UART_SetConfig+0x2d4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d125      	bne.n	8005456 <UART_SetConfig+0x1aa>
 800540a:	4b5b      	ldr	r3, [pc, #364]	@ (8005578 <UART_SetConfig+0x2cc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005414:	2b30      	cmp	r3, #48	@ 0x30
 8005416:	d016      	beq.n	8005446 <UART_SetConfig+0x19a>
 8005418:	2b30      	cmp	r3, #48	@ 0x30
 800541a:	d818      	bhi.n	800544e <UART_SetConfig+0x1a2>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d00a      	beq.n	8005436 <UART_SetConfig+0x18a>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d814      	bhi.n	800544e <UART_SetConfig+0x1a2>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <UART_SetConfig+0x182>
 8005428:	2b10      	cmp	r3, #16
 800542a:	d008      	beq.n	800543e <UART_SetConfig+0x192>
 800542c:	e00f      	b.n	800544e <UART_SetConfig+0x1a2>
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005434:	e0ad      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005436:	2302      	movs	r3, #2
 8005438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543c:	e0a9      	b.n	8005592 <UART_SetConfig+0x2e6>
 800543e:	2304      	movs	r3, #4
 8005440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005444:	e0a5      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005446:	2308      	movs	r3, #8
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544c:	e0a1      	b.n	8005592 <UART_SetConfig+0x2e6>
 800544e:	2310      	movs	r3, #16
 8005450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005454:	e09d      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4a      	ldr	r2, [pc, #296]	@ (8005584 <UART_SetConfig+0x2d8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d125      	bne.n	80054ac <UART_SetConfig+0x200>
 8005460:	4b45      	ldr	r3, [pc, #276]	@ (8005578 <UART_SetConfig+0x2cc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800546a:	2bc0      	cmp	r3, #192	@ 0xc0
 800546c:	d016      	beq.n	800549c <UART_SetConfig+0x1f0>
 800546e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005470:	d818      	bhi.n	80054a4 <UART_SetConfig+0x1f8>
 8005472:	2b80      	cmp	r3, #128	@ 0x80
 8005474:	d00a      	beq.n	800548c <UART_SetConfig+0x1e0>
 8005476:	2b80      	cmp	r3, #128	@ 0x80
 8005478:	d814      	bhi.n	80054a4 <UART_SetConfig+0x1f8>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <UART_SetConfig+0x1d8>
 800547e:	2b40      	cmp	r3, #64	@ 0x40
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x1e8>
 8005482:	e00f      	b.n	80054a4 <UART_SetConfig+0x1f8>
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548a:	e082      	b.n	8005592 <UART_SetConfig+0x2e6>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005492:	e07e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549a:	e07a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a2:	e076      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054aa:	e072      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a35      	ldr	r2, [pc, #212]	@ (8005588 <UART_SetConfig+0x2dc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d12a      	bne.n	800550c <UART_SetConfig+0x260>
 80054b6:	4b30      	ldr	r3, [pc, #192]	@ (8005578 <UART_SetConfig+0x2cc>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054c4:	d01a      	beq.n	80054fc <UART_SetConfig+0x250>
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ca:	d81b      	bhi.n	8005504 <UART_SetConfig+0x258>
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054d0:	d00c      	beq.n	80054ec <UART_SetConfig+0x240>
 80054d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054d6:	d815      	bhi.n	8005504 <UART_SetConfig+0x258>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <UART_SetConfig+0x238>
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e0:	d008      	beq.n	80054f4 <UART_SetConfig+0x248>
 80054e2:	e00f      	b.n	8005504 <UART_SetConfig+0x258>
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e052      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e04e      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e04a      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e046      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e042      	b.n	8005592 <UART_SetConfig+0x2e6>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <UART_SetConfig+0x2c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d13a      	bne.n	800558c <UART_SetConfig+0x2e0>
 8005516:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <UART_SetConfig+0x2cc>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005520:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005524:	d01a      	beq.n	800555c <UART_SetConfig+0x2b0>
 8005526:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800552a:	d81b      	bhi.n	8005564 <UART_SetConfig+0x2b8>
 800552c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005530:	d00c      	beq.n	800554c <UART_SetConfig+0x2a0>
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005536:	d815      	bhi.n	8005564 <UART_SetConfig+0x2b8>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <UART_SetConfig+0x298>
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005540:	d008      	beq.n	8005554 <UART_SetConfig+0x2a8>
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x2b8>
 8005544:	2300      	movs	r3, #0
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554a:	e022      	b.n	8005592 <UART_SetConfig+0x2e6>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005552:	e01e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555a:	e01a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005562:	e016      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x2e6>
 800556c:	efff69f3 	.word	0xefff69f3
 8005570:	40008000 	.word	0x40008000
 8005574:	40013800 	.word	0x40013800
 8005578:	40021000 	.word	0x40021000
 800557c:	40004400 	.word	0x40004400
 8005580:	40004800 	.word	0x40004800
 8005584:	40004c00 	.word	0x40004c00
 8005588:	40005000 	.word	0x40005000
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a9f      	ldr	r2, [pc, #636]	@ (8005814 <UART_SetConfig+0x568>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d17a      	bne.n	8005692 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d824      	bhi.n	80055ee <UART_SetConfig+0x342>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x300>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fd fede 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005818 <UART_SetConfig+0x56c>)
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fd fe41 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80055e2:	61f8      	str	r0, [r7, #28]
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80fb 	beq.w	80057f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d305      	bcc.n	800561e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005624:	e0e8      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	461c      	mov	r4, r3
 800562c:	4615      	mov	r5, r2
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	022b      	lsls	r3, r5, #8
 8005638:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800563c:	0222      	lsls	r2, r4, #8
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6849      	ldr	r1, [r1, #4]
 8005642:	0849      	lsrs	r1, r1, #1
 8005644:	2000      	movs	r0, #0
 8005646:	4688      	mov	r8, r1
 8005648:	4681      	mov	r9, r0
 800564a:	eb12 0a08 	adds.w	sl, r2, r8
 800564e:	eb43 0b09 	adc.w	fp, r3, r9
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fa fe0c 	bl	8000280 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005676:	d308      	bcc.n	800568a <UART_SetConfig+0x3de>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567e:	d204      	bcs.n	800568a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e0b6      	b.n	80057f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005690:	e0b2      	b.n	80057f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800569a:	d15e      	bne.n	800575a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800569c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d828      	bhi.n	80056f6 <UART_SetConfig+0x44a>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x400>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056f7 	.word	0x080056f7
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080056f7 	.word	0x080056f7
 80056c4:	080056f7 	.word	0x080056f7
 80056c8:	080056f7 	.word	0x080056f7
 80056cc:	080056ef 	.word	0x080056ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fd fe5e 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61f8      	str	r0, [r7, #28]
        break;
 80056d6:	e014      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fd fe70 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80056dc:	61f8      	str	r0, [r7, #28]
        break;
 80056de:	e010      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005818 <UART_SetConfig+0x56c>)
 80056e2:	61fb      	str	r3, [r7, #28]
        break;
 80056e4:	e00d      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fd fdbd 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80056ea:	61f8      	str	r0, [r7, #28]
        break;
 80056ec:	e009      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f2:	61fb      	str	r3, [r7, #28]
        break;
 80056f4:	e005      	b.n	8005702 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d077      	beq.n	80057f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	005a      	lsls	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d916      	bls.n	8005752 <UART_SetConfig+0x4a6>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572a:	d212      	bcs.n	8005752 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f023 030f 	bic.w	r3, r3, #15
 8005734:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	b29b      	uxth	r3, r3
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	b29a      	uxth	r2, r3
 8005742:	8afb      	ldrh	r3, [r7, #22]
 8005744:	4313      	orrs	r3, r2
 8005746:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	8afa      	ldrh	r2, [r7, #22]
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e052      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005758:	e04e      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800575e:	2b08      	cmp	r3, #8
 8005760:	d827      	bhi.n	80057b2 <UART_SetConfig+0x506>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x4bc>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fd fe00 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005790:	61f8      	str	r0, [r7, #28]
        break;
 8005792:	e014      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fd fe12 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8005798:	61f8      	str	r0, [r7, #28]
        break;
 800579a:	e010      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b1e      	ldr	r3, [pc, #120]	@ (8005818 <UART_SetConfig+0x56c>)
 800579e:	61fb      	str	r3, [r7, #28]
        break;
 80057a0:	e00d      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fd fd5f 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80057a6:	61f8      	str	r0, [r7, #28]
        break;
 80057a8:	e009      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ae:	61fb      	str	r3, [r7, #28]
        break;
 80057b0:	e005      	b.n	80057be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057bc:	bf00      	nop
    }

    if (pclk != 0U)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d019      	beq.n	80057f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	085a      	lsrs	r2, r3, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d909      	bls.n	80057f2 <UART_SetConfig+0x546>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e4:	d205      	bcs.n	80057f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	e002      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005804:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005808:	4618      	mov	r0, r3
 800580a:	3728      	adds	r7, #40	@ 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005812:	bf00      	nop
 8005814:	40008000 	.word	0x40008000
 8005818:	00f42400 	.word	0x00f42400

0800581c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01a      	beq.n	8005932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800591a:	d10a      	bne.n	8005932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	605a      	str	r2, [r3, #4]
  }
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b098      	sub	sp, #96	@ 0x60
 8005964:	af02      	add	r7, sp, #8
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005970:	f7fc fa24 	bl	8001dbc <HAL_GetTick>
 8005974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d12e      	bne.n	80059e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f88c 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d021      	beq.n	80059e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e6      	bne.n	800599e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e062      	b.n	8005aa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d149      	bne.n	8005a84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f856 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03c      	beq.n	8005a84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	623b      	str	r3, [r7, #32]
   return(result);
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a5c:	61fa      	str	r2, [r7, #28]
 8005a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	69b9      	ldr	r1, [r7, #24]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e011      	b.n	8005aa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3758      	adds	r7, #88	@ 0x58
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	e04f      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d04b      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fc f977 	bl	8001dbc <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e04e      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d037      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b80      	cmp	r3, #128	@ 0x80
 8005af6:	d034      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d031      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d110      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f838 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e029      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d111      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f81e 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e00f      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d0a0      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b095      	sub	sp, #84	@ 0x54
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d118      	bne.n	8005c32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c46:	bf00      	nop
 8005c48:	3754      	adds	r7, #84	@ 0x54
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <siprintf>:
 8005c54:	b40e      	push	{r1, r2, r3}
 8005c56:	b510      	push	{r4, lr}
 8005c58:	b09d      	sub	sp, #116	@ 0x74
 8005c5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c5c:	9002      	str	r0, [sp, #8]
 8005c5e:	9006      	str	r0, [sp, #24]
 8005c60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c64:	480a      	ldr	r0, [pc, #40]	@ (8005c90 <siprintf+0x3c>)
 8005c66:	9107      	str	r1, [sp, #28]
 8005c68:	9104      	str	r1, [sp, #16]
 8005c6a:	490a      	ldr	r1, [pc, #40]	@ (8005c94 <siprintf+0x40>)
 8005c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c70:	9105      	str	r1, [sp, #20]
 8005c72:	2400      	movs	r4, #0
 8005c74:	a902      	add	r1, sp, #8
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c7c:	f000 f9a2 	bl	8005fc4 <_svfiprintf_r>
 8005c80:	9b02      	ldr	r3, [sp, #8]
 8005c82:	701c      	strb	r4, [r3, #0]
 8005c84:	b01d      	add	sp, #116	@ 0x74
 8005c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8a:	b003      	add	sp, #12
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000048 	.word	0x20000048
 8005c94:	ffff0208 	.word	0xffff0208

08005c98 <memset>:
 8005c98:	4402      	add	r2, r0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d100      	bne.n	8005ca2 <memset+0xa>
 8005ca0:	4770      	bx	lr
 8005ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca6:	e7f9      	b.n	8005c9c <memset+0x4>

08005ca8 <__errno>:
 8005ca8:	4b01      	ldr	r3, [pc, #4]	@ (8005cb0 <__errno+0x8>)
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000048 	.word	0x20000048

08005cb4 <__libc_init_array>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005cec <__libc_init_array+0x38>)
 8005cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8005cf0 <__libc_init_array+0x3c>)
 8005cba:	1b64      	subs	r4, r4, r5
 8005cbc:	10a4      	asrs	r4, r4, #2
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	d109      	bne.n	8005cd8 <__libc_init_array+0x24>
 8005cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8005cf4 <__libc_init_array+0x40>)
 8005cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8005cf8 <__libc_init_array+0x44>)
 8005cc8:	f000 fc64 	bl	8006594 <_init>
 8005ccc:	1b64      	subs	r4, r4, r5
 8005cce:	10a4      	asrs	r4, r4, #2
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	42a6      	cmp	r6, r4
 8005cd4:	d105      	bne.n	8005ce2 <__libc_init_array+0x2e>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cdc:	4798      	blx	r3
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__libc_init_array+0xc>
 8005ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce6:	4798      	blx	r3
 8005ce8:	3601      	adds	r6, #1
 8005cea:	e7f2      	b.n	8005cd2 <__libc_init_array+0x1e>
 8005cec:	080301d8 	.word	0x080301d8
 8005cf0:	080301d8 	.word	0x080301d8
 8005cf4:	080301d8 	.word	0x080301d8
 8005cf8:	080301dc 	.word	0x080301dc

08005cfc <__retarget_lock_acquire_recursive>:
 8005cfc:	4770      	bx	lr

08005cfe <__retarget_lock_release_recursive>:
 8005cfe:	4770      	bx	lr

08005d00 <memcpy>:
 8005d00:	440a      	add	r2, r1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d08:	d100      	bne.n	8005d0c <memcpy+0xc>
 8005d0a:	4770      	bx	lr
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d16:	4291      	cmp	r1, r2
 8005d18:	d1f9      	bne.n	8005d0e <memcpy+0xe>
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <_free_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4605      	mov	r5, r0
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d041      	beq.n	8005da8 <_free_r+0x8c>
 8005d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d28:	1f0c      	subs	r4, r1, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfb8      	it	lt
 8005d2e:	18e4      	addlt	r4, r4, r3
 8005d30:	f000 f8e0 	bl	8005ef4 <__malloc_lock>
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <_free_r+0x90>)
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	b933      	cbnz	r3, 8005d48 <_free_r+0x2c>
 8005d3a:	6063      	str	r3, [r4, #4]
 8005d3c:	6014      	str	r4, [r2, #0]
 8005d3e:	4628      	mov	r0, r5
 8005d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d44:	f000 b8dc 	b.w	8005f00 <__malloc_unlock>
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d908      	bls.n	8005d5e <_free_r+0x42>
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	1821      	adds	r1, r4, r0
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf01      	itttt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	1809      	addeq	r1, r1, r0
 8005d5a:	6021      	streq	r1, [r4, #0]
 8005d5c:	e7ed      	b.n	8005d3a <_free_r+0x1e>
 8005d5e:	461a      	mov	r2, r3
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b10b      	cbz	r3, 8005d68 <_free_r+0x4c>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d9fa      	bls.n	8005d5e <_free_r+0x42>
 8005d68:	6811      	ldr	r1, [r2, #0]
 8005d6a:	1850      	adds	r0, r2, r1
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d10b      	bne.n	8005d88 <_free_r+0x6c>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	4401      	add	r1, r0
 8005d74:	1850      	adds	r0, r2, r1
 8005d76:	4283      	cmp	r3, r0
 8005d78:	6011      	str	r1, [r2, #0]
 8005d7a:	d1e0      	bne.n	8005d3e <_free_r+0x22>
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	6053      	str	r3, [r2, #4]
 8005d82:	4408      	add	r0, r1
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	e7da      	b.n	8005d3e <_free_r+0x22>
 8005d88:	d902      	bls.n	8005d90 <_free_r+0x74>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	e7d6      	b.n	8005d3e <_free_r+0x22>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	1821      	adds	r1, r4, r0
 8005d94:	428b      	cmp	r3, r1
 8005d96:	bf04      	itt	eq
 8005d98:	6819      	ldreq	r1, [r3, #0]
 8005d9a:	685b      	ldreq	r3, [r3, #4]
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	bf04      	itt	eq
 8005da0:	1809      	addeq	r1, r1, r0
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	6054      	str	r4, [r2, #4]
 8005da6:	e7ca      	b.n	8005d3e <_free_r+0x22>
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	bf00      	nop
 8005dac:	20008314 	.word	0x20008314

08005db0 <sbrk_aligned>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4e0f      	ldr	r6, [pc, #60]	@ (8005df0 <sbrk_aligned+0x40>)
 8005db4:	460c      	mov	r4, r1
 8005db6:	6831      	ldr	r1, [r6, #0]
 8005db8:	4605      	mov	r5, r0
 8005dba:	b911      	cbnz	r1, 8005dc2 <sbrk_aligned+0x12>
 8005dbc:	f000 fba4 	bl	8006508 <_sbrk_r>
 8005dc0:	6030      	str	r0, [r6, #0]
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 fb9f 	bl	8006508 <_sbrk_r>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d103      	bne.n	8005dd6 <sbrk_aligned+0x26>
 8005dce:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	1cc4      	adds	r4, r0, #3
 8005dd8:	f024 0403 	bic.w	r4, r4, #3
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d0f8      	beq.n	8005dd2 <sbrk_aligned+0x22>
 8005de0:	1a21      	subs	r1, r4, r0
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fb90 	bl	8006508 <_sbrk_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d1f2      	bne.n	8005dd2 <sbrk_aligned+0x22>
 8005dec:	e7ef      	b.n	8005dce <sbrk_aligned+0x1e>
 8005dee:	bf00      	nop
 8005df0:	20008310 	.word	0x20008310

08005df4 <_malloc_r>:
 8005df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df8:	1ccd      	adds	r5, r1, #3
 8005dfa:	f025 0503 	bic.w	r5, r5, #3
 8005dfe:	3508      	adds	r5, #8
 8005e00:	2d0c      	cmp	r5, #12
 8005e02:	bf38      	it	cc
 8005e04:	250c      	movcc	r5, #12
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	4606      	mov	r6, r0
 8005e0a:	db01      	blt.n	8005e10 <_malloc_r+0x1c>
 8005e0c:	42a9      	cmp	r1, r5
 8005e0e:	d904      	bls.n	8005e1a <_malloc_r+0x26>
 8005e10:	230c      	movs	r3, #12
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	2000      	movs	r0, #0
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef0 <_malloc_r+0xfc>
 8005e1e:	f000 f869 	bl	8005ef4 <__malloc_lock>
 8005e22:	f8d8 3000 	ldr.w	r3, [r8]
 8005e26:	461c      	mov	r4, r3
 8005e28:	bb44      	cbnz	r4, 8005e7c <_malloc_r+0x88>
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff ffbf 	bl	8005db0 <sbrk_aligned>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	4604      	mov	r4, r0
 8005e36:	d158      	bne.n	8005eea <_malloc_r+0xf6>
 8005e38:	f8d8 4000 	ldr.w	r4, [r8]
 8005e3c:	4627      	mov	r7, r4
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	d143      	bne.n	8005eca <_malloc_r+0xd6>
 8005e42:	2c00      	cmp	r4, #0
 8005e44:	d04b      	beq.n	8005ede <_malloc_r+0xea>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	eb04 0903 	add.w	r9, r4, r3
 8005e50:	f000 fb5a 	bl	8006508 <_sbrk_r>
 8005e54:	4581      	cmp	r9, r0
 8005e56:	d142      	bne.n	8005ede <_malloc_r+0xea>
 8005e58:	6821      	ldr	r1, [r4, #0]
 8005e5a:	1a6d      	subs	r5, r5, r1
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7ff ffa6 	bl	8005db0 <sbrk_aligned>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d03a      	beq.n	8005ede <_malloc_r+0xea>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	442b      	add	r3, r5
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	bb62      	cbnz	r2, 8005ed0 <_malloc_r+0xdc>
 8005e76:	f8c8 7000 	str.w	r7, [r8]
 8005e7a:	e00f      	b.n	8005e9c <_malloc_r+0xa8>
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	1b52      	subs	r2, r2, r5
 8005e80:	d420      	bmi.n	8005ec4 <_malloc_r+0xd0>
 8005e82:	2a0b      	cmp	r2, #11
 8005e84:	d917      	bls.n	8005eb6 <_malloc_r+0xc2>
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	bf18      	it	ne
 8005e8e:	6059      	strne	r1, [r3, #4]
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	bf08      	it	eq
 8005e94:	f8c8 1000 	streq.w	r1, [r8]
 8005e98:	5162      	str	r2, [r4, r5]
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 f82f 	bl	8005f00 <__malloc_unlock>
 8005ea2:	f104 000b 	add.w	r0, r4, #11
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	f020 0007 	bic.w	r0, r0, #7
 8005eac:	1ac2      	subs	r2, r0, r3
 8005eae:	bf1c      	itt	ne
 8005eb0:	1a1b      	subne	r3, r3, r0
 8005eb2:	50a3      	strne	r3, [r4, r2]
 8005eb4:	e7af      	b.n	8005e16 <_malloc_r+0x22>
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	bf0c      	ite	eq
 8005ebc:	f8c8 2000 	streq.w	r2, [r8]
 8005ec0:	605a      	strne	r2, [r3, #4]
 8005ec2:	e7eb      	b.n	8005e9c <_malloc_r+0xa8>
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	6864      	ldr	r4, [r4, #4]
 8005ec8:	e7ae      	b.n	8005e28 <_malloc_r+0x34>
 8005eca:	463c      	mov	r4, r7
 8005ecc:	687f      	ldr	r7, [r7, #4]
 8005ece:	e7b6      	b.n	8005e3e <_malloc_r+0x4a>
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d1fb      	bne.n	8005ed0 <_malloc_r+0xdc>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6053      	str	r3, [r2, #4]
 8005edc:	e7de      	b.n	8005e9c <_malloc_r+0xa8>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	6033      	str	r3, [r6, #0]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f80c 	bl	8005f00 <__malloc_unlock>
 8005ee8:	e794      	b.n	8005e14 <_malloc_r+0x20>
 8005eea:	6005      	str	r5, [r0, #0]
 8005eec:	e7d6      	b.n	8005e9c <_malloc_r+0xa8>
 8005eee:	bf00      	nop
 8005ef0:	20008314 	.word	0x20008314

08005ef4 <__malloc_lock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	@ (8005efc <__malloc_lock+0x8>)
 8005ef6:	f7ff bf01 	b.w	8005cfc <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	2000830c 	.word	0x2000830c

08005f00 <__malloc_unlock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	@ (8005f08 <__malloc_unlock+0x8>)
 8005f02:	f7ff befc 	b.w	8005cfe <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	2000830c 	.word	0x2000830c

08005f0c <__ssputs_r>:
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f10:	688e      	ldr	r6, [r1, #8]
 8005f12:	461f      	mov	r7, r3
 8005f14:	42be      	cmp	r6, r7
 8005f16:	680b      	ldr	r3, [r1, #0]
 8005f18:	4682      	mov	sl, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4690      	mov	r8, r2
 8005f1e:	d82d      	bhi.n	8005f7c <__ssputs_r+0x70>
 8005f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f28:	d026      	beq.n	8005f78 <__ssputs_r+0x6c>
 8005f2a:	6965      	ldr	r5, [r4, #20]
 8005f2c:	6909      	ldr	r1, [r1, #16]
 8005f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f32:	eba3 0901 	sub.w	r9, r3, r1
 8005f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f3a:	1c7b      	adds	r3, r7, #1
 8005f3c:	444b      	add	r3, r9
 8005f3e:	106d      	asrs	r5, r5, #1
 8005f40:	429d      	cmp	r5, r3
 8005f42:	bf38      	it	cc
 8005f44:	461d      	movcc	r5, r3
 8005f46:	0553      	lsls	r3, r2, #21
 8005f48:	d527      	bpl.n	8005f9a <__ssputs_r+0x8e>
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	f7ff ff52 	bl	8005df4 <_malloc_r>
 8005f50:	4606      	mov	r6, r0
 8005f52:	b360      	cbz	r0, 8005fae <__ssputs_r+0xa2>
 8005f54:	6921      	ldr	r1, [r4, #16]
 8005f56:	464a      	mov	r2, r9
 8005f58:	f7ff fed2 	bl	8005d00 <memcpy>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	6126      	str	r6, [r4, #16]
 8005f6a:	6165      	str	r5, [r4, #20]
 8005f6c:	444e      	add	r6, r9
 8005f6e:	eba5 0509 	sub.w	r5, r5, r9
 8005f72:	6026      	str	r6, [r4, #0]
 8005f74:	60a5      	str	r5, [r4, #8]
 8005f76:	463e      	mov	r6, r7
 8005f78:	42be      	cmp	r6, r7
 8005f7a:	d900      	bls.n	8005f7e <__ssputs_r+0x72>
 8005f7c:	463e      	mov	r6, r7
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	4632      	mov	r2, r6
 8005f82:	4641      	mov	r1, r8
 8005f84:	f000 faa6 	bl	80064d4 <memmove>
 8005f88:	68a3      	ldr	r3, [r4, #8]
 8005f8a:	1b9b      	subs	r3, r3, r6
 8005f8c:	60a3      	str	r3, [r4, #8]
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	4433      	add	r3, r6
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	2000      	movs	r0, #0
 8005f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9a:	462a      	mov	r2, r5
 8005f9c:	f000 fac4 	bl	8006528 <_realloc_r>
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d1e0      	bne.n	8005f68 <__ssputs_r+0x5c>
 8005fa6:	6921      	ldr	r1, [r4, #16]
 8005fa8:	4650      	mov	r0, sl
 8005faa:	f7ff feb7 	bl	8005d1c <_free_r>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	f8ca 3000 	str.w	r3, [sl]
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e7e9      	b.n	8005f96 <__ssputs_r+0x8a>
	...

08005fc4 <_svfiprintf_r>:
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	4698      	mov	r8, r3
 8005fca:	898b      	ldrh	r3, [r1, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	b09d      	sub	sp, #116	@ 0x74
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	d510      	bpl.n	8005ffa <_svfiprintf_r+0x36>
 8005fd8:	690b      	ldr	r3, [r1, #16]
 8005fda:	b973      	cbnz	r3, 8005ffa <_svfiprintf_r+0x36>
 8005fdc:	2140      	movs	r1, #64	@ 0x40
 8005fde:	f7ff ff09 	bl	8005df4 <_malloc_r>
 8005fe2:	6028      	str	r0, [r5, #0]
 8005fe4:	6128      	str	r0, [r5, #16]
 8005fe6:	b930      	cbnz	r0, 8005ff6 <_svfiprintf_r+0x32>
 8005fe8:	230c      	movs	r3, #12
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	b01d      	add	sp, #116	@ 0x74
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	2340      	movs	r3, #64	@ 0x40
 8005ff8:	616b      	str	r3, [r5, #20]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffe:	2320      	movs	r3, #32
 8006000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006004:	f8cd 800c 	str.w	r8, [sp, #12]
 8006008:	2330      	movs	r3, #48	@ 0x30
 800600a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061a8 <_svfiprintf_r+0x1e4>
 800600e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006012:	f04f 0901 	mov.w	r9, #1
 8006016:	4623      	mov	r3, r4
 8006018:	469a      	mov	sl, r3
 800601a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601e:	b10a      	cbz	r2, 8006024 <_svfiprintf_r+0x60>
 8006020:	2a25      	cmp	r2, #37	@ 0x25
 8006022:	d1f9      	bne.n	8006018 <_svfiprintf_r+0x54>
 8006024:	ebba 0b04 	subs.w	fp, sl, r4
 8006028:	d00b      	beq.n	8006042 <_svfiprintf_r+0x7e>
 800602a:	465b      	mov	r3, fp
 800602c:	4622      	mov	r2, r4
 800602e:	4629      	mov	r1, r5
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ff6b 	bl	8005f0c <__ssputs_r>
 8006036:	3001      	adds	r0, #1
 8006038:	f000 80a7 	beq.w	800618a <_svfiprintf_r+0x1c6>
 800603c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800603e:	445a      	add	r2, fp
 8006040:	9209      	str	r2, [sp, #36]	@ 0x24
 8006042:	f89a 3000 	ldrb.w	r3, [sl]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 809f 	beq.w	800618a <_svfiprintf_r+0x1c6>
 800604c:	2300      	movs	r3, #0
 800604e:	f04f 32ff 	mov.w	r2, #4294967295
 8006052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006056:	f10a 0a01 	add.w	sl, sl, #1
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	9307      	str	r3, [sp, #28]
 800605e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006062:	931a      	str	r3, [sp, #104]	@ 0x68
 8006064:	4654      	mov	r4, sl
 8006066:	2205      	movs	r2, #5
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	484e      	ldr	r0, [pc, #312]	@ (80061a8 <_svfiprintf_r+0x1e4>)
 800606e:	f7fa f8b7 	bl	80001e0 <memchr>
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	b9d8      	cbnz	r0, 80060ae <_svfiprintf_r+0xea>
 8006076:	06d0      	lsls	r0, r2, #27
 8006078:	bf44      	itt	mi
 800607a:	2320      	movmi	r3, #32
 800607c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006080:	0711      	lsls	r1, r2, #28
 8006082:	bf44      	itt	mi
 8006084:	232b      	movmi	r3, #43	@ 0x2b
 8006086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800608a:	f89a 3000 	ldrb.w	r3, [sl]
 800608e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006090:	d015      	beq.n	80060be <_svfiprintf_r+0xfa>
 8006092:	9a07      	ldr	r2, [sp, #28]
 8006094:	4654      	mov	r4, sl
 8006096:	2000      	movs	r0, #0
 8006098:	f04f 0c0a 	mov.w	ip, #10
 800609c:	4621      	mov	r1, r4
 800609e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a2:	3b30      	subs	r3, #48	@ 0x30
 80060a4:	2b09      	cmp	r3, #9
 80060a6:	d94b      	bls.n	8006140 <_svfiprintf_r+0x17c>
 80060a8:	b1b0      	cbz	r0, 80060d8 <_svfiprintf_r+0x114>
 80060aa:	9207      	str	r2, [sp, #28]
 80060ac:	e014      	b.n	80060d8 <_svfiprintf_r+0x114>
 80060ae:	eba0 0308 	sub.w	r3, r0, r8
 80060b2:	fa09 f303 	lsl.w	r3, r9, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	46a2      	mov	sl, r4
 80060bc:	e7d2      	b.n	8006064 <_svfiprintf_r+0xa0>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	1d19      	adds	r1, r3, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	9103      	str	r1, [sp, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfbb      	ittet	lt
 80060ca:	425b      	neglt	r3, r3
 80060cc:	f042 0202 	orrlt.w	r2, r2, #2
 80060d0:	9307      	strge	r3, [sp, #28]
 80060d2:	9307      	strlt	r3, [sp, #28]
 80060d4:	bfb8      	it	lt
 80060d6:	9204      	strlt	r2, [sp, #16]
 80060d8:	7823      	ldrb	r3, [r4, #0]
 80060da:	2b2e      	cmp	r3, #46	@ 0x2e
 80060dc:	d10a      	bne.n	80060f4 <_svfiprintf_r+0x130>
 80060de:	7863      	ldrb	r3, [r4, #1]
 80060e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060e2:	d132      	bne.n	800614a <_svfiprintf_r+0x186>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	9203      	str	r2, [sp, #12]
 80060ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060f0:	3402      	adds	r4, #2
 80060f2:	9305      	str	r3, [sp, #20]
 80060f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061b8 <_svfiprintf_r+0x1f4>
 80060f8:	7821      	ldrb	r1, [r4, #0]
 80060fa:	2203      	movs	r2, #3
 80060fc:	4650      	mov	r0, sl
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	b138      	cbz	r0, 8006114 <_svfiprintf_r+0x150>
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	eba0 000a 	sub.w	r0, r0, sl
 800610a:	2240      	movs	r2, #64	@ 0x40
 800610c:	4082      	lsls	r2, r0
 800610e:	4313      	orrs	r3, r2
 8006110:	3401      	adds	r4, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006118:	4824      	ldr	r0, [pc, #144]	@ (80061ac <_svfiprintf_r+0x1e8>)
 800611a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800611e:	2206      	movs	r2, #6
 8006120:	f7fa f85e 	bl	80001e0 <memchr>
 8006124:	2800      	cmp	r0, #0
 8006126:	d036      	beq.n	8006196 <_svfiprintf_r+0x1d2>
 8006128:	4b21      	ldr	r3, [pc, #132]	@ (80061b0 <_svfiprintf_r+0x1ec>)
 800612a:	bb1b      	cbnz	r3, 8006174 <_svfiprintf_r+0x1b0>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	3307      	adds	r3, #7
 8006130:	f023 0307 	bic.w	r3, r3, #7
 8006134:	3308      	adds	r3, #8
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613a:	4433      	add	r3, r6
 800613c:	9309      	str	r3, [sp, #36]	@ 0x24
 800613e:	e76a      	b.n	8006016 <_svfiprintf_r+0x52>
 8006140:	fb0c 3202 	mla	r2, ip, r2, r3
 8006144:	460c      	mov	r4, r1
 8006146:	2001      	movs	r0, #1
 8006148:	e7a8      	b.n	800609c <_svfiprintf_r+0xd8>
 800614a:	2300      	movs	r3, #0
 800614c:	3401      	adds	r4, #1
 800614e:	9305      	str	r3, [sp, #20]
 8006150:	4619      	mov	r1, r3
 8006152:	f04f 0c0a 	mov.w	ip, #10
 8006156:	4620      	mov	r0, r4
 8006158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800615c:	3a30      	subs	r2, #48	@ 0x30
 800615e:	2a09      	cmp	r2, #9
 8006160:	d903      	bls.n	800616a <_svfiprintf_r+0x1a6>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c6      	beq.n	80060f4 <_svfiprintf_r+0x130>
 8006166:	9105      	str	r1, [sp, #20]
 8006168:	e7c4      	b.n	80060f4 <_svfiprintf_r+0x130>
 800616a:	fb0c 2101 	mla	r1, ip, r1, r2
 800616e:	4604      	mov	r4, r0
 8006170:	2301      	movs	r3, #1
 8006172:	e7f0      	b.n	8006156 <_svfiprintf_r+0x192>
 8006174:	ab03      	add	r3, sp, #12
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	462a      	mov	r2, r5
 800617a:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <_svfiprintf_r+0x1f0>)
 800617c:	a904      	add	r1, sp, #16
 800617e:	4638      	mov	r0, r7
 8006180:	f3af 8000 	nop.w
 8006184:	1c42      	adds	r2, r0, #1
 8006186:	4606      	mov	r6, r0
 8006188:	d1d6      	bne.n	8006138 <_svfiprintf_r+0x174>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	065b      	lsls	r3, r3, #25
 800618e:	f53f af2d 	bmi.w	8005fec <_svfiprintf_r+0x28>
 8006192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006194:	e72c      	b.n	8005ff0 <_svfiprintf_r+0x2c>
 8006196:	ab03      	add	r3, sp, #12
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	462a      	mov	r2, r5
 800619c:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <_svfiprintf_r+0x1f0>)
 800619e:	a904      	add	r1, sp, #16
 80061a0:	4638      	mov	r0, r7
 80061a2:	f000 f879 	bl	8006298 <_printf_i>
 80061a6:	e7ed      	b.n	8006184 <_svfiprintf_r+0x1c0>
 80061a8:	0803019c 	.word	0x0803019c
 80061ac:	080301a6 	.word	0x080301a6
 80061b0:	00000000 	.word	0x00000000
 80061b4:	08005f0d 	.word	0x08005f0d
 80061b8:	080301a2 	.word	0x080301a2

080061bc <_printf_common>:
 80061bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	4616      	mov	r6, r2
 80061c2:	4698      	mov	r8, r3
 80061c4:	688a      	ldr	r2, [r1, #8]
 80061c6:	690b      	ldr	r3, [r1, #16]
 80061c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bfb8      	it	lt
 80061d0:	4613      	movlt	r3, r2
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061d8:	4607      	mov	r7, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	b10a      	cbz	r2, 80061e2 <_printf_common+0x26>
 80061de:	3301      	adds	r3, #1
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	0699      	lsls	r1, r3, #26
 80061e6:	bf42      	ittt	mi
 80061e8:	6833      	ldrmi	r3, [r6, #0]
 80061ea:	3302      	addmi	r3, #2
 80061ec:	6033      	strmi	r3, [r6, #0]
 80061ee:	6825      	ldr	r5, [r4, #0]
 80061f0:	f015 0506 	ands.w	r5, r5, #6
 80061f4:	d106      	bne.n	8006204 <_printf_common+0x48>
 80061f6:	f104 0a19 	add.w	sl, r4, #25
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	6832      	ldr	r2, [r6, #0]
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	42ab      	cmp	r3, r5
 8006202:	dc26      	bgt.n	8006252 <_printf_common+0x96>
 8006204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	3b00      	subs	r3, #0
 800620c:	bf18      	it	ne
 800620e:	2301      	movne	r3, #1
 8006210:	0692      	lsls	r2, r2, #26
 8006212:	d42b      	bmi.n	800626c <_printf_common+0xb0>
 8006214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006218:	4641      	mov	r1, r8
 800621a:	4638      	mov	r0, r7
 800621c:	47c8      	blx	r9
 800621e:	3001      	adds	r0, #1
 8006220:	d01e      	beq.n	8006260 <_printf_common+0xa4>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6922      	ldr	r2, [r4, #16]
 8006226:	f003 0306 	and.w	r3, r3, #6
 800622a:	2b04      	cmp	r3, #4
 800622c:	bf02      	ittt	eq
 800622e:	68e5      	ldreq	r5, [r4, #12]
 8006230:	6833      	ldreq	r3, [r6, #0]
 8006232:	1aed      	subeq	r5, r5, r3
 8006234:	68a3      	ldr	r3, [r4, #8]
 8006236:	bf0c      	ite	eq
 8006238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800623c:	2500      	movne	r5, #0
 800623e:	4293      	cmp	r3, r2
 8006240:	bfc4      	itt	gt
 8006242:	1a9b      	subgt	r3, r3, r2
 8006244:	18ed      	addgt	r5, r5, r3
 8006246:	2600      	movs	r6, #0
 8006248:	341a      	adds	r4, #26
 800624a:	42b5      	cmp	r5, r6
 800624c:	d11a      	bne.n	8006284 <_printf_common+0xc8>
 800624e:	2000      	movs	r0, #0
 8006250:	e008      	b.n	8006264 <_printf_common+0xa8>
 8006252:	2301      	movs	r3, #1
 8006254:	4652      	mov	r2, sl
 8006256:	4641      	mov	r1, r8
 8006258:	4638      	mov	r0, r7
 800625a:	47c8      	blx	r9
 800625c:	3001      	adds	r0, #1
 800625e:	d103      	bne.n	8006268 <_printf_common+0xac>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006268:	3501      	adds	r5, #1
 800626a:	e7c6      	b.n	80061fa <_printf_common+0x3e>
 800626c:	18e1      	adds	r1, r4, r3
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	2030      	movs	r0, #48	@ 0x30
 8006272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006276:	4422      	add	r2, r4
 8006278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800627c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006280:	3302      	adds	r3, #2
 8006282:	e7c7      	b.n	8006214 <_printf_common+0x58>
 8006284:	2301      	movs	r3, #1
 8006286:	4622      	mov	r2, r4
 8006288:	4641      	mov	r1, r8
 800628a:	4638      	mov	r0, r7
 800628c:	47c8      	blx	r9
 800628e:	3001      	adds	r0, #1
 8006290:	d0e6      	beq.n	8006260 <_printf_common+0xa4>
 8006292:	3601      	adds	r6, #1
 8006294:	e7d9      	b.n	800624a <_printf_common+0x8e>
	...

08006298 <_printf_i>:
 8006298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	7e0f      	ldrb	r7, [r1, #24]
 800629e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a0:	2f78      	cmp	r7, #120	@ 0x78
 80062a2:	4691      	mov	r9, r2
 80062a4:	4680      	mov	r8, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	469a      	mov	sl, r3
 80062aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ae:	d807      	bhi.n	80062c0 <_printf_i+0x28>
 80062b0:	2f62      	cmp	r7, #98	@ 0x62
 80062b2:	d80a      	bhi.n	80062ca <_printf_i+0x32>
 80062b4:	2f00      	cmp	r7, #0
 80062b6:	f000 80d1 	beq.w	800645c <_printf_i+0x1c4>
 80062ba:	2f58      	cmp	r7, #88	@ 0x58
 80062bc:	f000 80b8 	beq.w	8006430 <_printf_i+0x198>
 80062c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062c8:	e03a      	b.n	8006340 <_printf_i+0xa8>
 80062ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ce:	2b15      	cmp	r3, #21
 80062d0:	d8f6      	bhi.n	80062c0 <_printf_i+0x28>
 80062d2:	a101      	add	r1, pc, #4	@ (adr r1, 80062d8 <_printf_i+0x40>)
 80062d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d8:	08006331 	.word	0x08006331
 80062dc:	08006345 	.word	0x08006345
 80062e0:	080062c1 	.word	0x080062c1
 80062e4:	080062c1 	.word	0x080062c1
 80062e8:	080062c1 	.word	0x080062c1
 80062ec:	080062c1 	.word	0x080062c1
 80062f0:	08006345 	.word	0x08006345
 80062f4:	080062c1 	.word	0x080062c1
 80062f8:	080062c1 	.word	0x080062c1
 80062fc:	080062c1 	.word	0x080062c1
 8006300:	080062c1 	.word	0x080062c1
 8006304:	08006443 	.word	0x08006443
 8006308:	0800636f 	.word	0x0800636f
 800630c:	080063fd 	.word	0x080063fd
 8006310:	080062c1 	.word	0x080062c1
 8006314:	080062c1 	.word	0x080062c1
 8006318:	08006465 	.word	0x08006465
 800631c:	080062c1 	.word	0x080062c1
 8006320:	0800636f 	.word	0x0800636f
 8006324:	080062c1 	.word	0x080062c1
 8006328:	080062c1 	.word	0x080062c1
 800632c:	08006405 	.word	0x08006405
 8006330:	6833      	ldr	r3, [r6, #0]
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6032      	str	r2, [r6, #0]
 8006338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800633c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006340:	2301      	movs	r3, #1
 8006342:	e09c      	b.n	800647e <_printf_i+0x1e6>
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	1d19      	adds	r1, r3, #4
 800634a:	6031      	str	r1, [r6, #0]
 800634c:	0606      	lsls	r6, r0, #24
 800634e:	d501      	bpl.n	8006354 <_printf_i+0xbc>
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	e003      	b.n	800635c <_printf_i+0xc4>
 8006354:	0645      	lsls	r5, r0, #25
 8006356:	d5fb      	bpl.n	8006350 <_printf_i+0xb8>
 8006358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800635c:	2d00      	cmp	r5, #0
 800635e:	da03      	bge.n	8006368 <_printf_i+0xd0>
 8006360:	232d      	movs	r3, #45	@ 0x2d
 8006362:	426d      	negs	r5, r5
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006368:	4858      	ldr	r0, [pc, #352]	@ (80064cc <_printf_i+0x234>)
 800636a:	230a      	movs	r3, #10
 800636c:	e011      	b.n	8006392 <_printf_i+0xfa>
 800636e:	6821      	ldr	r1, [r4, #0]
 8006370:	6833      	ldr	r3, [r6, #0]
 8006372:	0608      	lsls	r0, r1, #24
 8006374:	f853 5b04 	ldr.w	r5, [r3], #4
 8006378:	d402      	bmi.n	8006380 <_printf_i+0xe8>
 800637a:	0649      	lsls	r1, r1, #25
 800637c:	bf48      	it	mi
 800637e:	b2ad      	uxthmi	r5, r5
 8006380:	2f6f      	cmp	r7, #111	@ 0x6f
 8006382:	4852      	ldr	r0, [pc, #328]	@ (80064cc <_printf_i+0x234>)
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	bf14      	ite	ne
 8006388:	230a      	movne	r3, #10
 800638a:	2308      	moveq	r3, #8
 800638c:	2100      	movs	r1, #0
 800638e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006392:	6866      	ldr	r6, [r4, #4]
 8006394:	60a6      	str	r6, [r4, #8]
 8006396:	2e00      	cmp	r6, #0
 8006398:	db05      	blt.n	80063a6 <_printf_i+0x10e>
 800639a:	6821      	ldr	r1, [r4, #0]
 800639c:	432e      	orrs	r6, r5
 800639e:	f021 0104 	bic.w	r1, r1, #4
 80063a2:	6021      	str	r1, [r4, #0]
 80063a4:	d04b      	beq.n	800643e <_printf_i+0x1a6>
 80063a6:	4616      	mov	r6, r2
 80063a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ac:	fb03 5711 	mls	r7, r3, r1, r5
 80063b0:	5dc7      	ldrb	r7, [r0, r7]
 80063b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063b6:	462f      	mov	r7, r5
 80063b8:	42bb      	cmp	r3, r7
 80063ba:	460d      	mov	r5, r1
 80063bc:	d9f4      	bls.n	80063a8 <_printf_i+0x110>
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d10b      	bne.n	80063da <_printf_i+0x142>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	07df      	lsls	r7, r3, #31
 80063c6:	d508      	bpl.n	80063da <_printf_i+0x142>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6861      	ldr	r1, [r4, #4]
 80063cc:	4299      	cmp	r1, r3
 80063ce:	bfde      	ittt	le
 80063d0:	2330      	movle	r3, #48	@ 0x30
 80063d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063da:	1b92      	subs	r2, r2, r6
 80063dc:	6122      	str	r2, [r4, #16]
 80063de:	f8cd a000 	str.w	sl, [sp]
 80063e2:	464b      	mov	r3, r9
 80063e4:	aa03      	add	r2, sp, #12
 80063e6:	4621      	mov	r1, r4
 80063e8:	4640      	mov	r0, r8
 80063ea:	f7ff fee7 	bl	80061bc <_printf_common>
 80063ee:	3001      	adds	r0, #1
 80063f0:	d14a      	bne.n	8006488 <_printf_i+0x1f0>
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295
 80063f6:	b004      	add	sp, #16
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f043 0320 	orr.w	r3, r3, #32
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	4832      	ldr	r0, [pc, #200]	@ (80064d0 <_printf_i+0x238>)
 8006406:	2778      	movs	r7, #120	@ 0x78
 8006408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	061f      	lsls	r7, r3, #24
 8006412:	f851 5b04 	ldr.w	r5, [r1], #4
 8006416:	d402      	bmi.n	800641e <_printf_i+0x186>
 8006418:	065f      	lsls	r7, r3, #25
 800641a:	bf48      	it	mi
 800641c:	b2ad      	uxthmi	r5, r5
 800641e:	6031      	str	r1, [r6, #0]
 8006420:	07d9      	lsls	r1, r3, #31
 8006422:	bf44      	itt	mi
 8006424:	f043 0320 	orrmi.w	r3, r3, #32
 8006428:	6023      	strmi	r3, [r4, #0]
 800642a:	b11d      	cbz	r5, 8006434 <_printf_i+0x19c>
 800642c:	2310      	movs	r3, #16
 800642e:	e7ad      	b.n	800638c <_printf_i+0xf4>
 8006430:	4826      	ldr	r0, [pc, #152]	@ (80064cc <_printf_i+0x234>)
 8006432:	e7e9      	b.n	8006408 <_printf_i+0x170>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	e7f6      	b.n	800642c <_printf_i+0x194>
 800643e:	4616      	mov	r6, r2
 8006440:	e7bd      	b.n	80063be <_printf_i+0x126>
 8006442:	6833      	ldr	r3, [r6, #0]
 8006444:	6825      	ldr	r5, [r4, #0]
 8006446:	6961      	ldr	r1, [r4, #20]
 8006448:	1d18      	adds	r0, r3, #4
 800644a:	6030      	str	r0, [r6, #0]
 800644c:	062e      	lsls	r6, r5, #24
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	d501      	bpl.n	8006456 <_printf_i+0x1be>
 8006452:	6019      	str	r1, [r3, #0]
 8006454:	e002      	b.n	800645c <_printf_i+0x1c4>
 8006456:	0668      	lsls	r0, r5, #25
 8006458:	d5fb      	bpl.n	8006452 <_printf_i+0x1ba>
 800645a:	8019      	strh	r1, [r3, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	4616      	mov	r6, r2
 8006462:	e7bc      	b.n	80063de <_printf_i+0x146>
 8006464:	6833      	ldr	r3, [r6, #0]
 8006466:	1d1a      	adds	r2, r3, #4
 8006468:	6032      	str	r2, [r6, #0]
 800646a:	681e      	ldr	r6, [r3, #0]
 800646c:	6862      	ldr	r2, [r4, #4]
 800646e:	2100      	movs	r1, #0
 8006470:	4630      	mov	r0, r6
 8006472:	f7f9 feb5 	bl	80001e0 <memchr>
 8006476:	b108      	cbz	r0, 800647c <_printf_i+0x1e4>
 8006478:	1b80      	subs	r0, r0, r6
 800647a:	6060      	str	r0, [r4, #4]
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006486:	e7aa      	b.n	80063de <_printf_i+0x146>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	4632      	mov	r2, r6
 800648c:	4649      	mov	r1, r9
 800648e:	4640      	mov	r0, r8
 8006490:	47d0      	blx	sl
 8006492:	3001      	adds	r0, #1
 8006494:	d0ad      	beq.n	80063f2 <_printf_i+0x15a>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	079b      	lsls	r3, r3, #30
 800649a:	d413      	bmi.n	80064c4 <_printf_i+0x22c>
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	4298      	cmp	r0, r3
 80064a2:	bfb8      	it	lt
 80064a4:	4618      	movlt	r0, r3
 80064a6:	e7a6      	b.n	80063f6 <_printf_i+0x15e>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4632      	mov	r2, r6
 80064ac:	4649      	mov	r1, r9
 80064ae:	4640      	mov	r0, r8
 80064b0:	47d0      	blx	sl
 80064b2:	3001      	adds	r0, #1
 80064b4:	d09d      	beq.n	80063f2 <_printf_i+0x15a>
 80064b6:	3501      	adds	r5, #1
 80064b8:	68e3      	ldr	r3, [r4, #12]
 80064ba:	9903      	ldr	r1, [sp, #12]
 80064bc:	1a5b      	subs	r3, r3, r1
 80064be:	42ab      	cmp	r3, r5
 80064c0:	dcf2      	bgt.n	80064a8 <_printf_i+0x210>
 80064c2:	e7eb      	b.n	800649c <_printf_i+0x204>
 80064c4:	2500      	movs	r5, #0
 80064c6:	f104 0619 	add.w	r6, r4, #25
 80064ca:	e7f5      	b.n	80064b8 <_printf_i+0x220>
 80064cc:	080301ad 	.word	0x080301ad
 80064d0:	080301be 	.word	0x080301be

080064d4 <memmove>:
 80064d4:	4288      	cmp	r0, r1
 80064d6:	b510      	push	{r4, lr}
 80064d8:	eb01 0402 	add.w	r4, r1, r2
 80064dc:	d902      	bls.n	80064e4 <memmove+0x10>
 80064de:	4284      	cmp	r4, r0
 80064e0:	4623      	mov	r3, r4
 80064e2:	d807      	bhi.n	80064f4 <memmove+0x20>
 80064e4:	1e43      	subs	r3, r0, #1
 80064e6:	42a1      	cmp	r1, r4
 80064e8:	d008      	beq.n	80064fc <memmove+0x28>
 80064ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064f2:	e7f8      	b.n	80064e6 <memmove+0x12>
 80064f4:	4402      	add	r2, r0
 80064f6:	4601      	mov	r1, r0
 80064f8:	428a      	cmp	r2, r1
 80064fa:	d100      	bne.n	80064fe <memmove+0x2a>
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006506:	e7f7      	b.n	80064f8 <memmove+0x24>

08006508 <_sbrk_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	@ (8006524 <_sbrk_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fa fce4 	bl	8000ee0 <_sbrk>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_sbrk_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_sbrk_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	20008308 	.word	0x20008308

08006528 <_realloc_r>:
 8006528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652c:	4607      	mov	r7, r0
 800652e:	4614      	mov	r4, r2
 8006530:	460d      	mov	r5, r1
 8006532:	b921      	cbnz	r1, 800653e <_realloc_r+0x16>
 8006534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4611      	mov	r1, r2
 800653a:	f7ff bc5b 	b.w	8005df4 <_malloc_r>
 800653e:	b92a      	cbnz	r2, 800654c <_realloc_r+0x24>
 8006540:	f7ff fbec 	bl	8005d1c <_free_r>
 8006544:	4625      	mov	r5, r4
 8006546:	4628      	mov	r0, r5
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800654c:	f000 f81a 	bl	8006584 <_malloc_usable_size_r>
 8006550:	4284      	cmp	r4, r0
 8006552:	4606      	mov	r6, r0
 8006554:	d802      	bhi.n	800655c <_realloc_r+0x34>
 8006556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800655a:	d8f4      	bhi.n	8006546 <_realloc_r+0x1e>
 800655c:	4621      	mov	r1, r4
 800655e:	4638      	mov	r0, r7
 8006560:	f7ff fc48 	bl	8005df4 <_malloc_r>
 8006564:	4680      	mov	r8, r0
 8006566:	b908      	cbnz	r0, 800656c <_realloc_r+0x44>
 8006568:	4645      	mov	r5, r8
 800656a:	e7ec      	b.n	8006546 <_realloc_r+0x1e>
 800656c:	42b4      	cmp	r4, r6
 800656e:	4622      	mov	r2, r4
 8006570:	4629      	mov	r1, r5
 8006572:	bf28      	it	cs
 8006574:	4632      	movcs	r2, r6
 8006576:	f7ff fbc3 	bl	8005d00 <memcpy>
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff fbcd 	bl	8005d1c <_free_r>
 8006582:	e7f1      	b.n	8006568 <_realloc_r+0x40>

08006584 <_malloc_usable_size_r>:
 8006584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006588:	1f18      	subs	r0, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfbc      	itt	lt
 800658e:	580b      	ldrlt	r3, [r1, r0]
 8006590:	18c0      	addlt	r0, r0, r3
 8006592:	4770      	bx	lr

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
