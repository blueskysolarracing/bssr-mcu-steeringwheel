
bssr-mcu-steeringwheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001cacc  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021de0  08021de0  00023050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021de0  08021de0  00022de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021de8  08021de8  00023050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021de8  08021de8  00022de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021dec  08021dec  00022dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08021df0  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008088  20000050  08021e40  00023050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200080d8  08021e40  000230d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ac1  00000000  00000000  00023080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e1  00000000  00000000  00035b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00038328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00039428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002686  00000000  00000000  0003a16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015089  00000000  00000000  0003c7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3466  00000000  00000000  0005187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  00134d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00139484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052fc 	.word	0x080052fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080052fc 	.word	0x080052fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b53      	ldr	r3, [pc, #332]	@ (8000658 <MX_GPIO_Init+0x164>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a52      	ldr	r2, [pc, #328]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b50      	ldr	r3, [pc, #320]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b4d      	ldr	r3, [pc, #308]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a4c      	ldr	r2, [pc, #304]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b4a      	ldr	r3, [pc, #296]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b47      	ldr	r3, [pc, #284]	@ (8000658 <MX_GPIO_Init+0x164>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a46      	ldr	r2, [pc, #280]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b44      	ldr	r3, [pc, #272]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b41      	ldr	r3, [pc, #260]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a40      	ldr	r2, [pc, #256]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <MX_GPIO_Init+0x164>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a3a      	ldr	r2, [pc, #232]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_GPIO_Init+0x164>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_IT_GPIO_Port, INPUT_IT_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	4835      	ldr	r0, [pc, #212]	@ (800065c <MX_GPIO_Init+0x168>)
 8000588:	f001 fc3c 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 800058c:	2200      	movs	r2, #0
 800058e:	f640 4116 	movw	r1, #3094	@ 0xc16
 8000592:	4833      	ldr	r0, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000594:	f001 fc36 	bl	8001e04 <HAL_GPIO_WritePin>
                          |DISPLAY_DISP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	4831      	ldr	r0, [pc, #196]	@ (8000664 <MX_GPIO_Init+0x170>)
 800059e:	f001 fc31 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	482e      	ldr	r0, [pc, #184]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005a8:	f001 fc2c 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4827      	ldr	r0, [pc, #156]	@ (800065c <MX_GPIO_Init+0x168>)
 80005c0:	f001 fa76 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_IT_Pin */
  GPIO_InitStruct.Pin = INPUT_IT_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_IT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4820      	ldr	r0, [pc, #128]	@ (800065c <MX_GPIO_Init+0x168>)
 80005dc:	f001 fa68 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_STATE_Pin */
  GPIO_InitStruct.Pin = INPUT_STATE_Pin;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_STATE_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <MX_GPIO_Init+0x16c>)
 80005f4:	f001 fa5c 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_B0_Pin INPUT_B1_Pin INPUT_B2_Pin INPUT_B3_Pin
                           DISPLAY_DISP_Pin */
  GPIO_InitStruct.Pin = INPUT_B0_Pin|INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin
 80005f8:	f640 4316 	movw	r3, #3094	@ 0xc16
 80005fc:	617b      	str	r3, [r7, #20]
                          |DISPLAY_DISP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <MX_GPIO_Init+0x16c>)
 8000612:	f001 fa4d 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x170>)
 800062e:	f001 fa3f 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_EXTMODE_Pin */
  GPIO_InitStruct.Pin = DISPLAY_EXTMODE_Pin;
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_EXTMODE_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_GPIO_Init+0x16c>)
 800064a:	f001 fa31 	bl	8001ab0 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400
 8000664:	48000c00 	.word	0x48000c00

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(DISPLAY_EXTMODE_GPIO_Port, DISPLAY_EXTMODE_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	4851      	ldr	r0, [pc, #324]	@ (80007b8 <main+0x150>)
 8000674:	f001 fbc6 	bl	8001e04 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f001 f8c0 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f8b8 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ff38 	bl	80004f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000684:	f000 f90a 	bl	800089c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000688:	f000 f942 	bl	8000910 <MX_SPI3_Init>
  MX_TIM2_Init();
 800068c:	f000 fa5a 	bl	8000b44 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000690:	f000 fb1a 	bl	8000cc8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000694:	f000 fc46 	bl	8000f24 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000698:	f000 fab0 	bl	8000bfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// FAULT LIGHT PWM:
	TIM4->CCR1 = 0;
 800069c:	4b47      	ldr	r3, [pc, #284]	@ (80007bc <main+0x154>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4846      	ldr	r0, [pc, #280]	@ (80007c0 <main+0x158>)
 80006a6:	f003 fa89 	bl	8003bbc <HAL_TIM_PWM_Start>

	// READ LIGHT PWM:
	TIM4->CCR3 = 1000;
 80006aa:	4b44      	ldr	r3, [pc, #272]	@ (80007bc <main+0x154>)
 80006ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006b2:	2108      	movs	r1, #8
 80006b4:	4842      	ldr	r0, [pc, #264]	@ (80007c0 <main+0x158>)
 80006b6:	f003 fa81 	bl	8003bbc <HAL_TIM_PWM_Start>

	// LEFT IND:
	TIM3->CCR2 = 0;
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <main+0x15c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4841      	ldr	r0, [pc, #260]	@ (80007c8 <main+0x160>)
 80006c4:	f003 fa7a 	bl	8003bbc <HAL_TIM_PWM_Start>

	// RIGHT IND:
	TIM3->CCR3 = 0;
 80006c8:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <main+0x15c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006ce:	2108      	movs	r1, #8
 80006d0:	483d      	ldr	r0, [pc, #244]	@ (80007c8 <main+0x160>)
 80006d2:	f003 fa73 	bl	8003bbc <HAL_TIM_PWM_Start>


	// SET UP THE DISPLAY
	ls032.spi_handle = &hspi3;
 80006d6:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <main+0x164>)
 80006d8:	4a3d      	ldr	r2, [pc, #244]	@ (80007d0 <main+0x168>)
 80006da:	601a      	str	r2, [r3, #0]
	ls032.cs_gpio_handle = SPI3_CS_GPIO_Port;
 80006dc:	4b3b      	ldr	r3, [pc, #236]	@ (80007cc <main+0x164>)
 80006de:	4a3d      	ldr	r2, [pc, #244]	@ (80007d4 <main+0x16c>)
 80006e0:	605a      	str	r2, [r3, #4]
	ls032.cs_gpio_pin = SPI3_CS_Pin;
 80006e2:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <main+0x164>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	811a      	strh	r2, [r3, #8]
	ls032.extcomin_tim_handle = &htim2;
 80006e8:	4b38      	ldr	r3, [pc, #224]	@ (80007cc <main+0x164>)
 80006ea:	4a3b      	ldr	r2, [pc, #236]	@ (80007d8 <main+0x170>)
 80006ec:	60da      	str	r2, [r3, #12]
	ls032.extcomin_channel = TIM_CHANNEL_2;
 80006ee:	4b37      	ldr	r3, [pc, #220]	@ (80007cc <main+0x164>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	821a      	strh	r2, [r3, #16]
	ls032.extmode_gpio_handle = DISPLAY_EXTMODE_GPIO_Port;
 80006f4:	4b35      	ldr	r3, [pc, #212]	@ (80007cc <main+0x164>)
 80006f6:	4a30      	ldr	r2, [pc, #192]	@ (80007b8 <main+0x150>)
 80006f8:	615a      	str	r2, [r3, #20]
	ls032.extmode_gpio_pin = DISPLAY_EXTMODE_Pin;
 80006fa:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <main+0x164>)
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	831a      	strh	r2, [r3, #24]
	ls032.disp_gpio_handle = DISPLAY_DISP_GPIO_Port;
 8000700:	4b32      	ldr	r3, [pc, #200]	@ (80007cc <main+0x164>)
 8000702:	4a2d      	ldr	r2, [pc, #180]	@ (80007b8 <main+0x150>)
 8000704:	61da      	str	r2, [r3, #28]
	ls032.disp_gpio_pin = DISPLAY_DISP_Pin;
 8000706:	4b31      	ldr	r3, [pc, #196]	@ (80007cc <main+0x164>)
 8000708:	2210      	movs	r2, #16
 800070a:	841a      	strh	r2, [r3, #32]
	ls032.vram = ls032_vram;
 800070c:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <main+0x164>)
 800070e:	4a33      	ldr	r2, [pc, #204]	@ (80007dc <main+0x174>)
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
	ls032.vram_len = ls032_vram_len;
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <main+0x178>)
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <main+0x164>)
 8000718:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Assign register memory to references in LS032
	ls032.registers = ls032_registers;
 800071a:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <main+0x164>)
 800071c:	4a31      	ldr	r2, [pc, #196]	@ (80007e4 <main+0x17c>)
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint8_t i = 0; i < 32; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e00e      	b.n	8000744 <main+0xdc>
		ls032.registers[i].str = ls032_registers_text[i];
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <main+0x164>)
 800072a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	4419      	add	r1, r3
 8000732:	4613      	mov	r3, r2
 8000734:	021b      	lsls	r3, r3, #8
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	4a2b      	ldr	r2, [pc, #172]	@ (80007e8 <main+0x180>)
 800073a:	4413      	add	r3, r2
 800073c:	60cb      	str	r3, [r1, #12]
	for (uint8_t i = 0; i < 32; i++)
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	3301      	adds	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b1f      	cmp	r3, #31
 8000748:	d9ed      	bls.n	8000726 <main+0xbe>

	if (LS032_Init(&ls032)) {
 800074a:	4820      	ldr	r0, [pc, #128]	@ (80007cc <main+0x164>)
 800074c:	f000 fd92 	bl	8001274 <LS032_Init>
		// TODO: Error Handle
	}

	LS032_DrawLogo(&ls032);
 8000750:	481e      	ldr	r0, [pc, #120]	@ (80007cc <main+0x164>)
 8000752:	f000 ff61 	bl	8001618 <LS032_DrawLogo>
	LS032_Update(&ls032);
 8000756:	481d      	ldr	r0, [pc, #116]	@ (80007cc <main+0x164>)
 8000758:	f000 fec8 	bl	80014ec <LS032_Update>

	uint8_t tmp_num = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73bb      	strb	r3, [r7, #14]
	char bars[10] = "||||||||||";
 8000760:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <main+0x184>)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	ca07      	ldmia	r2, {r0, r1, r2}
 8000766:	c303      	stmia	r3!, {r0, r1}
 8000768:	801a      	strh	r2, [r3, #0]

	LS032_TextReg_SetPos(&ls032, 0x00, 10, 10);
 800076a:	230a      	movs	r3, #10
 800076c:	220a      	movs	r2, #10
 800076e:	2100      	movs	r1, #0
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <main+0x164>)
 8000772:	f000 fe39 	bl	80013e8 <LS032_TextReg_SetPos>
	LS032_TextReg_SetSize(&ls032, 0x00, 7);
 8000776:	2207      	movs	r2, #7
 8000778:	2100      	movs	r1, #0
 800077a:	4814      	ldr	r0, [pc, #80]	@ (80007cc <main+0x164>)
 800077c:	f000 fe66 	bl	800144c <LS032_TextReg_SetSize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LS032_Clear(&ls032);
 8000780:	4812      	ldr	r0, [pc, #72]	@ (80007cc <main+0x164>)
 8000782:	f000 fed6 	bl	8001532 <LS032_Clear>
	  LS032_Wipe(&ls032);
 8000786:	4811      	ldr	r0, [pc, #68]	@ (80007cc <main+0x164>)
 8000788:	f000 fec1 	bl	800150e <LS032_Wipe>
	  LS032_TextReg_SetString(&ls032, 0x00, tmp_num, bars);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	2100      	movs	r1, #0
 8000792:	480e      	ldr	r0, [pc, #56]	@ (80007cc <main+0x164>)
 8000794:	f000 fe7a 	bl	800148c <LS032_TextReg_SetString>
	  LS032_DrawScene(&ls032);
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <main+0x164>)
 800079a:	f000 ff20 	bl	80015de <LS032_DrawScene>
	  LS032_Update(&ls032);
 800079e:	480b      	ldr	r0, [pc, #44]	@ (80007cc <main+0x164>)
 80007a0:	f000 fea4 	bl	80014ec <LS032_Update>

	  tmp_num++;
 80007a4:	7bbb      	ldrb	r3, [r7, #14]
 80007a6:	3301      	adds	r3, #1
 80007a8:	73bb      	strb	r3, [r7, #14]
	  if (tmp_num > 9)
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d9e7      	bls.n	8000780 <main+0x118>
		  tmp_num = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73bb      	strb	r3, [r7, #14]
	  LS032_Clear(&ls032);
 80007b4:	e7e4      	b.n	8000780 <main+0x118>
 80007b6:	bf00      	nop
 80007b8:	48000400 	.word	0x48000400
 80007bc:	40000800 	.word	0x40000800
 80007c0:	20008000 	.word	0x20008000
 80007c4:	40000400 	.word	0x40000400
 80007c8:	20007fb4 	.word	0x20007fb4
 80007cc:	2000006c 	.word	0x2000006c
 80007d0:	20007f04 	.word	0x20007f04
 80007d4:	48000c00 	.word	0x48000c00
 80007d8:	20007f68 	.word	0x20007f68
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20005cc0 	.word	0x20005cc0
 80007e8:	20005ec0 	.word	0x20005ec0
 80007ec:	08005314 	.word	0x08005314

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	@ 0x58
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2244      	movs	r2, #68	@ 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fd41 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000812:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000816:	f001 fb1b 	bl	8001e50 <HAL_PWREx_ControlVoltageScaling>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 f835 	bl	800088e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	2303      	movs	r3, #3
 8000834:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800083a:	2308      	movs	r3, #8
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083e:	2307      	movs	r3, #7
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fb54 	bl	8001efc <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800085a:	f000 f818 	bl	800088e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	2103      	movs	r1, #3
 8000876:	4618      	mov	r0, r3
 8000878:	f001 ff1c 	bl	80026b4 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000882:	f000 f804 	bl	800088e <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3758      	adds	r7, #88	@ 0x58
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000892:	b672      	cpsid	i
}
 8000894:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <Error_Handler+0x8>
	...

0800089c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008a2:	4a1a      	ldr	r2, [pc, #104]	@ (800090c <MX_SPI1_Init+0x70>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_SPI1_Init+0x6c>)
 80008f4:	f002 fd8c 	bl	8003410 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008fe:	f7ff ffc6 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20007ea0 	.word	0x20007ea0
 800090c:	40013000 	.word	0x40013000

08000910 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <MX_SPI3_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <MX_SPI3_Init+0x74>)
 800091c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000924:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000928:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_SPI3_Init+0x74>)
 800092c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000930:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_SPI3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000948:	2210      	movs	r2, #16
 800094a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <MX_SPI3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_SPI3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000960:	2207      	movs	r2, #7
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_SPI3_Init+0x74>)
 800096c:	2208      	movs	r2, #8
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_SPI3_Init+0x74>)
 8000972:	f002 fd4d 	bl	8003410 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 800097c:	f7ff ff87 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20007f04 	.word	0x20007f04
 8000988:	40003c00 	.word	0x40003c00

0800098c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <HAL_SPI_MspInit+0xdc>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d129      	bne.n	8000a02 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009de:	23e0      	movs	r3, #224	@ 0xe0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ee:	2305      	movs	r3, #5
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f001 f858 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a00:	e02d      	b.n	8000a5e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <HAL_SPI_MspInit+0xe4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d128      	bne.n	8000a5e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_SPI_MspInit+0xe0>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <HAL_SPI_MspInit+0xe8>)
 8000a5a:	f001 f829 	bl	8001ab0 <HAL_GPIO_Init>
}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40003c00 	.word	0x40003c00
 8000a74:	48000800 	.word	0x48000800

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 fec5 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b72:	2230      	movs	r2, #48	@ 0x30
 8000b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6399999;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <MX_TIM2_Init+0xb0>)
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000b90:	f002 ffbc 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f7ff fe78 	bl	800088e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4810      	ldr	r0, [pc, #64]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000bae:	f003 fdc1 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000bb8:	f7ff fe69 	bl	800088e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	@ 0x60
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200000;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_TIM2_Init+0xb4>)
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000bd4:	f003 f8f8 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000bde:	f7ff fe56 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000be2:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <MX_TIM2_Init+0xac>)
 8000be4:	f000 f91c 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	@ 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20007f68 	.word	0x20007f68
 8000bf4:	0061a7ff 	.word	0x0061a7ff
 8000bf8:	0030d400 	.word	0x0030d400

08000bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c22:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <MX_TIM3_Init+0xc8>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c34:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c46:	481e      	ldr	r0, [pc, #120]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c48:	f002 ff60 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c52:	f7ff fe1c 	bl	800088e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c66:	f003 fd65 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c70:	f7ff fe0d 	bl	800088e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c74:	2360      	movs	r3, #96	@ 0x60
 8000c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c78:	2332      	movs	r3, #50	@ 0x32
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	2204      	movs	r2, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000c8c:	f003 f89c 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c96:	f7ff fdfa 	bl	800088e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000ca2:	f003 f891 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000cac:	f7ff fdef 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <MX_TIM3_Init+0xc4>)
 8000cb2:	f000 f8b5 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20007fb4 	.word	0x20007fb4
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000cee:	4a28      	ldr	r2, [pc, #160]	@ (8000d90 <MX_TIM4_Init+0xc8>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000cfe:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d12:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d14:	f002 fefa 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d1e:	f7ff fdb6 	bl	800088e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d32:	f003 fcff 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d3c:	f7ff fda7 	bl	800088e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	@ 0x60
 8000d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d58:	f003 f836 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f7ff fd94 	bl	800088e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	2208      	movs	r2, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d6e:	f003 f82b 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d78:	f7ff fd89 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d7c:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <MX_TIM4_Init+0xc4>)
 8000d7e:	f000 f84f 	bl	8000e20 <HAL_TIM_MspPostInit>

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20008000 	.word	0x20008000
 8000d90:	40000800 	.word	0x40000800

08000d94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da4:	d10c      	bne.n	8000dc0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dbe:	e022      	b.n	8000e06 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <HAL_TIM_PWM_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10c      	bne.n	8000de4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	4a11      	ldr	r2, [pc, #68]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
}
 8000de2:	e010      	b.n	8000e06 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e1c <HAL_TIM_PWM_MspInit+0x88>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10b      	bne.n	8000e06 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_TIM_PWM_MspInit+0x80>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
}
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	40000800 	.word	0x40000800

08000e20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e40:	d11c      	bne.n	8000e7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a32      	ldr	r2, [pc, #200]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DISPLAY_EXTCOMIN_Pin;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISPLAY_EXTCOMIN_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <HAL_TIM_MspPostInit+0xf4>)
 8000e76:	f000 fe1b 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e7a:	e044      	b.n	8000f06 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <HAL_TIM_MspPostInit+0xf8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11d      	bne.n	8000ec2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_IND_Pin|LEFT_IND_Pin;
 8000e9e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <HAL_TIM_MspPostInit+0xfc>)
 8000ebc:	f000 fdf8 	bl	8001ab0 <HAL_GPIO_Init>
}
 8000ec0:	e021      	b.n	8000f06 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a16      	ldr	r2, [pc, #88]	@ (8000f20 <HAL_TIM_MspPostInit+0x100>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d11c      	bne.n	8000f06 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_TIM_MspPostInit+0xf0>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAULTLIGHT_CTRL_Pin|READLIGHT_CTRL_Pin;
 8000ee4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <HAL_TIM_MspPostInit+0xf4>)
 8000f02:	f000 fdd5 	bl	8001ab0 <HAL_GPIO_Init>
}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	@ (8000f80 <MX_USART2_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f68:	f003 fc6c 	bl	8004844 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f7ff fc8c 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000804c 	.word	0x2000804c
 8000f80:	40004400 	.word	0x40004400

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0aa      	sub	sp, #168	@ 0xa8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2284      	movs	r2, #132	@ 0x84
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 f96e 	bl	8005286 <memset>
  if(uartHandle->Instance==USART2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <HAL_UART_MspInit+0xb0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d13b      	bne.n	800102c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fd99 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fcc:	f7ff fc5f 	bl	800088e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_UART_MspInit+0xb4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001000:	230c      	movs	r3, #12
 8001002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001018:	2307      	movs	r3, #7
 800101a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f000 fd42 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800102c:	bf00      	nop
 800102e:	37a8      	adds	r7, #168	@ 0xa8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40004400 	.word	0x40004400
 8001038:	40021000 	.word	0x40021000

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff fd6e 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f004 f915 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fafb 	bl	8000668 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001080:	08021df0 	.word	0x08021df0
  ldr r2, =_sbss
 8001084:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001088:	200080d8 	.word	0x200080d8

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>

0800108e <delay_us>:
#include <Bitmaps.h>
#include <string.h>

// HELPER FUNCS
// ------------------------------------------------------------------------------------
void delay_us(uint32_t us) {
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	// 64MHz clock. 1us = 64CLK
	for (uint32_t i = 0; i < us*64; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e003      	b.n	80010a4 <delay_us+0x16>
		asm("NOP");
 800109c:	bf00      	nop
	for (uint32_t i = 0; i < us*64; i++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	019b      	lsls	r3, r3, #6
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3f6      	bcc.n	800109c <delay_us+0xe>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <get_gate_addr>:

void get_gate_addr(uint16_t gate_addr, uint8_t *bytes) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	80fb      	strh	r3, [r7, #6]

	gate_addr = LS032_PIXEL_WIDTH - gate_addr;			// gate is 1 indexed
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	f5c3 7306 	rsb	r3, r3, #536	@ 0x218
 80010ce:	80fb      	strh	r3, [r7, #6]
	bytes[0] = 0b10000000; 	// Mode select (M0=H, M1=L, M2=L)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	701a      	strb	r2, [r3, #0]

	// This shoves 10 bits into B0 and B1, while flipping the endianness
	bytes[0] |= (gate_addr & 0b0000000000000001) << 1;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	701a      	strb	r2, [r3, #0]
	bytes[0] |= (gate_addr & 0b0000000000000010) >> 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	105b      	asrs	r3, r3, #1
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000000100) << 5;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b25a      	sxtb	r2, r3
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	b25b      	sxtb	r3, r3
 8001120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001124:	b25b      	sxtb	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b25a      	sxtb	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000001000) << 3;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25a      	sxtb	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001146:	b25b      	sxtb	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b25a      	sxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000010000) << 1;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b25a      	sxtb	r2, r3
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	b25b      	sxtb	r3, r3
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25a      	sxtb	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000000100000) >> 1;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25a      	sxtb	r2, r3
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	105b      	asrs	r3, r3, #1
 8001182:	b25b      	sxtb	r3, r3
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25a      	sxtb	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000001000000) >> 3;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25a      	sxtb	r2, r3
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	10db      	asrs	r3, r3, #3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000010000000) >> 5;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	115b      	asrs	r3, r3, #5
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000000100000000) >> 7;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	11db      	asrs	r3, r3, #7
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
	bytes[1] |= (gate_addr & 0b0000001000000000) >> 9;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	125b      	asrs	r3, r3, #9
 8001202:	b25b      	sxtb	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b25b      	sxtb	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b25a      	sxtb	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <get_idx_from_pos>:

uint8_t get_idx_from_pos(uint16_t pos_x, uint16_t pos_y, uint16_t *vram_idx) {
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	603a      	str	r2, [r7, #0]
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	460b      	mov	r3, r1
 8001230:	80bb      	strh	r3, [r7, #4]
	if (pos_x >= LS032_PIXEL_WIDTH) return ERROR;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001238:	d301      	bcc.n	800123e <get_idx_from_pos+0x1c>
 800123a:	2301      	movs	r3, #1
 800123c:	e014      	b.n	8001268 <get_idx_from_pos+0x46>
	if (pos_y >= LS032_VRAM_HEIGHT - 2) return ERROR;
 800123e:	88bb      	ldrh	r3, [r7, #4]
 8001240:	2b29      	cmp	r3, #41	@ 0x29
 8001242:	d901      	bls.n	8001248 <get_idx_from_pos+0x26>
 8001244:	2301      	movs	r3, #1
 8001246:	e00f      	b.n	8001268 <get_idx_from_pos+0x46>

	*vram_idx = pos_x * 44 + pos_y + 2;
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	461a      	mov	r2, r3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	441a      	add	r2, r3
 8001250:	0052      	lsls	r2, r2, #1
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	b29a      	uxth	r2, r3
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	3302      	adds	r3, #2
 8001260:	b29a      	uxth	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	801a      	strh	r2, [r3, #0]

	return SUCCESS;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LS032_Init>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t LS032_Init(LS032_HandleTypeDef *ls032) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	// EXTMODE pin should already be default high
	// Initialize vram
	memset(ls032->vram, 0x00, ls032->vram_len);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001284:	461a      	mov	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f003 fffd 	bl	8005286 <memset>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 800128c:	2300      	movs	r3, #0
 800128e:	81fb      	strh	r3, [r7, #14]
 8001290:	e00e      	b.n	80012b0 <LS032_Init+0x3c>
		// Fill in addressing of every column as single array
		get_gate_addr(col, ls032->vram + col*LS032_VRAM_HEIGHT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	89fa      	ldrh	r2, [r7, #14]
 8001298:	212c      	movs	r1, #44	@ 0x2c
 800129a:	fb01 f202 	mul.w	r2, r1, r2
 800129e:	441a      	add	r2, r3
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff09 	bl	80010bc <get_gate_addr>
	for (uint16_t col = 0; col < LS032_PIXEL_WIDTH; col++) {
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	3301      	adds	r3, #1
 80012ae:	81fb      	strh	r3, [r7, #14]
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80012b6:	d3ec      	bcc.n	8001292 <LS032_Init+0x1e>
	}

	// Initialize register RAM
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	737b      	strb	r3, [r7, #13]
 80012bc:	e030      	b.n	8001320 <LS032_Init+0xac>
		ls032->registers[reg].pos_x = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	805a      	strh	r2, [r3, #2]
		ls032->registers[reg].pos_y = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d0:	7b7b      	ldrb	r3, [r7, #13]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	809a      	strh	r2, [r3, #4]
		ls032->registers[reg].size = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	719a      	strb	r2, [r3, #6]
		ls032->registers[reg].mode = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ec:	7b7b      	ldrb	r3, [r7, #13]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	71da      	strb	r2, [r3, #7]
		ls032->registers[reg].len = 0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	2200      	movs	r2, #0
 8001302:	721a      	strb	r2, [r3, #8]
		memset(ls032->registers[reg].str, 0x00, 0xFF);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	22ff      	movs	r2, #255	@ 0xff
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f003 ffb6 	bl	8005286 <memset>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 800131a:	7b7b      	ldrb	r3, [r7, #13]
 800131c:	3301      	adds	r3, #1
 800131e:	737b      	strb	r3, [r7, #13]
 8001320:	7b7b      	ldrb	r3, [r7, #13]
 8001322:	2b1f      	cmp	r3, #31
 8001324:	d9cb      	bls.n	80012be <LS032_Init+0x4a>
	}

	delay_us(30);
 8001326:	201e      	movs	r0, #30
 8001328:	f7ff feb1 	bl	800108e <delay_us>
	// Need to clear twice for some reason
	LS032_Wipe(ls032);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8ee 	bl	800150e <LS032_Wipe>
	LS032_Wipe(ls032);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f8eb 	bl	800150e <LS032_Wipe>
	delay_us(30);
 8001338:	201e      	movs	r0, #30
 800133a:	f7ff fea8 	bl	800108e <delay_us>
	HAL_GPIO_WritePin(ls032->disp_gpio_handle, ls032->disp_gpio_pin, GPIO_PIN_SET);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69d8      	ldr	r0, [r3, #28]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	8c1b      	ldrh	r3, [r3, #32]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd5b 	bl	8001e04 <HAL_GPIO_WritePin>
	delay_us(30);
 800134e:	201e      	movs	r0, #30
 8001350:	f7ff fe9d 	bl	800108e <delay_us>
	HAL_TIM_PWM_Start(ls032->extcomin_tim_handle, ls032->extcomin_channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8a1b      	ldrh	r3, [r3, #16]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f002 fc2c 	bl	8003bbc <HAL_TIM_PWM_Start>
	delay_us(30);
 8001364:	201e      	movs	r0, #30
 8001366:	f7ff fe92 	bl	800108e <delay_us>
	return SUCCESS;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <LS032_Send>:

uint8_t LS032_Send(LS032_HandleTypeDef *ls032, uint8_t *pData, uint16_t len) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

	// Assert the CS high
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_SET);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6858      	ldr	r0, [r3, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	891b      	ldrh	r3, [r3, #8]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f000 fd37 	bl	8001e04 <HAL_GPIO_WritePin>
	delay_us(3);
 8001396:	2003      	movs	r0, #3
 8001398:	f7ff fe79 	bl	800108e <delay_us>
	ret = HAL_SPI_Transmit(ls032->spi_handle, pData, len, 100);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	2364      	movs	r3, #100	@ 0x64
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	f002 f8d6 	bl	8003556 <HAL_SPI_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	75fb      	strb	r3, [r7, #23]
	delay_us(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fe6d 	bl	800108e <delay_us>
	if (ret) {
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <LS032_Send+0x5a>
		// Release the CS
		HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6858      	ldr	r0, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	891b      	ldrh	r3, [r3, #8]
 80013c2:	2200      	movs	r2, #0
 80013c4:	4619      	mov	r1, r3
 80013c6:	f000 fd1d 	bl	8001e04 <HAL_GPIO_WritePin>
		return ret;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	e008      	b.n	80013e0 <LS032_Send+0x6c>
	}

	// Release the CS
	HAL_GPIO_WritePin(ls032->cs_gpio_handle, ls032->cs_gpio_pin, GPIO_PIN_RESET);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6858      	ldr	r0, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	891b      	ldrh	r3, [r3, #8]
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	f000 fd13 	bl	8001e04 <HAL_GPIO_WritePin>

	return SUCCESS;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LS032_TextReg_SetPos>:

uint8_t LS032_TextReg_SetPos(LS032_HandleTypeDef *ls032, uint8_t reg, uint16_t pos_x, uint16_t pos_y) {
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	72fb      	strb	r3, [r7, #11]
 80013fa:	460b      	mov	r3, r1
 80013fc:	813b      	strh	r3, [r7, #8]
 80013fe:	4613      	mov	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]
	if (reg >= LS032_NUMREGISTERS) 		return ERROR;
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	2b1f      	cmp	r3, #31
 8001406:	d901      	bls.n	800140c <LS032_TextReg_SetPos+0x24>
 8001408:	2301      	movs	r3, #1
 800140a:	e019      	b.n	8001440 <LS032_TextReg_SetPos+0x58>
	if (pos_x >= LS032_PIXEL_WIDTH) 	return ERROR;
 800140c:	893b      	ldrh	r3, [r7, #8]
 800140e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001412:	d301      	bcc.n	8001418 <LS032_TextReg_SetPos+0x30>
 8001414:	2301      	movs	r3, #1
 8001416:	e013      	b.n	8001440 <LS032_TextReg_SetPos+0x58>
	if (pos_y >= LS032_VRAM_HEIGHT - 2)	return ERROR;
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b29      	cmp	r3, #41	@ 0x29
 800141c:	d901      	bls.n	8001422 <LS032_TextReg_SetPos+0x3a>
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <LS032_TextReg_SetPos+0x58>

	ls032->registers[reg].pos_x = pos_x;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	893a      	ldrh	r2, [r7, #8]
 800142e:	805a      	strh	r2, [r3, #2]
	ls032->registers[reg].pos_y = pos_y;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	4413      	add	r3, r2
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	809a      	strh	r2, [r3, #4]

	return SUCCESS;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LS032_TextReg_SetSize>:

uint8_t LS032_TextReg_SetSize(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t size) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
 8001458:	4613      	mov	r3, r2
 800145a:	70bb      	strb	r3, [r7, #2]
	if (reg >= LS032_NUMREGISTERS) 	return ERROR;
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2b1f      	cmp	r3, #31
 8001460:	d901      	bls.n	8001466 <LS032_TextReg_SetSize+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e00c      	b.n	8001480 <LS032_TextReg_SetSize+0x34>
	if (size >= 8)					return ERROR;
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d901      	bls.n	8001470 <LS032_TextReg_SetSize+0x24>
 800146c:	2301      	movs	r3, #1
 800146e:	e007      	b.n	8001480 <LS032_TextReg_SetSize+0x34>

	ls032->registers[reg].size = size;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	78ba      	ldrb	r2, [r7, #2]
 800147c:	719a      	strb	r2, [r3, #6]

	return SUCCESS;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LS032_TextReg_SetString>:
	ls032->registers[reg].mode = mode;

	return SUCCESS;
}

uint8_t LS032_TextReg_SetString(LS032_HandleTypeDef *ls032, uint8_t reg, uint8_t len, char* str) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	72fb      	strb	r3, [r7, #11]
 800149a:	4613      	mov	r3, r2
 800149c:	72bb      	strb	r3, [r7, #10]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	2b1f      	cmp	r3, #31
 80014a2:	d901      	bls.n	80014a8 <LS032_TextReg_SetString+0x1c>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e01d      	b.n	80014e4 <LS032_TextReg_SetString+0x58>

	ls032->registers[reg].len = len;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ac:	7afb      	ldrb	r3, [r7, #11]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	7aba      	ldrb	r2, [r7, #10]
 80014b4:	721a      	strb	r2, [r3, #8]
	memset(ls032->registers[reg].str, 0x00, 0xFF);	// Clear contents of string in case len doesnt match
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	4413      	add	r3, r2
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	22ff      	movs	r2, #255	@ 0xff
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fedd 	bl	8005286 <memset>
	memcpy(ls032->registers[reg].str, str, len);	// copy str into register buffer
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	7aba      	ldrb	r2, [r7, #10]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 feff 	bl	80052e0 <memcpy>

	return SUCCESS;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LS032_Update>:

// GENERAL DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_Update(LS032_HandleTypeDef *ls032) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	// Push VRAM to LCD Mem.
	// Todo: Make this a DMA TX
	return LS032_Send(ls032, ls032->vram, ls032->vram_len);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fc:	461a      	mov	r2, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff38 	bl	8001374 <LS032_Send>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LS032_Wipe>:

uint8_t LS032_Wipe(LS032_HandleTypeDef *ls032) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	uint8_t clear_cmd[2] = {0x20, 0x00};
 8001516:	2320      	movs	r3, #32
 8001518:	81bb      	strh	r3, [r7, #12]
	return LS032_Send(ls032, clear_cmd, 2);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2202      	movs	r2, #2
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff26 	bl	8001374 <LS032_Send>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <LS032_Clear>:

uint8_t LS032_Clear(LS032_HandleTypeDef *ls032) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800153a:	2300      	movs	r3, #0
 800153c:	81fb      	strh	r3, [r7, #14]
 800153e:	e00f      	b.n	8001560 <LS032_Clear+0x2e>
		memset(ls032->vram + x*44 + 2, 0xFF, 42);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	212c      	movs	r1, #44	@ 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	3302      	adds	r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	222a      	movs	r2, #42	@ 0x2a
 8001552:	21ff      	movs	r1, #255	@ 0xff
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fe96 	bl	8005286 <memset>
	for (uint16_t x = 0; x < LS032_PIXEL_WIDTH; x++) {
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	3301      	adds	r3, #1
 800155e:	81fb      	strh	r3, [r7, #14]
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8001566:	d3eb      	bcc.n	8001540 <LS032_Clear+0xe>
	}

	return SUCCESS;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LS032_DrawRegister>:
	}

	return SUCCESS;
}

uint8_t LS032_DrawRegister(LS032_HandleTypeDef *ls032, uint8_t reg) {
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af02      	add	r7, sp, #8
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	70fb      	strb	r3, [r7, #3]
	if (reg >= LS032_NUMREGISTERS) return ERROR;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b1f      	cmp	r3, #31
 8001582:	d901      	bls.n	8001588 <LS032_DrawRegister+0x16>
 8001584:	2301      	movs	r3, #1
 8001586:	e026      	b.n	80015d6 <LS032_DrawRegister+0x64>

	return LS032_DrawString(ls032,
			ls032->registers[reg].pos_x,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 8001592:	8858      	ldrh	r0, [r3, #2]
			ls032->registers[reg].pos_y,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 800159e:	889c      	ldrh	r4, [r3, #4]
			ls032->registers[reg].size,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80015aa:	799d      	ldrb	r5, [r3, #6]
			ls032->registers[reg].len,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
	return LS032_DrawString(ls032,
 80015b6:	7a1b      	ldrb	r3, [r3, #8]
			ls032->registers[reg].str);
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	440a      	add	r2, r1
	return LS032_DrawString(ls032,
 80015c2:	68d2      	ldr	r2, [r2, #12]
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	462b      	mov	r3, r5
 80015ca:	4622      	mov	r2, r4
 80015cc:	4601      	mov	r1, r0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8d0 	bl	8001774 <LS032_DrawString>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}

080015de <LS032_DrawScene>:

uint8_t LS032_DrawScene(LS032_HandleTypeDef *ls032) {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e00c      	b.n	8001606 <LS032_DrawScene+0x28>
		if (LS032_DrawRegister(ls032, reg))
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffbe 	bl	8001572 <LS032_DrawRegister>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <LS032_DrawScene+0x22>
			return ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e006      	b.n	800160e <LS032_DrawScene+0x30>
	for (uint8_t reg = 0; reg < LS032_NUMREGISTERS; reg++) {
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b1f      	cmp	r3, #31
 800160a:	d9ef      	bls.n	80015ec <LS032_DrawScene+0xe>
	}
	return SUCCESS;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <LS032_DrawLogo>:

// SPECIFIC DRAWING
// ------------------------------------------------------------------------------------------

uint8_t LS032_DrawLogo(LS032_HandleTypeDef *ls032) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	LS032_Clear(ls032);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff86 	bl	8001532 <LS032_Clear>
	uint16_t x_off = (LS032_PIXEL_WIDTH - 500) / 2;
 8001626:	2312      	movs	r3, #18
 8001628:	81bb      	strh	r3, [r7, #12]
	uint16_t y_off = (42 - 21) / 2;
 800162a:	230a      	movs	r3, #10
 800162c:	817b      	strh	r3, [r7, #10]
	for (uint16_t x = 0; x < 500; x++) {
 800162e:	2300      	movs	r3, #0
 8001630:	81fb      	strh	r3, [r7, #14]
 8001632:	e01c      	b.n	800166e <LS032_DrawLogo+0x56>
		memcpy(ls032->vram + (x+x_off)*44 + y_off + 2, BSSR_LOGO + x*21, 21);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001638:	89f9      	ldrh	r1, [r7, #14]
 800163a:	89bb      	ldrh	r3, [r7, #12]
 800163c:	440b      	add	r3, r1
 800163e:	212c      	movs	r1, #44	@ 0x2c
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4619      	mov	r1, r3
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	440b      	add	r3, r1
 800164a:	3302      	adds	r3, #2
 800164c:	18d0      	adds	r0, r2, r3
 800164e:	89fa      	ldrh	r2, [r7, #14]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00da      	lsls	r2, r3, #3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <LS032_DrawLogo+0x68>)
 800165e:	4413      	add	r3, r2
 8001660:	2215      	movs	r2, #21
 8001662:	4619      	mov	r1, r3
 8001664:	f003 fe3c 	bl	80052e0 <memcpy>
	for (uint16_t x = 0; x < 500; x++) {
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	3301      	adds	r3, #1
 800166c:	81fb      	strh	r3, [r7, #14]
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001674:	d3de      	bcc.n	8001634 <LS032_DrawLogo+0x1c>
	}

	return SUCCESS;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0801f4dc 	.word	0x0801f4dc

08001684 <LS032_DrawChar>:

uint8_t LS032_DrawChar(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, char ch) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	817b      	strh	r3, [r7, #10]
 8001696:	460b      	mov	r3, r1
 8001698:	813b      	strh	r3, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	71fb      	strb	r3, [r7, #7]
	// Account for newline
	if (ch == '\n') {
 800169e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d101      	bne.n	80016aa <LS032_DrawChar+0x26>
		// TODO: Move cursor to newline
		return SUCCESS;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e05c      	b.n	8001764 <LS032_DrawChar+0xe0>
	}

	uint16_t char_idx = ALPHNUM_SIZES_IDX[size][(uint8_t)ch];
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a2f      	ldr	r2, [pc, #188]	@ (800176c <LS032_DrawChar+0xe8>)
 80016ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	827b      	strh	r3, [r7, #18]
	if (char_idx == 0)
 80016be:	8a7b      	ldrh	r3, [r7, #18]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <LS032_DrawChar+0x44>
		return ERROR;	// char is unable to be rendered
 80016c4:	2301      	movs	r3, #1
 80016c6:	e04d      	b.n	8001764 <LS032_DrawChar+0xe0>

	uint8_t char_width = ALPHNUM_SIZES[size][char_idx];
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a29      	ldr	r2, [pc, #164]	@ (8001770 <LS032_DrawChar+0xec>)
 80016cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016d0:	8a7b      	ldrh	r3, [r7, #18]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	75fb      	strb	r3, [r7, #23]
	uint8_t char_height = size + 1;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	3301      	adds	r3, #1
 80016dc:	75bb      	strb	r3, [r7, #22]
	uint16_t vram_idx = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	823b      	strh	r3, [r7, #16]
	get_idx_from_pos(pos_x, pos_y, &vram_idx);
 80016e2:	f107 0210 	add.w	r2, r7, #16
 80016e6:	8939      	ldrh	r1, [r7, #8]
 80016e8:	897b      	ldrh	r3, [r7, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd99 	bl	8001222 <get_idx_from_pos>

	// Get distance to edge of screen on X
	if (LS032_PIXEL_WIDTH - pos_x < char_width)
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	f5c3 7206 	rsb	r2, r3, #536	@ 0x218
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	da04      	bge.n	8001706 <LS032_DrawChar+0x82>
		char_width = LS032_PIXEL_WIDTH - pos_x;
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f1c3 0318 	rsb	r3, r3, #24
 8001704:	75fb      	strb	r3, [r7, #23]

	// Get distance to edge of screen on Y
	if (LS032_PIXEL_HEIGHT - pos_y < char_height)
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	f5c3 72a8 	rsb	r2, r3, #336	@ 0x150
 800170c:	7dbb      	ldrb	r3, [r7, #22]
 800170e:	429a      	cmp	r2, r3
 8001710:	da04      	bge.n	800171c <LS032_DrawChar+0x98>
		char_height = LS032_PIXEL_HEIGHT - pos_y;
 8001712:	893b      	ldrh	r3, [r7, #8]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 800171a:	75bb      	strb	r3, [r7, #22]

	for (uint8_t col = 0; col < char_width; col++) {
 800171c:	2300      	movs	r3, #0
 800171e:	757b      	strb	r3, [r7, #21]
 8001720:	e01b      	b.n	800175a <LS032_DrawChar+0xd6>
		memcpy(ls032->vram + vram_idx, ALPHNUM_SIZES[size] + char_idx + 1 + col*char_height, char_height);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	8a3a      	ldrh	r2, [r7, #16]
 8001728:	189c      	adds	r4, r3, r2
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <LS032_DrawChar+0xec>)
 800172e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001732:	8a7b      	ldrh	r3, [r7, #18]
 8001734:	7d79      	ldrb	r1, [r7, #21]
 8001736:	7db8      	ldrb	r0, [r7, #22]
 8001738:	fb00 f101 	mul.w	r1, r0, r1
 800173c:	440b      	add	r3, r1
 800173e:	3301      	adds	r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	7dba      	ldrb	r2, [r7, #22]
 8001744:	4619      	mov	r1, r3
 8001746:	4620      	mov	r0, r4
 8001748:	f003 fdca 	bl	80052e0 <memcpy>
		vram_idx += LS032_VRAM_HEIGHT;
 800174c:	8a3b      	ldrh	r3, [r7, #16]
 800174e:	332c      	adds	r3, #44	@ 0x2c
 8001750:	b29b      	uxth	r3, r3
 8001752:	823b      	strh	r3, [r7, #16]
	for (uint8_t col = 0; col < char_width; col++) {
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	3301      	adds	r3, #1
 8001758:	757b      	strb	r3, [r7, #21]
 800175a:	7d7a      	ldrb	r2, [r7, #21]
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	429a      	cmp	r2, r3
 8001760:	d3df      	bcc.n	8001722 <LS032_DrawChar+0x9e>
	}
	return SUCCESS;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	20000008 	.word	0x20000008
 8001770:	20000028 	.word	0x20000028

08001774 <LS032_DrawString>:

uint8_t LS032_DrawString(LS032_HandleTypeDef *ls032, uint16_t pos_x, uint16_t pos_y, uint8_t size, uint8_t len, char* str) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4603      	mov	r3, r0
 8001784:	817b      	strh	r3, [r7, #10]
 8001786:	460b      	mov	r3, r1
 8001788:	813b      	strh	r3, [r7, #8]
 800178a:	4613      	mov	r3, r2
 800178c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e025      	b.n	80017e0 <LS032_DrawString+0x6c>
		LS032_DrawChar(ls032, pos_x, pos_y, size, str[i]);
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	79f8      	ldrb	r0, [r7, #7]
 800179e:	893a      	ldrh	r2, [r7, #8]
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4603      	mov	r3, r0
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff ff6c 	bl	8001684 <LS032_DrawChar>
		uint16_t char_idx = ALPHNUM_SIZES_IDX[size][str[i]];
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <LS032_DrawString+0x80>)
 80017b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b8:	440b      	add	r3, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	82bb      	strh	r3, [r7, #20]
		pos_x += ALPHNUM_SIZES[size][char_idx];
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <LS032_DrawString+0x84>)
 80017c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	897b      	ldrh	r3, [r7, #10]
 80017d6:	4413      	add	r3, r2
 80017d8:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < len; i++) {
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	3301      	adds	r3, #1
 80017de:	75fb      	strb	r3, [r7, #23]
 80017e0:	7dfa      	ldrb	r2, [r7, #23]
 80017e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3d4      	bcc.n	8001794 <LS032_DrawString+0x20>
	}

	return SUCCESS;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000028 	.word	0x20000028

080017fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f91e 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180c:	200f      	movs	r0, #15
 800180e:	f000 f80d 	bl	800182c <HAL_InitTick>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e001      	b.n	8001822 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181e:	f7ff f92b 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_InitTick+0x6c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d023      	beq.n	8001888 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <HAL_InitTick+0x70>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <HAL_InitTick+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f91d 	bl	8001a96 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d809      	bhi.n	800187c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f8f5 	bl	8001a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_InitTick+0x74>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e007      	b.n	800188c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e004      	b.n	800188c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e001      	b.n	800188c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000004c 	.word	0x2000004c
 800189c:	20000004 	.word	0x20000004
 80018a0:	20000048 	.word	0x20000048

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000004c 	.word	0x2000004c
 80018c8:	200080d4 	.word	0x200080d4

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200080d4 	.word	0x200080d4

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff47 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff5c 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb0 	bl	8001a04 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e17f      	b.n	8001dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8171 	beq.w	8001dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d118      	bne.n	8001b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d017      	beq.n	8001bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d123      	bne.n	8001c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	6939      	ldr	r1, [r7, #16]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80ac 	beq.w	8001dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b5f      	ldr	r3, [pc, #380]	@ (8001de0 <HAL_GPIO_Init+0x330>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	4a5e      	ldr	r2, [pc, #376]	@ (8001de0 <HAL_GPIO_Init+0x330>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001de0 <HAL_GPIO_Init+0x330>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x242>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8001de8 <HAL_GPIO_Init+0x338>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x23e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8001dec <HAL_GPIO_Init+0x33c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x23a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8001df0 <HAL_GPIO_Init+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x236>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001df4 <HAL_GPIO_Init+0x344>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x232>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_GPIO_Init+0x348>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x22e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dfc <HAL_GPIO_Init+0x34c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x22a>
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x244>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d04:	4937      	ldr	r1, [pc, #220]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d36:	4a32      	ldr	r2, [pc, #200]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d3c:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d60:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001db4:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <HAL_GPIO_Init+0x350>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f47f ae78 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010000 	.word	0x40010000
 8001de8:	48000400 	.word	0x48000400
 8001dec:	48000800 	.word	0x48000800
 8001df0:	48000c00 	.word	0x48000c00
 8001df4:	48001000 	.word	0x48001000
 8001df8:	48001400 	.word	0x48001400
 8001dfc:	48001800 	.word	0x48001800
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40007000 	.word	0x40007000

08001e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5e:	d130      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e6c:	d038      	beq.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2232      	movs	r2, #50	@ 0x32
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9b      	lsrs	r3, r3, #18
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e94:	e002      	b.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea8:	d102      	bne.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f2      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebc:	d110      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e00f      	b.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d007      	beq.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed8:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ede:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e3ca      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4b97      	ldr	r3, [pc, #604]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f18:	4b94      	ldr	r3, [pc, #592]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80e4 	beq.w	80020f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_RCC_OscConfig+0x4a>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	f040 808b 	bne.w	8002054 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 8087 	bne.w	8002054 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f46:	4b89      	ldr	r3, [pc, #548]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e3a2      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	4b82      	ldr	r3, [pc, #520]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_RCC_OscConfig+0x7c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_OscConfig+0x88>
 8001f78:	4b7c      	ldr	r3, [pc, #496]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d223      	bcs.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fd53 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e383      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9c:	4b73      	ldr	r3, [pc, #460]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a72      	ldr	r2, [pc, #456]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b70      	ldr	r3, [pc, #448]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	496d      	ldr	r1, [pc, #436]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fba:	4b6c      	ldr	r3, [pc, #432]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	4968      	ldr	r1, [pc, #416]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
 8001fce:	e025      	b.n	800201c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd0:	4b66      	ldr	r3, [pc, #408]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b63      	ldr	r3, [pc, #396]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4960      	ldr	r1, [pc, #384]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fee:	4b5f      	ldr	r3, [pc, #380]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	495b      	ldr	r1, [pc, #364]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fd13 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e343      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201c:	f000 fc4a 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b52      	ldr	r3, [pc, #328]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4950      	ldr	r1, [pc, #320]	@ (8002170 <HAL_RCC_OscConfig+0x274>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	4a4e      	ldr	r2, [pc, #312]	@ (8002174 <HAL_RCC_OscConfig+0x278>)
 800203a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800203c:	4b4e      	ldr	r3, [pc, #312]	@ (8002178 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fbf3 	bl	800182c <HAL_InitTick>
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d052      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	e327      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d032      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800205c:	4b43      	ldr	r3, [pc, #268]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a42      	ldr	r2, [pc, #264]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002068:	f7ff fc30 	bl	80018cc <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002070:	f7ff fc2c 	bl	80018cc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e310      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a36      	ldr	r2, [pc, #216]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b34      	ldr	r3, [pc, #208]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4931      	ldr	r1, [pc, #196]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ac:	4b2f      	ldr	r3, [pc, #188]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	492c      	ldr	r1, [pc, #176]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e01a      	b.n	80020f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a29      	ldr	r2, [pc, #164]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fbfd 	bl	80018cc <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d6:	f7ff fbf9 	bl	80018cc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e2dd      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1da>
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d074      	beq.n	80021ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b08      	cmp	r3, #8
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x21a>
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d10e      	bne.n	800212e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d064      	beq.n	80021ec <HAL_RCC_OscConfig+0x2f0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d160      	bne.n	80021ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e2ba      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x24a>
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e026      	b.n	8002194 <HAL_RCC_OscConfig+0x298>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800214e:	d115      	bne.n	800217c <HAL_RCC_OscConfig+0x280>
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002156:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a02      	ldr	r2, [pc, #8]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x298>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	08005320 	.word	0x08005320
 8002174:	20000004 	.word	0x20000004
 8002178:	20000048 	.word	0x20000048
 800217c:	4ba0      	ldr	r3, [pc, #640]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a9f      	ldr	r2, [pc, #636]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b9d      	ldr	r3, [pc, #628]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a9c      	ldr	r2, [pc, #624]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fb96 	bl	80018cc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fb92 	bl	80018cc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e276      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4b92      	ldr	r3, [pc, #584]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2a8>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb82 	bl	80018cc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fb7e 	bl	80018cc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	@ 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e262      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021de:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d0>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d060      	beq.n	80022bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x310>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d119      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d116      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	4b7c      	ldr	r3, [pc, #496]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x328>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e23f      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b76      	ldr	r3, [pc, #472]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	4973      	ldr	r1, [pc, #460]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	e040      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d023      	beq.n	800228a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002242:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6e      	ldr	r2, [pc, #440]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff fb3d 	bl	80018cc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff fb39 	bl	80018cc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e21d      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b62      	ldr	r3, [pc, #392]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	495f      	ldr	r1, [pc, #380]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	e018      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b5d      	ldr	r3, [pc, #372]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5c      	ldr	r2, [pc, #368]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff fb19 	bl	80018cc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff fb15 	bl	80018cc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1f9      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03c      	beq.n	8002342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7ff faf4 	bl	80018cc <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff faf0 	bl	80018cc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1d4      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3ec>
 8002308:	e01b      	b.n	8002342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002310:	4a3b      	ldr	r2, [pc, #236]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7ff fad7 	bl	80018cc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff fad3 	bl	80018cc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1b7      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002334:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80a6 	beq.w	800249c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002354:	4b2a      	ldr	r3, [pc, #168]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	4a26      	ldr	r2, [pc, #152]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	@ 0x58
 800236c:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <HAL_RCC_OscConfig+0x508>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d118      	bne.n	80023ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002388:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_OscConfig+0x508>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_RCC_OscConfig+0x508>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002394:	f7ff fa9a 	bl	80018cc <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7ff fa96 	bl	80018cc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e17a      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_RCC_OscConfig+0x508>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4d8>
 80023c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d2:	e029      	b.n	8002428 <HAL_RCC_OscConfig+0x52c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d115      	bne.n	8002408 <HAL_RCC_OscConfig+0x50c>
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f2:	4a03      	ldr	r2, [pc, #12]	@ (8002400 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x52c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	4b9c      	ldr	r3, [pc, #624]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	4a9b      	ldr	r2, [pc, #620]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002418:	4b98      	ldr	r3, [pc, #608]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241e:	4a97      	ldr	r2, [pc, #604]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d016      	beq.n	800245e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7ff fa4c 	bl	80018cc <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7ff fa48 	bl	80018cc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e12a      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b8b      	ldr	r3, [pc, #556]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ed      	beq.n	8002438 <HAL_RCC_OscConfig+0x53c>
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7ff fa35 	bl	80018cc <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fa31 	bl	80018cc <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e113      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4b7f      	ldr	r3, [pc, #508]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b7a      	ldr	r3, [pc, #488]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	4a79      	ldr	r2, [pc, #484]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80fe 	beq.w	80026a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	f040 80d0 	bne.w	8002650 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024b0:	4b72      	ldr	r3, [pc, #456]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d130      	bne.n	8002526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	3b01      	subs	r3, #1
 80024d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d127      	bne.n	8002526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d11f      	bne.n	8002526 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024f0:	2a07      	cmp	r2, #7
 80024f2:	bf14      	ite	ne
 80024f4:	2201      	movne	r2, #1
 80024f6:	2200      	moveq	r2, #0
 80024f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d113      	bne.n	8002526 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d109      	bne.n	8002526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d06e      	beq.n	8002604 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d069      	beq.n	8002600 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800252c:	4b53      	ldr	r3, [pc, #332]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002538:	4b50      	ldr	r3, [pc, #320]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0ad      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002548:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a4b      	ldr	r2, [pc, #300]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002554:	f7ff f9ba 	bl	80018cc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f9b6 	bl	80018cc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e09a      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	4b43      	ldr	r3, [pc, #268]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257a:	4b40      	ldr	r3, [pc, #256]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_RCC_OscConfig+0x784>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800258a:	3a01      	subs	r2, #1
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002594:	0212      	lsls	r2, r2, #8
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800259c:	0852      	lsrs	r2, r2, #1
 800259e:	3a01      	subs	r2, #1
 80025a0:	0552      	lsls	r2, r2, #21
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025a8:	0852      	lsrs	r2, r2, #1
 80025aa:	3a01      	subs	r2, #1
 80025ac:	0652      	lsls	r2, r2, #25
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025b4:	0912      	lsrs	r2, r2, #4
 80025b6:	0452      	lsls	r2, r2, #17
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4930      	ldr	r1, [pc, #192]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025cc:	4b2b      	ldr	r3, [pc, #172]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a2a      	ldr	r2, [pc, #168]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d8:	f7ff f978 	bl	80018cc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff f974 	bl	80018cc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e058      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fe:	e050      	b.n	80026a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e04f      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d148      	bne.n	80026a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a16      	ldr	r2, [pc, #88]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002628:	f7ff f950 	bl	80018cc <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff f94c 	bl	80018cc <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e030      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x734>
 800264e:	e028      	b.n	80026a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d023      	beq.n	800269e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <HAL_RCC_OscConfig+0x780>)
 800265c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff f933 	bl	80018cc <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	e00c      	b.n	8002684 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff f92f 	bl	80018cc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d905      	bls.n	8002684 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
 800267c:	40021000 	.word	0x40021000
 8002680:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x7b0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ec      	bne.n	800266a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_RCC_OscConfig+0x7b0>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4905      	ldr	r1, [pc, #20]	@ (80026ac <HAL_RCC_OscConfig+0x7b0>)
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_RCC_OscConfig+0x7b4>)
 8002698:	4013      	ands	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
 800269c:	e001      	b.n	80026a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	feeefffc 	.word	0xfeeefffc

080026b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0e7      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b72      	ldr	r3, [pc, #456]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4970      	ldr	r1, [pc, #448]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b6e      	ldr	r3, [pc, #440]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cf      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002710:	429a      	cmp	r2, r3
 8002712:	d908      	bls.n	8002726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b63      	ldr	r3, [pc, #396]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4960      	ldr	r1, [pc, #384]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04c      	beq.n	80027cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b5a      	ldr	r3, [pc, #360]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0a6      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4b54      	ldr	r3, [pc, #336]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d115      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e09a      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276a:	4b4e      	ldr	r3, [pc, #312]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e08e      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277a:	4b4a      	ldr	r3, [pc, #296]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e086      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b46      	ldr	r3, [pc, #280]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4943      	ldr	r1, [pc, #268]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7ff f896 	bl	80018cc <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7ff f892 	bl	80018cc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e06e      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b3a      	ldr	r3, [pc, #232]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d208      	bcs.n	80027fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b2e      	ldr	r3, [pc, #184]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	492b      	ldr	r1, [pc, #172]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fa:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d210      	bcs.n	800282a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0207 	bic.w	r2, r3, #7
 8002810:	4923      	ldr	r1, [pc, #140]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e036      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002836:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4918      	ldr	r1, [pc, #96]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4910      	ldr	r1, [pc, #64]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002868:	f000 f824 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	490b      	ldr	r1, [pc, #44]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f4>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_RCC_ClockConfig+0x1fc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe ffcd 	bl	800182c <HAL_InitTick>
 8002892:	4603      	mov	r3, r0
 8002894:	72fb      	strb	r3, [r7, #11]

  return status;
 8002896:	7afb      	ldrb	r3, [r7, #11]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005320 	.word	0x08005320
 80028ac:	20000004 	.word	0x20000004
 80028b0:	20000048 	.word	0x20000048

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028cc:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x34>
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11e      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e8:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f4:	4b31      	ldr	r3, [pc, #196]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e005      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002904:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002910:	4a2b      	ldr	r2, [pc, #172]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002924:	e00a      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d102      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e004      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800293a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d134      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002942:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0xa6>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d003      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xac>
 8002958:	e005      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800295a:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800295c:	617b      	str	r3, [r7, #20]
      break;
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002962:	617b      	str	r3, [r7, #20]
      break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	617b      	str	r3, [r7, #20]
      break;
 800296a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	3301      	adds	r3, #1
 8002978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fb03 f202 	mul.w	r2, r3, r2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0e5b      	lsrs	r3, r3, #25
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	3301      	adds	r3, #1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029ac:	69bb      	ldr	r3, [r7, #24]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08005338 	.word	0x08005338
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4904      	ldr	r1, [pc, #16]	@ (8002a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08005330 	.word	0x08005330

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a10:	f7ff ffda 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0adb      	lsrs	r3, r3, #11
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4904      	ldr	r1, [pc, #16]	@ (8002a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08005330 	.word	0x08005330

08002a38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a44:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a50:	f7ff f9f0 	bl	8001e34 <HAL_PWREx_GetVoltageRange>
 8002a54:	6178      	str	r0, [r7, #20]
 8002a56:	e014      	b.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a64:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a70:	f7ff f9e0 	bl	8001e34 <HAL_PWREx_GetVoltageRange>
 8002a74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a88:	d10b      	bne.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b80      	cmp	r3, #128	@ 0x80
 8002a8e:	d919      	bls.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a94:	d902      	bls.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e013      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e010      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d902      	bls.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e00a      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b80      	cmp	r3, #128	@ 0x80
 8002ab2:	d102      	bne.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	e004      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b70      	cmp	r3, #112	@ 0x70
 8002abe:	d101      	bne.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 0207 	bic.w	r2, r3, #7
 8002acc:	4909      	ldr	r1, [pc, #36]	@ (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ad4:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40022000 	.word	0x40022000

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d041      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b1c:	d02a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b1e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b22:	d824      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b2e:	d81e      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b38:	d010      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b3a:	e018      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b3c:	4b86      	ldr	r3, [pc, #536]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a85      	ldr	r2, [pc, #532]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b48:	e015      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fa8b 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b5a:	e00c      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3320      	adds	r3, #32
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fb76 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	74fb      	strb	r3, [r7, #19]
      break;
 8002b72:	e000      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b7c:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8a:	4973      	ldr	r1, [pc, #460]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b92:	e001      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d041      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bac:	d02a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bb2:	d824      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bbe:	d81e      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc8:	d010      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bca:	e018      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bcc:	4b62      	ldr	r3, [pc, #392]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a61      	ldr	r2, [pc, #388]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bd8:	e015      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fa43 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bea:	e00c      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3320      	adds	r3, #32
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fb2e 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bfc:	e003      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	74fb      	strb	r3, [r7, #19]
      break;
 8002c02:	e000      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c0c:	4b52      	ldr	r3, [pc, #328]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c1a:	494f      	ldr	r1, [pc, #316]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c22:	e001      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a0 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	4a40      	ldr	r2, [pc, #256]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3a      	ldr	r2, [pc, #232]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c78:	f7fe fe28 	bl	80018cc <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c7e:	e009      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c80:	f7fe fe24 	bl	80018cc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d902      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	74fb      	strb	r3, [r7, #19]
        break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c94:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ef      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d15c      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01f      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d019      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc4:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	4a20      	ldr	r2, [pc, #128]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf0:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fde3 	bl	80018cc <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d08:	e00b      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fddf 	bl	80018cc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d20:	e006      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ec      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d46:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d64:	7c7b      	ldrb	r3, [r7, #17]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	4aa0      	ldr	r2, [pc, #640]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b9b      	ldr	r3, [pc, #620]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	4997      	ldr	r1, [pc, #604]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da4:	4b92      	ldr	r3, [pc, #584]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	498f      	ldr	r1, [pc, #572]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	4986      	ldr	r1, [pc, #536]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de8:	4b81      	ldr	r3, [pc, #516]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	497e      	ldr	r1, [pc, #504]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0a:	4b79      	ldr	r3, [pc, #484]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e18:	4975      	ldr	r1, [pc, #468]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e2c:	4b70      	ldr	r3, [pc, #448]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	496d      	ldr	r1, [pc, #436]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4e:	4b68      	ldr	r3, [pc, #416]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	4964      	ldr	r1, [pc, #400]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e70:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7e:	495c      	ldr	r1, [pc, #368]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e92:	4b57      	ldr	r3, [pc, #348]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea0:	4953      	ldr	r1, [pc, #332]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	494b      	ldr	r1, [pc, #300]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed6:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	4942      	ldr	r1, [pc, #264]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d028      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f06:	493a      	ldr	r1, [pc, #232]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
 8002f24:	e011      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f898 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f56:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4922      	ldr	r1, [pc, #136]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f80:	60d3      	str	r3, [r2, #12]
 8002f82:	e011      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f869 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d031      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	490b      	ldr	r1, [pc, #44]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2102      	movs	r1, #2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f846 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	74bb      	strb	r3, [r7, #18]
 8002fee:	e013      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002ff0:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3320      	adds	r3, #32
 8003002:	2102      	movs	r1, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f925 	bl	8003254 <RCCEx_PLLSAI2_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003024:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003032:	490d      	ldr	r1, [pc, #52]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003054:	4904      	ldr	r1, [pc, #16]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800305c:	7cbb      	ldrb	r3, [r7, #18]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307a:	4b75      	ldr	r3, [pc, #468]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003086:	4b72      	ldr	r3, [pc, #456]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
       ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800309e:	4b6c      	ldr	r3, [pc, #432]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
       ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d047      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e044      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d018      	beq.n	80030f2 <RCCEx_PLLSAI1_Config+0x86>
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d825      	bhi.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d002      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x62>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d009      	beq.n	80030e0 <RCCEx_PLLSAI1_Config+0x74>
 80030cc:	e020      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ce:	4b60      	ldr	r3, [pc, #384]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030de:	e01a      	b.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e013      	b.n	800311a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030f2:	4b57      	ldr	r3, [pc, #348]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fe:	4b54      	ldr	r3, [pc, #336]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310e:	e006      	b.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e004      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003126:	4b4a      	ldr	r3, [pc, #296]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	430b      	orrs	r3, r1
 800313c:	4944      	ldr	r1, [pc, #272]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d17d      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003148:	4b41      	ldr	r3, [pc, #260]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003154:	f7fe fbba 	bl	80018cc <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800315a:	e009      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315c:	f7fe fbb6 	bl	80018cc <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	73fb      	strb	r3, [r7, #15]
        break;
 800316e:	e005      	b.n	800317c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003170:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ef      	bne.n	800315c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d160      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003188:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	0211      	lsls	r1, r2, #8
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	0912      	lsrs	r2, r2, #4
 80031a0:	0452      	lsls	r2, r2, #17
 80031a2:	430a      	orrs	r2, r1
 80031a4:	492a      	ldr	r1, [pc, #168]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	610b      	str	r3, [r1, #16]
 80031aa:	e027      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d112      	bne.n	80031d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80031ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	0211      	lsls	r1, r2, #8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6912      	ldr	r2, [r2, #16]
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0552      	lsls	r2, r2, #21
 80031ce:	430a      	orrs	r2, r1
 80031d0:	491f      	ldr	r1, [pc, #124]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
 80031d6:	e011      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6892      	ldr	r2, [r2, #8]
 80031e8:	0211      	lsls	r1, r2, #8
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6952      	ldr	r2, [r2, #20]
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0652      	lsls	r2, r2, #25
 80031f4:	430a      	orrs	r2, r1
 80031f6:	4916      	ldr	r1, [pc, #88]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003206:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fb60 	bl	80018cc <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800320e:	e009      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003210:	f7fe fb5c 	bl	80018cc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	73fb      	strb	r3, [r7, #15]
          break;
 8003222:	e005      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	4904      	ldr	r1, [pc, #16]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000

08003254 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003262:	4b6a      	ldr	r3, [pc, #424]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800326e:	4b67      	ldr	r3, [pc, #412]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d10d      	bne.n	800329a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
       ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003286:	4b61      	ldr	r3, [pc, #388]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
       ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d047      	beq.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e044      	b.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d018      	beq.n	80032da <RCCEx_PLLSAI2_Config+0x86>
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d825      	bhi.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d002      	beq.n	80032b6 <RCCEx_PLLSAI2_Config+0x62>
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d009      	beq.n	80032c8 <RCCEx_PLLSAI2_Config+0x74>
 80032b4:	e020      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032b6:	4b55      	ldr	r3, [pc, #340]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11d      	bne.n	80032fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c6:	e01a      	b.n	80032fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e013      	b.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032da:	4b4c      	ldr	r3, [pc, #304]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032e6:	4b49      	ldr	r3, [pc, #292]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032f6:	e006      	b.n	8003306 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e004      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003306:	bf00      	nop
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	430b      	orrs	r3, r1
 8003324:	4939      	ldr	r1, [pc, #228]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d167      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003330:	4b36      	ldr	r3, [pc, #216]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a35      	ldr	r2, [pc, #212]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe fac6 	bl	80018cc <HAL_GetTick>
 8003340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003342:	e009      	b.n	8003358 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003344:	f7fe fac2 	bl	80018cc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	73fb      	strb	r3, [r7, #15]
        break;
 8003356:	e005      	b.n	8003364 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003358:	4b2c      	ldr	r3, [pc, #176]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ef      	bne.n	8003344 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d14a      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003370:	4b26      	ldr	r3, [pc, #152]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
 8003380:	0211      	lsls	r1, r2, #8
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	0912      	lsrs	r2, r2, #4
 8003388:	0452      	lsls	r2, r2, #17
 800338a:	430a      	orrs	r2, r1
 800338c:	491f      	ldr	r1, [pc, #124]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	614b      	str	r3, [r1, #20]
 8003392:	e011      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003394:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800339c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6912      	ldr	r2, [r2, #16]
 80033aa:	0852      	lsrs	r2, r2, #1
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0652      	lsls	r2, r2, #25
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4916      	ldr	r1, [pc, #88]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fa82 	bl	80018cc <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033cc:	f7fe fa7e 	bl	80018cc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
          break;
 80033de:	e005      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4904      	ldr	r1, [pc, #16]	@ (800340c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e095      	b.n	800354e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003432:	d009      	beq.n	8003448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
 800343a:	e005      	b.n	8003448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fa92 	bl	800098c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800347e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003488:	d902      	bls.n	8003490 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e002      	b.n	8003496 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003494:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800349e:	d007      	beq.n	80034b0 <HAL_SPI_Init+0xa0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f2:	ea42 0103 	orr.w	r1, r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	f003 0204 	and.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800352c:	ea42 0103 	orr.w	r1, r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003566:	f7fe f9b1 	bl	80018cc <HAL_GetTick>
 800356a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d001      	beq.n	8003580 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
 800357e:	e15c      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SPI_Transmit+0x36>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e154      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_SPI_Transmit+0x48>
 800359a:	2302      	movs	r3, #2
 800359c:	e14d      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f0:	d10f      	bne.n	8003612 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d007      	beq.n	8003630 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003638:	d952      	bls.n	80036e0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0xf2>
 8003642:	8b7b      	ldrh	r3, [r7, #26]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d145      	bne.n	80036d4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800366c:	e032      	b.n	80036d4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d112      	bne.n	80036a2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036a0:	e018      	b.n	80036d4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fe f913 	bl	80018cc <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Transmit+0x164>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x16a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b2      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1c7      	bne.n	800366e <HAL_SPI_Transmit+0x118>
 80036de:	e083      	b.n	80037e8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x198>
 80036e8:	8b7b      	ldrh	r3, [r7, #26]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d177      	bne.n	80037de <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d912      	bls.n	800371e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b02      	subs	r3, #2
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800371c:	e05f      	b.n	80037de <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003744:	e04b      	b.n	80037de <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d12b      	bne.n	80037ac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d912      	bls.n	8003784 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b02      	subs	r3, #2
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003782:	e02c      	b.n	80037de <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037aa:	e018      	b.n	80037de <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ac:	f7fe f88e 	bl	80018cc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d803      	bhi.n	80037c4 <HAL_SPI_Transmit+0x26e>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Transmit+0x274>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e02d      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ae      	bne.n	8003746 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	6839      	ldr	r1, [r7, #0]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f947 	bl	8003a80 <SPI_EndRxTxTransaction>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003838:	2300      	movs	r3, #0
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003854:	f7fe f83a 	bl	80018cc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003864:	f7fe f832 	bl	80018cc <HAL_GetTick>
 8003868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800386a:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	015b      	lsls	r3, r3, #5
 8003870:	0d1b      	lsrs	r3, r3, #20
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387a:	e054      	b.n	8003926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d050      	beq.n	8003926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003884:	f7fe f822 	bl	80018cc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	429a      	cmp	r2, r3
 8003892:	d902      	bls.n	800389a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d13d      	bne.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b2:	d111      	bne.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038bc:	d004      	beq.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d107      	bne.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e0:	d10f      	bne.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e017      	b.n	8003946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3b01      	subs	r3, #1
 8003924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	429a      	cmp	r2, r3
 8003942:	d19b      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000004 	.word	0x20000004

08003954 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003966:	f7fd ffb1 	bl	80018cc <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	4413      	add	r3, r2
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003976:	f7fd ffa9 	bl	80018cc <HAL_GetTick>
 800397a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003984:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00da      	lsls	r2, r3, #3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	0d1b      	lsrs	r3, r3, #20
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800399c:	e060      	b.n	8003a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039a4:	d107      	bne.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d050      	beq.n	8003a60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039be:	f7fd ff85 	bl	80018cc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d902      	bls.n	80039d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13d      	bne.n	8003a50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ec:	d111      	bne.n	8003a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f6:	d004      	beq.n	8003a02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a00:	d107      	bne.n	8003a12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1a:	d10f      	bne.n	8003a3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e010      	b.n	8003a72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d196      	bne.n	800399e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3728      	adds	r7, #40	@ 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000004 	.word	0x20000004

08003a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff5b 	bl	8003954 <SPI_WaitFifoStateUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e027      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff fec0 	bl	8003844 <SPI_WaitFlagStateUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e014      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff ff34 	bl	8003954 <SPI_WaitFifoStateUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e000      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e049      	b.n	8003bb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd f92e 	bl	8000d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 fa50 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x24>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e03c      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d109      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e02f      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x72>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x8c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e09c      	b.n	8003d9c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xb6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	e023      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xc6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c80:	e01b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xd6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c90:	e013      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xe6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xf6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb0:	e003      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fd10 	bl	80046e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a35      	ldr	r2, [pc, #212]	@ (8003da4 <HAL_TIM_PWM_Start+0x1e8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x13e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <HAL_TIM_PWM_Start+0x1ec>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x13e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a32      	ldr	r2, [pc, #200]	@ (8003dac <HAL_TIM_PWM_Start+0x1f0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x13e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a31      	ldr	r2, [pc, #196]	@ (8003db0 <HAL_TIM_PWM_Start+0x1f4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x13e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003db4 <HAL_TIM_PWM_Start+0x1f8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x142>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_TIM_PWM_Start+0x144>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a22      	ldr	r2, [pc, #136]	@ (8003da4 <HAL_TIM_PWM_Start+0x1e8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d26:	d018      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <HAL_TIM_PWM_Start+0x1fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a21      	ldr	r2, [pc, #132]	@ (8003dbc <HAL_TIM_PWM_Start+0x200>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <HAL_TIM_PWM_Start+0x204>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x19e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <HAL_TIM_PWM_Start+0x1f0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d115      	bne.n	8003d86 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <HAL_TIM_PWM_Start+0x208>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d015      	beq.n	8003d98 <HAL_TIM_PWM_Start+0x1dc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d72:	d011      	beq.n	8003d98 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d84:	e008      	b.n	8003d98 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e000      	b.n	8003d9a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	00010007 	.word	0x00010007

08003dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ff      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b14      	cmp	r3, #20
 8003df2:	f200 80f0 	bhi.w	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003df6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003fd7 	.word	0x08003fd7
 8003e04:	08003fd7 	.word	0x08003fd7
 8003e08:	08003fd7 	.word	0x08003fd7
 8003e0c:	08003e91 	.word	0x08003e91
 8003e10:	08003fd7 	.word	0x08003fd7
 8003e14:	08003fd7 	.word	0x08003fd7
 8003e18:	08003fd7 	.word	0x08003fd7
 8003e1c:	08003ed3 	.word	0x08003ed3
 8003e20:	08003fd7 	.word	0x08003fd7
 8003e24:	08003fd7 	.word	0x08003fd7
 8003e28:	08003fd7 	.word	0x08003fd7
 8003e2c:	08003f13 	.word	0x08003f13
 8003e30:	08003fd7 	.word	0x08003fd7
 8003e34:	08003fd7 	.word	0x08003fd7
 8003e38:	08003fd7 	.word	0x08003fd7
 8003e3c:	08003f55 	.word	0x08003f55
 8003e40:	08003fd7 	.word	0x08003fd7
 8003e44:	08003fd7 	.word	0x08003fd7
 8003e48:	08003fd7 	.word	0x08003fd7
 8003e4c:	08003f95 	.word	0x08003f95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f970 	bl	800413c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	619a      	str	r2, [r3, #24]
      break;
 8003e8e:	e0a5      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f9e0 	bl	800425c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	021a      	lsls	r2, r3, #8
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
      break;
 8003ed0:	e084      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fa49 	bl	8004370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0208 	orr.w	r2, r2, #8
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      break;
 8003f10:	e064      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fab1 	bl	8004480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
      break;
 8003f52:	e043      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fafa 	bl	8004554 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f92:	e023      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb3e 	bl	800461c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fd4:	e002      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a46      	ldr	r2, [pc, #280]	@ (800411c <TIM_Base_SetConfig+0x12c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a43      	ldr	r2, [pc, #268]	@ (8004120 <TIM_Base_SetConfig+0x130>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a42      	ldr	r2, [pc, #264]	@ (8004124 <TIM_Base_SetConfig+0x134>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a41      	ldr	r2, [pc, #260]	@ (8004128 <TIM_Base_SetConfig+0x138>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a40      	ldr	r2, [pc, #256]	@ (800412c <TIM_Base_SetConfig+0x13c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a35      	ldr	r2, [pc, #212]	@ (800411c <TIM_Base_SetConfig+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01f      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004050:	d01b      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a32      	ldr	r2, [pc, #200]	@ (8004120 <TIM_Base_SetConfig+0x130>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d017      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a31      	ldr	r2, [pc, #196]	@ (8004124 <TIM_Base_SetConfig+0x134>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a30      	ldr	r2, [pc, #192]	@ (8004128 <TIM_Base_SetConfig+0x138>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2f      	ldr	r2, [pc, #188]	@ (800412c <TIM_Base_SetConfig+0x13c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2e      	ldr	r2, [pc, #184]	@ (8004130 <TIM_Base_SetConfig+0x140>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2d      	ldr	r2, [pc, #180]	@ (8004134 <TIM_Base_SetConfig+0x144>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2c      	ldr	r2, [pc, #176]	@ (8004138 <TIM_Base_SetConfig+0x148>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a16      	ldr	r2, [pc, #88]	@ (800411c <TIM_Base_SetConfig+0x12c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00f      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a18      	ldr	r2, [pc, #96]	@ (800412c <TIM_Base_SetConfig+0x13c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <TIM_Base_SetConfig+0x140>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a16      	ldr	r2, [pc, #88]	@ (8004134 <TIM_Base_SetConfig+0x144>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <TIM_Base_SetConfig+0x148>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f023 0201 	bic.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	611a      	str	r2, [r3, #16]
  }
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40013400 	.word	0x40013400
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800

0800413c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 0201 	bic.w	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0302 	bic.w	r3, r3, #2
 8004188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2c      	ldr	r2, [pc, #176]	@ (8004248 <TIM_OC1_SetConfig+0x10c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00f      	beq.n	80041bc <TIM_OC1_SetConfig+0x80>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2b      	ldr	r2, [pc, #172]	@ (800424c <TIM_OC1_SetConfig+0x110>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_OC1_SetConfig+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004250 <TIM_OC1_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_OC1_SetConfig+0x80>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a29      	ldr	r2, [pc, #164]	@ (8004254 <TIM_OC1_SetConfig+0x118>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC1_SetConfig+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a28      	ldr	r2, [pc, #160]	@ (8004258 <TIM_OC1_SetConfig+0x11c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0308 	bic.w	r3, r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <TIM_OC1_SetConfig+0x10c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_OC1_SetConfig+0xc2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <TIM_OC1_SetConfig+0x110>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_OC1_SetConfig+0xc2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <TIM_OC1_SetConfig+0x114>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC1_SetConfig+0xc2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <TIM_OC1_SetConfig+0x118>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC1_SetConfig+0xc2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <TIM_OC1_SetConfig+0x11c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d111      	bne.n	8004222 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 0210 	bic.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0320 	bic.w	r3, r3, #32
 80042aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a28      	ldr	r2, [pc, #160]	@ (800435c <TIM_OC2_SetConfig+0x100>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC2_SetConfig+0x6c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a27      	ldr	r2, [pc, #156]	@ (8004360 <TIM_OC2_SetConfig+0x104>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10d      	bne.n	80042e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a1d      	ldr	r2, [pc, #116]	@ (800435c <TIM_OC2_SetConfig+0x100>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00f      	beq.n	800430c <TIM_OC2_SetConfig+0xb0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <TIM_OC2_SetConfig+0x104>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_OC2_SetConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <TIM_OC2_SetConfig+0x108>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_OC2_SetConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004368 <TIM_OC2_SetConfig+0x10c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_OC2_SetConfig+0xb0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a19      	ldr	r2, [pc, #100]	@ (800436c <TIM_OC2_SetConfig+0x110>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d113      	bne.n	8004334 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	621a      	str	r2, [r3, #32]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40013400 	.word	0x40013400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800

08004370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a27      	ldr	r2, [pc, #156]	@ (800446c <TIM_OC3_SetConfig+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_OC3_SetConfig+0x6a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <TIM_OC3_SetConfig+0x100>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10d      	bne.n	80043f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <TIM_OC3_SetConfig+0xfc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_OC3_SetConfig+0xae>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <TIM_OC3_SetConfig+0x100>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_OC3_SetConfig+0xae>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <TIM_OC3_SetConfig+0x104>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_OC3_SetConfig+0xae>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <TIM_OC3_SetConfig+0x108>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC3_SetConfig+0xae>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	@ (800447c <TIM_OC3_SetConfig+0x10c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d113      	bne.n	8004446 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	621a      	str	r2, [r3, #32]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <TIM_OC4_SetConfig+0xc0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00f      	beq.n	8004504 <TIM_OC4_SetConfig+0x84>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <TIM_OC4_SetConfig+0xc4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_OC4_SetConfig+0x84>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <TIM_OC4_SetConfig+0xc8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC4_SetConfig+0x84>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a15      	ldr	r2, [pc, #84]	@ (800454c <TIM_OC4_SetConfig+0xcc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC4_SetConfig+0x84>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a14      	ldr	r2, [pc, #80]	@ (8004550 <TIM_OC4_SetConfig+0xd0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d109      	bne.n	8004518 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800450a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40013400 	.word	0x40013400
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004598:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <TIM_OC5_SetConfig+0xb4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_OC5_SetConfig+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a16      	ldr	r2, [pc, #88]	@ (800460c <TIM_OC5_SetConfig+0xb8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_OC5_SetConfig+0x7a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <TIM_OC5_SetConfig+0xbc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_OC5_SetConfig+0x7a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <TIM_OC5_SetConfig+0xc0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC5_SetConfig+0x7a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a13      	ldr	r2, [pc, #76]	@ (8004618 <TIM_OC5_SetConfig+0xc4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d109      	bne.n	80045e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	051b      	lsls	r3, r3, #20
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a18      	ldr	r2, [pc, #96]	@ (80046d4 <TIM_OC6_SetConfig+0xb8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_OC6_SetConfig+0x7c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <TIM_OC6_SetConfig+0xbc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_OC6_SetConfig+0x7c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <TIM_OC6_SetConfig+0xc0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_OC6_SetConfig+0x7c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <TIM_OC6_SetConfig+0xc4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC6_SetConfig+0x7c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <TIM_OC6_SetConfig+0xc8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2201      	movs	r2, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1a      	ldr	r2, [r3, #32]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e068      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2e      	ldr	r2, [pc, #184]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047be:	d018      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a18      	ldr	r2, [pc, #96]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40014000 	.word	0x40014000

08004844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e040      	b.n	80048d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fb8c 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fae0 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f825 	bl	80048e0 <UART_SetConfig>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e01b      	b.n	80048d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb5f 	bl	8004f94 <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b08a      	sub	sp, #40	@ 0x28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4ba4      	ldr	r3, [pc, #656]	@ (8004ba0 <UART_SetConfig+0x2c0>)
 8004910:	4013      	ands	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a99      	ldr	r2, [pc, #612]	@ (8004ba4 <UART_SetConfig+0x2c4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004948:	4313      	orrs	r3, r2
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a90      	ldr	r2, [pc, #576]	@ (8004ba8 <UART_SetConfig+0x2c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d126      	bne.n	80049b8 <UART_SetConfig+0xd8>
 800496a:	4b90      	ldr	r3, [pc, #576]	@ (8004bac <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b03      	cmp	r3, #3
 8004976:	d81b      	bhi.n	80049b0 <UART_SetConfig+0xd0>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0xa0>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004991 	.word	0x08004991
 8004984:	080049a1 	.word	0x080049a1
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a9 	.word	0x080049a9
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e116      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e112      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e10e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e10a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e106      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb0 <UART_SetConfig+0x2d0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d138      	bne.n	8004a34 <UART_SetConfig+0x154>
 80049c2:	4b7a      	ldr	r3, [pc, #488]	@ (8004bac <UART_SetConfig+0x2cc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d82d      	bhi.n	8004a2c <UART_SetConfig+0x14c>
 80049d0:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <UART_SetConfig+0xf8>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a2d 	.word	0x08004a2d
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a1d 	.word	0x08004a1d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a2d 	.word	0x08004a2d
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a15 	.word	0x08004a15
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e0d8      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e0d4      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e0d0      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e0cc      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e0c8      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d125      	bne.n	8004a8a <UART_SetConfig+0x1aa>
 8004a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bac <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d016      	beq.n	8004a7a <UART_SetConfig+0x19a>
 8004a4c:	2b30      	cmp	r3, #48	@ 0x30
 8004a4e:	d818      	bhi.n	8004a82 <UART_SetConfig+0x1a2>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d00a      	beq.n	8004a6a <UART_SetConfig+0x18a>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d814      	bhi.n	8004a82 <UART_SetConfig+0x1a2>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <UART_SetConfig+0x182>
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d008      	beq.n	8004a72 <UART_SetConfig+0x192>
 8004a60:	e00f      	b.n	8004a82 <UART_SetConfig+0x1a2>
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a68:	e0ad      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a70:	e0a9      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a72:	2304      	movs	r3, #4
 8004a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a78:	e0a5      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a80:	e0a1      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a82:	2310      	movs	r3, #16
 8004a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a88:	e09d      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb8 <UART_SetConfig+0x2d8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x200>
 8004a94:	4b45      	ldr	r3, [pc, #276]	@ (8004bac <UART_SetConfig+0x2cc>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa0:	d016      	beq.n	8004ad0 <UART_SetConfig+0x1f0>
 8004aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa4:	d818      	bhi.n	8004ad8 <UART_SetConfig+0x1f8>
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d00a      	beq.n	8004ac0 <UART_SetConfig+0x1e0>
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d814      	bhi.n	8004ad8 <UART_SetConfig+0x1f8>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <UART_SetConfig+0x1d8>
 8004ab2:	2b40      	cmp	r3, #64	@ 0x40
 8004ab4:	d008      	beq.n	8004ac8 <UART_SetConfig+0x1e8>
 8004ab6:	e00f      	b.n	8004ad8 <UART_SetConfig+0x1f8>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e082      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e07e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e07a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad6:	e076      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ade:	e072      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a35      	ldr	r2, [pc, #212]	@ (8004bbc <UART_SetConfig+0x2dc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d12a      	bne.n	8004b40 <UART_SetConfig+0x260>
 8004aea:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004af8:	d01a      	beq.n	8004b30 <UART_SetConfig+0x250>
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004afe:	d81b      	bhi.n	8004b38 <UART_SetConfig+0x258>
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b04:	d00c      	beq.n	8004b20 <UART_SetConfig+0x240>
 8004b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0a:	d815      	bhi.n	8004b38 <UART_SetConfig+0x258>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x238>
 8004b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b14:	d008      	beq.n	8004b28 <UART_SetConfig+0x248>
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x258>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1e:	e052      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b20:	2302      	movs	r3, #2
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e04e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e04a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e046      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3e:	e042      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <UART_SetConfig+0x2c4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d13a      	bne.n	8004bc0 <UART_SetConfig+0x2e0>
 8004b4a:	4b18      	ldr	r3, [pc, #96]	@ (8004bac <UART_SetConfig+0x2cc>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b58:	d01a      	beq.n	8004b90 <UART_SetConfig+0x2b0>
 8004b5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b5e:	d81b      	bhi.n	8004b98 <UART_SetConfig+0x2b8>
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b64:	d00c      	beq.n	8004b80 <UART_SetConfig+0x2a0>
 8004b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6a:	d815      	bhi.n	8004b98 <UART_SetConfig+0x2b8>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <UART_SetConfig+0x298>
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b74:	d008      	beq.n	8004b88 <UART_SetConfig+0x2a8>
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x2b8>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e022      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e01e      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e01a      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e016      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e012      	b.n	8004bc6 <UART_SetConfig+0x2e6>
 8004ba0:	efff69f3 	.word	0xefff69f3
 8004ba4:	40008000 	.word	0x40008000
 8004ba8:	40013800 	.word	0x40013800
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40004400 	.word	0x40004400
 8004bb4:	40004800 	.word	0x40004800
 8004bb8:	40004c00 	.word	0x40004c00
 8004bbc:	40005000 	.word	0x40005000
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a9f      	ldr	r2, [pc, #636]	@ (8004e48 <UART_SetConfig+0x568>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d17a      	bne.n	8004cc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d824      	bhi.n	8004c22 <UART_SetConfig+0x342>
 8004bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <UART_SetConfig+0x300>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c13 	.word	0x08004c13
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fd feec 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61f8      	str	r0, [r7, #28]
        break;
 8004c0a:	e010      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e4c <UART_SetConfig+0x56c>)
 8004c0e:	61fb      	str	r3, [r7, #28]
        break;
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fd fe4f 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004c16:	61f8      	str	r0, [r7, #28]
        break;
 8004c18:	e009      	b.n	8004c2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1e:	61fb      	str	r3, [r7, #28]
        break;
 8004c20:	e005      	b.n	8004c2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80fb 	beq.w	8004e2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d305      	bcc.n	8004c52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d903      	bls.n	8004c5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c58:	e0e8      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	461c      	mov	r4, r3
 8004c60:	4615      	mov	r5, r2
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	022b      	lsls	r3, r5, #8
 8004c6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c70:	0222      	lsls	r2, r4, #8
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	6849      	ldr	r1, [r1, #4]
 8004c76:	0849      	lsrs	r1, r1, #1
 8004c78:	2000      	movs	r0, #0
 8004c7a:	4688      	mov	r8, r1
 8004c7c:	4681      	mov	r9, r0
 8004c7e:	eb12 0a08 	adds.w	sl, r2, r8
 8004c82:	eb43 0b09 	adc.w	fp, r3, r9
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	f7fb fa96 	bl	80001c8 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004caa:	d308      	bcc.n	8004cbe <UART_SetConfig+0x3de>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb2:	d204      	bcs.n	8004cbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e0b6      	b.n	8004e2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cc4:	e0b2      	b.n	8004e2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cce:	d15e      	bne.n	8004d8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d828      	bhi.n	8004d2a <UART_SetConfig+0x44a>
 8004cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x400>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	08004d2b 	.word	0x08004d2b
 8004cf0:	08004d1b 	.word	0x08004d1b
 8004cf4:	08004d2b 	.word	0x08004d2b
 8004cf8:	08004d2b 	.word	0x08004d2b
 8004cfc:	08004d2b 	.word	0x08004d2b
 8004d00:	08004d23 	.word	0x08004d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fd fe6c 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e014      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fd fe7e 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e010      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d14:	4b4d      	ldr	r3, [pc, #308]	@ (8004e4c <UART_SetConfig+0x56c>)
 8004d16:	61fb      	str	r3, [r7, #28]
        break;
 8004d18:	e00d      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7fd fdcb 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004d1e:	61f8      	str	r0, [r7, #28]
        break;
 8004d20:	e009      	b.n	8004d36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e005      	b.n	8004d36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d077      	beq.n	8004e2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005a      	lsls	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d916      	bls.n	8004d86 <UART_SetConfig+0x4a6>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5e:	d212      	bcs.n	8004d86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	8afa      	ldrh	r2, [r7, #22]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	e052      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d8c:	e04e      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d827      	bhi.n	8004de6 <UART_SetConfig+0x506>
 8004d96:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0x4bc>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fe0e 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	61f8      	str	r0, [r7, #28]
        break;
 8004dc6:	e014      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fd fe20 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
        break;
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e4c <UART_SetConfig+0x56c>)
 8004dd2:	61fb      	str	r3, [r7, #28]
        break;
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fd fd6d 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004dda:	61f8      	str	r0, [r7, #28]
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de2:	61fb      	str	r3, [r7, #28]
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df0:	bf00      	nop
    }

    if (pclk != 0U)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d019      	beq.n	8004e2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	085a      	lsrs	r2, r3, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d909      	bls.n	8004e26 <UART_SetConfig+0x546>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e18:	d205      	bcs.n	8004e26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
 8004e24:	e002      	b.n	8004e2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3728      	adds	r7, #40	@ 0x28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	40008000 	.word	0x40008000
 8004e4c:	00f42400 	.word	0x00f42400

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b098      	sub	sp, #96	@ 0x60
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa4:	f7fc fc92 	bl	80018cc <HAL_GetTick>
 8004fa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d12e      	bne.n	8005016 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f88c 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e062      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d149      	bne.n	80050b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f856 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03c      	beq.n	80050b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	623b      	str	r3, [r7, #32]
   return(result);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800505c:	633b      	str	r3, [r7, #48]	@ 0x30
 800505e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e011      	b.n	80050dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3758      	adds	r7, #88	@ 0x58
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e04f      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d04b      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fc fbe5 	bl	80018cc <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e04e      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d037      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b80      	cmp	r3, #128	@ 0x80
 800512a:	d034      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b40      	cmp	r3, #64	@ 0x40
 8005130:	d031      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b08      	cmp	r3, #8
 800513e:	d110      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2208      	movs	r2, #8
 8005146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f838 	bl	80051be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2208      	movs	r2, #8
 8005152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e029      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005170:	d111      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800517a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f81e 	bl	80051be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00f      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d0a0      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b095      	sub	sp, #84	@ 0x54
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e6      	bne.n	80051c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	61fb      	str	r3, [r7, #28]
   return(result);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800521e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e5      	bne.n	80051f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005230:	2b01      	cmp	r3, #1
 8005232:	d118      	bne.n	8005266 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	60bb      	str	r3, [r7, #8]
   return(result);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0310 	bic.w	r3, r3, #16
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6979      	ldr	r1, [r7, #20]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	613b      	str	r3, [r7, #16]
   return(result);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e6      	bne.n	8005234 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800527a:	bf00      	nop
 800527c:	3754      	adds	r7, #84	@ 0x54
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4d0d      	ldr	r5, [pc, #52]	@ (80052d0 <__libc_init_array+0x38>)
 800529c:	4c0d      	ldr	r4, [pc, #52]	@ (80052d4 <__libc_init_array+0x3c>)
 800529e:	1b64      	subs	r4, r4, r5
 80052a0:	10a4      	asrs	r4, r4, #2
 80052a2:	2600      	movs	r6, #0
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	4d0b      	ldr	r5, [pc, #44]	@ (80052d8 <__libc_init_array+0x40>)
 80052aa:	4c0c      	ldr	r4, [pc, #48]	@ (80052dc <__libc_init_array+0x44>)
 80052ac:	f000 f826 	bl	80052fc <_init>
 80052b0:	1b64      	subs	r4, r4, r5
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	2600      	movs	r6, #0
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	08021de8 	.word	0x08021de8
 80052d4:	08021de8 	.word	0x08021de8
 80052d8:	08021de8 	.word	0x08021de8
 80052dc:	08021dec 	.word	0x08021dec

080052e0 <memcpy>:
 80052e0:	440a      	add	r2, r1
 80052e2:	4291      	cmp	r1, r2
 80052e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e8:	d100      	bne.n	80052ec <memcpy+0xc>
 80052ea:	4770      	bx	lr
 80052ec:	b510      	push	{r4, lr}
 80052ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f6:	4291      	cmp	r1, r2
 80052f8:	d1f9      	bne.n	80052ee <memcpy+0xe>
 80052fa:	bd10      	pop	{r4, pc}

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
